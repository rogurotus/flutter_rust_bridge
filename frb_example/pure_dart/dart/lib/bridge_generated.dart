// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

class FlutterRustBridgeExampleSingleBlockTestImpl implements FlutterRustBridgeExampleSingleBlockTest {
  final FlutterRustBridgeExampleSingleBlockTestPlatform _platform;
  factory FlutterRustBridgeExampleSingleBlockTestImpl(ExternalLibrary dylib) =>
      FlutterRustBridgeExampleSingleBlockTestImpl.raw(FlutterRustBridgeExampleSingleBlockTestPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory FlutterRustBridgeExampleSingleBlockTestImpl.wasm(FutureOr<WasmModule> module) =>
      FlutterRustBridgeExampleSingleBlockTestImpl(module as ExternalLibrary);
  FlutterRustBridgeExampleSingleBlockTestImpl.raw(this._platform);
  Future<int> simpleAdder({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_adder(port_, arg0, arg1),
      parseSuccessData: _wire2api_i32,
      parseErrorData: null,
      constMeta: kSimpleAdderConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleAdderConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder",
        argNames: ["a", "b"],
      );

  int simpleAdderSync({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_simple_adder_sync(arg0, arg1),
      parseSuccessData: _wire2api_i32,
      parseErrorData: null,
      constMeta: kSimpleAdderSyncConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleAdderSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder_sync",
        argNames: ["a", "b"],
      );

  Future<int> primitiveTypes(
      {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint}) {
    var arg0 = api2wire_i32(myI32);
    var arg1 = _platform.api2wire_i64(myI64);
    var arg2 = api2wire_f64(myF64);
    var arg3 = myBool;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_primitive_types(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_i32,
      parseErrorData: null,
      constMeta: kPrimitiveTypesConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrimitiveTypesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_types",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  Future<int?> primitiveOptionalTypes({int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_i32(myI32);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(myI64);
    var arg2 = _platform.api2wire_opt_box_autoadd_f64(myF64);
    var arg3 = _platform.api2wire_opt_box_autoadd_bool(myBool);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_primitive_optional_types(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_opt_box_autoadd_i32,
      parseErrorData: null,
      constMeta: kPrimitiveOptionalTypesConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrimitiveOptionalTypesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_optional_types",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  int primitiveTypesSync(
      {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint}) {
    var arg0 = api2wire_i32(myI32);
    var arg1 = _platform.api2wire_i64(myI64);
    var arg2 = api2wire_f64(myF64);
    var arg3 = myBool;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_primitive_types_sync(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_i32,
      parseErrorData: null,
      constMeta: kPrimitiveTypesSyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrimitiveTypesSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_types_sync",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  Future<int> primitiveU32({required int myU32, dynamic hint}) {
    var arg0 = api2wire_u32(myU32);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_primitive_u32(port_, arg0),
      parseSuccessData: _wire2api_u32,
      parseErrorData: null,
      constMeta: kPrimitiveU32ConstMeta,
      argValues: [myU32],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrimitiveU32ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_u32",
        argNames: ["myU32"],
      );

  int primitiveU32Sync({required int myU32, dynamic hint}) {
    var arg0 = api2wire_u32(myU32);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_primitive_u32_sync(arg0),
      parseSuccessData: _wire2api_u32,
      parseErrorData: null,
      constMeta: kPrimitiveU32SyncConstMeta,
      argValues: [myU32],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrimitiveU32SyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_u32_sync",
        argNames: ["myU32"],
      );

  Future<String> handleString({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_string(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kHandleStringConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStringConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_string",
        argNames: ["s"],
      );

  String handleStringSync({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_string_sync(arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kHandleStringSyncConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStringSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_string_sync",
        argNames: ["s"],
      );

  Future<void> handleReturnUnit({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_return_unit(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kHandleReturnUnitConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleReturnUnitConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_return_unit",
        argNames: [],
      );

  void handleReturnUnitSync({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_return_unit_sync(),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kHandleReturnUnitSyncConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleReturnUnitSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_return_unit_sync",
        argNames: [],
      );

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(v);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_vec_u8(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: null,
      constMeta: kHandleVecU8ConstMeta,
      argValues: [v],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleVecU8ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vec_u8",
        argNames: ["v"],
      );

  Uint8List handleVecU8Sync({required Uint8List v, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(v);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_vec_u8_sync(arg0),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: null,
      constMeta: kHandleVecU8SyncConstMeta,
      argValues: [v],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleVecU8SyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vec_u8_sync",
        argNames: ["v"],
      );

  Future<VecOfPrimitivePack> handleVecOfPrimitive({required int n, dynamic hint}) {
    var arg0 = api2wire_i32(n);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_vec_of_primitive(port_, arg0),
      parseSuccessData: _wire2api_vec_of_primitive_pack,
      parseErrorData: null,
      constMeta: kHandleVecOfPrimitiveConstMeta,
      argValues: [n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleVecOfPrimitiveConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vec_of_primitive",
        argNames: ["n"],
      );

  VecOfPrimitivePack handleVecOfPrimitiveSync({required int n, dynamic hint}) {
    var arg0 = api2wire_i32(n);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_vec_of_primitive_sync(arg0),
      parseSuccessData: _wire2api_vec_of_primitive_pack,
      parseErrorData: null,
      constMeta: kHandleVecOfPrimitiveSyncConstMeta,
      argValues: [n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleVecOfPrimitiveSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vec_of_primitive_sync",
        argNames: ["n"],
      );

  Future<ZeroCopyVecOfPrimitivePack> handleZeroCopyVecOfPrimitive({required int n, dynamic hint}) {
    var arg0 = api2wire_i32(n);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_zero_copy_vec_of_primitive(port_, arg0),
      parseSuccessData: _wire2api_zero_copy_vec_of_primitive_pack,
      parseErrorData: null,
      constMeta: kHandleZeroCopyVecOfPrimitiveConstMeta,
      argValues: [n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleZeroCopyVecOfPrimitiveConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_zero_copy_vec_of_primitive",
        argNames: ["n"],
      );

  ZeroCopyVecOfPrimitivePack handleZeroCopyVecOfPrimitiveSync({required int n, dynamic hint}) {
    var arg0 = api2wire_i32(n);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_zero_copy_vec_of_primitive_sync(arg0),
      parseSuccessData: _wire2api_zero_copy_vec_of_primitive_pack,
      parseErrorData: null,
      constMeta: kHandleZeroCopyVecOfPrimitiveSyncConstMeta,
      argValues: [n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleZeroCopyVecOfPrimitiveSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_zero_copy_vec_of_primitive_sync",
        argNames: ["n"],
      );

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_size(arg);
    var arg1 = _platform.api2wire_box_my_size(boxed);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_struct(port_, arg0, arg1),
      parseSuccessData: _wire2api_my_size,
      parseErrorData: null,
      constMeta: kHandleStructConstMeta,
      argValues: [arg, boxed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_struct",
        argNames: ["arg", "boxed"],
      );

  MySize handleStructSync({required MySize arg, required MySize boxed, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_size(arg);
    var arg1 = _platform.api2wire_box_my_size(boxed);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_struct_sync(arg0, arg1),
      parseSuccessData: _wire2api_my_size,
      parseErrorData: null,
      constMeta: kHandleStructSyncConstMeta,
      argValues: [arg, boxed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStructSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_struct_sync",
        argNames: ["arg", "boxed"],
      );

  MySizeFreezed handleStructSyncFreezed({required MySizeFreezed arg, required MySizeFreezed boxed, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_size_freezed(arg);
    var arg1 = _platform.api2wire_box_my_size_freezed(boxed);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_struct_sync_freezed(arg0, arg1),
      parseSuccessData: _wire2api_my_size_freezed,
      parseErrorData: null,
      constMeta: kHandleStructSyncFreezedConstMeta,
      argValues: [arg, boxed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStructSyncFreezedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_struct_sync_freezed",
        argNames: ["arg", "boxed"],
      );

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_new_type_int(arg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_newtype(port_, arg0),
      parseSuccessData: _wire2api_new_type_int,
      parseErrorData: null,
      constMeta: kHandleNewtypeConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleNewtypeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_newtype",
        argNames: ["arg"],
      );

  NewTypeInt handleNewtypeSync({required NewTypeInt arg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_new_type_int(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_newtype_sync(arg0),
      parseSuccessData: _wire2api_new_type_int,
      parseErrorData: null,
      constMeta: kHandleNewtypeSyncConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleNewtypeSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_newtype_sync",
        argNames: ["arg"],
      );

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint}) {
    var arg0 = _platform.api2wire_list_my_size(l);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_list_of_struct(port_, arg0),
      parseSuccessData: _wire2api_list_my_size,
      parseErrorData: null,
      constMeta: kHandleListOfStructConstMeta,
      argValues: [l],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleListOfStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_list_of_struct",
        argNames: ["l"],
      );

  List<MySize> handleListOfStructSync({required List<MySize> l, dynamic hint}) {
    var arg0 = _platform.api2wire_list_my_size(l);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_list_of_struct_sync(arg0),
      parseSuccessData: _wire2api_list_my_size,
      parseErrorData: null,
      constMeta: kHandleListOfStructSyncConstMeta,
      argValues: [l],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleListOfStructSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_list_of_struct_sync",
        argNames: ["l"],
      );

  Future<List<String>> handleStringList({required List<String> names, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(names);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_string_list(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      parseErrorData: null,
      constMeta: kHandleStringListConstMeta,
      argValues: [names],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStringListConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_string_list",
        argNames: ["names"],
      );

  List<String> handleStringListSync({required List<String> names, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(names);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_string_list_sync(arg0),
      parseSuccessData: _wire2api_StringList,
      parseErrorData: null,
      constMeta: kHandleStringListSyncConstMeta,
      argValues: [names],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStringListSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_string_list_sync",
        argNames: ["names"],
      );

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_tree_node(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_complex_struct(port_, arg0),
      parseSuccessData: _wire2api_my_tree_node,
      parseErrorData: null,
      constMeta: kHandleComplexStructConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleComplexStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_complex_struct",
        argNames: ["s"],
      );

  MyTreeNode handleComplexStructSync({required MyTreeNode s, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_tree_node(s);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_complex_struct_sync(arg0),
      parseSuccessData: _wire2api_my_tree_node,
      parseErrorData: null,
      constMeta: kHandleComplexStructSyncConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleComplexStructSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_complex_struct_sync",
        argNames: ["s"],
      );

  Future<MyNestedStruct> handleNestedStruct({required MyNestedStruct s, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_nested_struct(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_nested_struct(port_, arg0),
      parseSuccessData: _wire2api_my_nested_struct,
      parseErrorData: null,
      constMeta: kHandleNestedStructConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleNestedStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_nested_struct",
        argNames: ["s"],
      );

  Uint8List handleSyncReturn({required String mode, dynamic hint}) {
    var arg0 = _platform.api2wire_String(mode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_sync_return(arg0),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kHandleSyncReturnConstMeta,
      argValues: [mode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleSyncReturnConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_sync_return",
        argNames: ["mode"],
      );

  Stream<String> handleStream({required String arg, dynamic hint}) {
    var arg0 = _platform.api2wire_String(arg);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_stream(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kHandleStreamConstMeta,
      argValues: [arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream",
        argNames: ["arg"],
      );

  Stream<MyStreamEntry> handleStreamOfStruct({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_stream_of_struct(port_),
      parseSuccessData: _wire2api_my_stream_entry,
      parseErrorData: null,
      constMeta: kHandleStreamOfStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStreamOfStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_of_struct",
        argNames: [],
      );

  Future<int> returnErr({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_err(port_),
      parseSuccessData: _wire2api_i32,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kReturnErrConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnErrConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_err",
        argNames: [],
      );

  Future<int> returnPanic({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_panic(port_),
      parseSuccessData: _wire2api_i32,
      parseErrorData: null,
      constMeta: kReturnPanicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnPanicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_panic",
        argNames: [],
      );

  Future<double?> handleOptionalReturn({required double left, required double right, dynamic hint}) {
    var arg0 = api2wire_f64(left);
    var arg1 = api2wire_f64(right);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_optional_return(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_box_autoadd_f64,
      parseErrorData: null,
      constMeta: kHandleOptionalReturnConstMeta,
      argValues: [left, right],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleOptionalReturnConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_optional_return",
        argNames: ["left", "right"],
      );

  Future<Element?> handleOptionalStruct({String? document, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(document);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_optional_struct(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_element,
      parseErrorData: null,
      constMeta: kHandleOptionalStructConstMeta,
      argValues: [document],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleOptionalStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_optional_struct",
        argNames: ["document"],
      );

  Future<ExoticOptionals?> handleOptionalIncrement({ExoticOptionals? opt, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_exotic_optionals(opt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_optional_increment(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_exotic_optionals,
      parseErrorData: null,
      constMeta: kHandleOptionalIncrementConstMeta,
      argValues: [opt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleOptionalIncrementConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_optional_increment",
        argNames: ["opt"],
      );

  Future<double> handleIncrementBoxedOptional({double? opt, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_f64(opt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_increment_boxed_optional(port_, arg0),
      parseSuccessData: _wire2api_f64,
      parseErrorData: null,
      constMeta: kHandleIncrementBoxedOptionalConstMeta,
      argValues: [opt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleIncrementBoxedOptionalConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_increment_boxed_optional",
        argNames: ["opt"],
      );

  Future<OptVecs> handleVecOfOpts({required OptVecs opt, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_opt_vecs(opt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_vec_of_opts(port_, arg0),
      parseSuccessData: _wire2api_opt_vecs,
      parseErrorData: null,
      constMeta: kHandleVecOfOptsConstMeta,
      argValues: [opt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleVecOfOptsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vec_of_opts",
        argNames: ["opt"],
      );

  Future<String> handleOptionBoxArguments(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionals? structbox,
      dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_i8(i8Box);
    var arg1 = _platform.api2wire_opt_box_u8(u8Box);
    var arg2 = _platform.api2wire_opt_box_i32(i32Box);
    var arg3 = _platform.api2wire_opt_box_i64(i64Box);
    var arg4 = _platform.api2wire_opt_box_f64(f64Box);
    var arg5 = _platform.api2wire_opt_box_bool(boolbox);
    var arg6 = _platform.api2wire_opt_box_exotic_optionals(structbox);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_handle_option_box_arguments(port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kHandleOptionBoxArgumentsConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleOptionBoxArgumentsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_option_box_arguments",
        argNames: ["i8Box", "u8Box", "i32Box", "i64Box", "f64Box", "boolbox", "structbox"],
      );

  Future<Uint8List> printNote({required Note note, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_note(note);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_print_note(port_, arg0),
      parseSuccessData: _wire2api_ZeroCopyBuffer_Uint8List,
      parseErrorData: null,
      constMeta: kPrintNoteConstMeta,
      argValues: [note],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrintNoteConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "print_note",
        argNames: ["note"],
      );

  Future<Weekdays?> handleReturnEnum({required String input, dynamic hint}) {
    var arg0 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_return_enum(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_weekdays,
      parseErrorData: null,
      constMeta: kHandleReturnEnumConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleReturnEnumConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_return_enum",
        argNames: ["input"],
      );

  Future<Weekdays> handleEnumParameter({required Weekdays weekday, dynamic hint}) {
    var arg0 = api2wire_weekdays(weekday);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_enum_parameter(port_, arg0),
      parseSuccessData: _wire2api_weekdays,
      parseErrorData: null,
      constMeta: kHandleEnumParameterConstMeta,
      argValues: [weekday],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleEnumParameterConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_enum_parameter",
        argNames: ["weekday"],
      );

  MyEnumFreezed handleEnumSyncFreezed({required MyEnumFreezed value, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_enum_freezed(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_handle_enum_sync_freezed(arg0),
      parseSuccessData: _wire2api_my_enum_freezed,
      parseErrorData: null,
      constMeta: kHandleEnumSyncFreezedConstMeta,
      argValues: [value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleEnumSyncFreezedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_enum_sync_freezed",
        argNames: ["value"],
      );

  Future<void> handleCustomizedStruct({required Customized val, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_customized(val);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_customized_struct(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kHandleCustomizedStructConstMeta,
      argValues: [val],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleCustomizedStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_customized_struct",
        argNames: ["val"],
      );

  Future<KitchenSink> handleEnumStruct({required KitchenSink val, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_kitchen_sink(val);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_enum_struct(port_, arg0),
      parseSuccessData: _wire2api_kitchen_sink,
      parseErrorData: null,
      constMeta: kHandleEnumStructConstMeta,
      argValues: [val],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleEnumStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_enum_struct",
        argNames: ["val"],
      );

  Future<bool> useImportedStruct({required MyStruct myStruct, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_struct(myStruct);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_use_imported_struct(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kUseImportedStructConstMeta,
      argValues: [myStruct],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUseImportedStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "use_imported_struct",
        argNames: ["myStruct"],
      );

  Future<bool> useImportedEnum({required MyEnum myEnum, dynamic hint}) {
    var arg0 = api2wire_my_enum(myEnum);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_use_imported_enum(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kUseImportedEnumConstMeta,
      argValues: [myEnum],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUseImportedEnumConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "use_imported_enum",
        argNames: ["myEnum"],
      );

  Future<ApplicationSettings> getAppSettings({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_app_settings(port_),
      parseSuccessData: _wire2api_application_settings,
      parseErrorData: null,
      constMeta: kGetAppSettingsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAppSettingsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_app_settings",
        argNames: [],
      );

  Future<ApplicationSettings> getFallibleAppSettings({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_fallible_app_settings(port_),
      parseSuccessData: _wire2api_application_settings,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGetFallibleAppSettingsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetFallibleAppSettingsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_fallible_app_settings",
        argNames: [],
      );

  Future<bool> isAppEmbedded({required ApplicationSettings appSettings, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_application_settings(appSettings);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_app_embedded(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kIsAppEmbeddedConstMeta,
      argValues: [appSettings],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsAppEmbeddedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_app_embedded",
        argNames: ["appSettings"],
      );

  Stream<ApplicationSettings> appSettingsStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_app_settings_stream(port_),
      parseSuccessData: _wire2api_application_settings,
      parseErrorData: null,
      constMeta: kAppSettingsStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAppSettingsStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "app_settings_stream",
        argNames: [],
      );

  Stream<List<ApplicationSettings>> appSettingsVecStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_app_settings_vec_stream(port_),
      parseSuccessData: _wire2api_list_application_settings,
      parseErrorData: null,
      constMeta: kAppSettingsVecStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAppSettingsVecStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "app_settings_vec_stream",
        argNames: [],
      );

  Stream<MirrorStruct> mirrorStructStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_mirror_struct_stream(port_),
      parseSuccessData: _wire2api_mirror_struct,
      parseErrorData: null,
      constMeta: kMirrorStructStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMirrorStructStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "mirror_struct_stream",
        argNames: [],
      );

  Stream<(ApplicationSettings, RawStringEnumMirrored)> mirrorTupleStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_mirror_tuple_stream(port_),
      parseSuccessData: _wire2api___record__application_settings_raw_string_enum_mirrored,
      parseErrorData: null,
      constMeta: kMirrorTupleStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMirrorTupleStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "mirror_tuple_stream",
        argNames: [],
      );

  Future<ApplicationMessage> getMessage({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_message(port_),
      parseSuccessData: _wire2api_application_message,
      parseErrorData: null,
      constMeta: kGetMessageConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetMessageConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_message",
        argNames: [],
      );

  Future<Numbers> repeatNumber({required int num, required int times, dynamic hint}) {
    var arg0 = api2wire_i32(num);
    var arg1 = api2wire_usize(times);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_repeat_number(port_, arg0, arg1),
      parseSuccessData: _wire2api_numbers,
      parseErrorData: null,
      constMeta: kRepeatNumberConstMeta,
      argValues: [num, times],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRepeatNumberConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "repeat_number",
        argNames: ["num", "times"],
      );

  Future<Sequences> repeatSequence({required int seq, required int times, dynamic hint}) {
    var arg0 = api2wire_i32(seq);
    var arg1 = api2wire_usize(times);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_repeat_sequence(port_, arg0, arg1),
      parseSuccessData: _wire2api_sequences,
      parseErrorData: null,
      constMeta: kRepeatSequenceConstMeta,
      argValues: [seq, times],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRepeatSequenceConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "repeat_sequence",
        argNames: ["seq", "times"],
      );

  Future<int?> firstNumber({required Numbers nums, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_numbers(nums);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_first_number(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_i32,
      parseErrorData: null,
      constMeta: kFirstNumberConstMeta,
      argValues: [nums],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFirstNumberConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "first_number",
        argNames: ["nums"],
      );

  Future<int?> firstSequence({required Sequences seqs, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_sequences(seqs);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_first_sequence(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_i32,
      parseErrorData: null,
      constMeta: kFirstSequenceConstMeta,
      argValues: [seqs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFirstSequenceConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "first_sequence",
        argNames: ["seqs"],
      );

  Future<U8Array5> getArray({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_array(port_),
      parseSuccessData: _wire2api_u8_array_5,
      parseErrorData: null,
      constMeta: kGetArrayConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_array",
        argNames: [],
      );

  Future<PointArray2> getComplexArray({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_complex_array(port_),
      parseSuccessData: _wire2api_Point_array_2,
      parseErrorData: null,
      constMeta: kGetComplexArrayConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetComplexArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_complex_array",
        argNames: [],
      );

  Future<int> getUsize({required int u, dynamic hint}) {
    var arg0 = api2wire_usize(u);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_usize(port_, arg0),
      parseSuccessData: _wire2api_usize,
      parseErrorData: null,
      constMeta: kGetUsizeConstMeta,
      argValues: [u],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetUsizeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_usize",
        argNames: ["u"],
      );

  Future<UserId> nextUserId({required UserId userId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_user_id(userId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_next_user_id(port_, arg0),
      parseSuccessData: _wire2api_user_id,
      parseErrorData: null,
      constMeta: kNextUserIdConstMeta,
      argValues: [userId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNextUserIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "next_user_id",
        argNames: ["userId"],
      );

  Stream<Event> registerEventListener({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_register_event_listener(port_),
      parseSuccessData: (d) => _wire2api_event(d),
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRegisterEventListenerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterEventListenerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "register_event_listener",
        argNames: [],
      );

  Future<void> closeEventListener({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_close_event_listener(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kCloseEventListenerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCloseEventListenerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "close_event_listener",
        argNames: [],
      );

  Future<void> createEvent({required String address, required String payload, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    var arg1 = _platform.api2wire_String(payload);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_event(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kCreateEventConstMeta,
      argValues: [address, payload],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_event",
        argNames: ["address", "payload"],
      );

  Stream<Log> handleStreamSinkAt1({required int key, required int max, dynamic hint}) {
    var arg0 = api2wire_u32(key);
    var arg1 = api2wire_u32(max);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_stream_sink_at_1(port_, arg0, arg1),
      parseSuccessData: _wire2api_log,
      parseErrorData: null,
      constMeta: kHandleStreamSinkAt1ConstMeta,
      argValues: [key, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_sink_at_1",
        argNames: ["key", "max"],
      );

  Stream<Log> handleStreamSinkAt2({required int key, required int max, dynamic hint}) {
    var arg0 = api2wire_u32(key);
    var arg1 = api2wire_u32(max);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_stream_sink_at_2(port_, arg0, arg1),
      parseSuccessData: _wire2api_log,
      parseErrorData: null,
      constMeta: kHandleStreamSinkAt2ConstMeta,
      argValues: [key, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt2ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_sink_at_2",
        argNames: ["key", "max"],
      );

  Stream<Log> handleStreamSinkAt3({required int key, required int max, dynamic hint}) {
    var arg0 = api2wire_u32(key);
    var arg1 = api2wire_u32(max);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_stream_sink_at_3(port_, arg0, arg1),
      parseSuccessData: _wire2api_log,
      parseErrorData: null,
      constMeta: kHandleStreamSinkAt3ConstMeta,
      argValues: [key, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt3ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_sink_at_3",
        argNames: ["key", "max"],
      );

  Future<SumWith> getSumStruct({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_sum_struct(port_),
      parseSuccessData: (d) => _wire2api_sum_with(d),
      parseErrorData: null,
      constMeta: kGetSumStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSumStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_sum_struct",
        argNames: [],
      );

  Future<SumWithArray3> getSumArray({required int a, required int b, required int c, dynamic hint}) {
    var arg0 = api2wire_u32(a);
    var arg1 = api2wire_u32(b);
    var arg2 = api2wire_u32(c);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_sum_array(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_SumWith_array_3,
      parseErrorData: null,
      constMeta: kGetSumArrayConstMeta,
      argValues: [a, b, c],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSumArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_sum_array",
        argNames: ["a", "b", "c"],
      );

  Future<Measure?> multiplyByTen({required Measure measure, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_measure(measure);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_multiply_by_ten(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_measure,
      parseErrorData: null,
      constMeta: kMultiplyByTenConstMeta,
      argValues: [measure],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMultiplyByTenConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "multiply_by_ten",
        argNames: ["measure"],
      );

  Future<OldSimpleStruct> callOldModuleSystem({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_call_old_module_system(port_),
      parseSuccessData: _wire2api_old_simple_struct,
      parseErrorData: null,
      constMeta: kCallOldModuleSystemConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCallOldModuleSystemConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "call_old_module_system",
        argNames: [],
      );

  Future<NewSimpleStruct> callNewModuleSystem({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_call_new_module_system(port_),
      parseSuccessData: _wire2api_new_simple_struct,
      parseErrorData: null,
      constMeta: kCallNewModuleSystemConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCallNewModuleSystemConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "call_new_module_system",
        argNames: [],
      );

  Future<BigBuffers> handleBigBuffers({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_big_buffers(port_),
      parseSuccessData: _wire2api_big_buffers,
      parseErrorData: null,
      constMeta: kHandleBigBuffersConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleBigBuffersConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_big_buffers",
        argNames: [],
      );

  Future<DateTime> datetimeUtc({required DateTime d, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_Utc(d);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_datetime_utc(port_, arg0),
      parseSuccessData: _wire2api_Chrono_Utc,
      parseErrorData: null,
      constMeta: kDatetimeUtcConstMeta,
      argValues: [d],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDatetimeUtcConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "datetime_utc",
        argNames: ["d"],
      );

  Future<DateTime> datetimeLocal({required DateTime d, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_Local(d);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_datetime_local(port_, arg0),
      parseSuccessData: _wire2api_Chrono_Local,
      parseErrorData: null,
      constMeta: kDatetimeLocalConstMeta,
      argValues: [d],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDatetimeLocalConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "datetime_local",
        argNames: ["d"],
      );

  Future<DateTime> naivedatetime({required DateTime d, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_Naive(d);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_naivedatetime(port_, arg0),
      parseSuccessData: _wire2api_Chrono_Naive,
      parseErrorData: null,
      constMeta: kNaivedatetimeConstMeta,
      argValues: [d],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNaivedatetimeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "naivedatetime",
        argNames: ["d"],
      );

  Future<DateTime?> optionalEmptyDatetimeUtc({DateTime? d, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_Chrono_Utc(d);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_optional_empty_datetime_utc(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_Chrono_Utc,
      parseErrorData: null,
      constMeta: kOptionalEmptyDatetimeUtcConstMeta,
      argValues: [d],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOptionalEmptyDatetimeUtcConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "optional_empty_datetime_utc",
        argNames: ["d"],
      );

  Future<Duration> duration({required Duration d, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_Duration(d);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_duration(port_, arg0),
      parseSuccessData: _wire2api_Chrono_Duration,
      parseErrorData: null,
      constMeta: kDurationConstMeta,
      argValues: [d],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDurationConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "duration",
        argNames: ["d"],
      );

  Future<List<Duration>> handleTimestamps({required List<DateTime> timestamps, required DateTime epoch, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_NaiveList(timestamps);
    var arg1 = _platform.api2wire_Chrono_Naive(epoch);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_timestamps(port_, arg0, arg1),
      parseSuccessData: _wire2api_Chrono_DurationList,
      parseErrorData: null,
      constMeta: kHandleTimestampsConstMeta,
      argValues: [timestamps, epoch],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleTimestampsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_timestamps",
        argNames: ["timestamps", "epoch"],
      );

  Future<List<DateTime>> handleDurations({required List<Duration> durations, required DateTime since, dynamic hint}) {
    var arg0 = _platform.api2wire_Chrono_DurationList(durations);
    var arg1 = _platform.api2wire_Chrono_Local(since);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_durations(port_, arg0, arg1),
      parseSuccessData: _wire2api_Chrono_LocalList,
      parseErrorData: null,
      constMeta: kHandleDurationsConstMeta,
      argValues: [durations, since],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleDurationsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_durations",
        argNames: ["durations", "since"],
      );

  Future<TestChrono> testChrono({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_chrono(port_),
      parseSuccessData: _wire2api_test_chrono,
      parseErrorData: null,
      constMeta: kTestChronoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestChronoConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_chrono",
        argNames: [],
      );

  Future<TestChrono> testPreciseChrono({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_precise_chrono(port_),
      parseSuccessData: _wire2api_test_chrono,
      parseErrorData: null,
      constMeta: kTestPreciseChronoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestPreciseChronoConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_precise_chrono",
        argNames: [],
      );

  Future<Duration> howLongDoesItTake({required FeatureChrono mine, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_feature_chrono(mine);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_how_long_does_it_take(port_, arg0),
      parseSuccessData: _wire2api_Chrono_Duration,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kHowLongDoesItTakeConstMeta,
      argValues: [mine],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHowLongDoesItTakeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "how_long_does_it_take",
        argNames: ["mine"],
      );

  Future<UuidValue> handleUuid({required UuidValue id, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_uuid(port_, arg0),
      parseSuccessData: _wire2api_Uuid,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kHandleUuidConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleUuidConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_uuid",
        argNames: ["id"],
      );

  Future<List<UuidValue>> handleUuids({required List<UuidValue> ids, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuids(ids);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_uuids(port_, arg0),
      parseSuccessData: _wire2api_Uuids,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kHandleUuidsConstMeta,
      argValues: [ids],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleUuidsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_uuids",
        argNames: ["ids"],
      );

  Future<FeatureUuid> handleNestedUuids({required FeatureUuid ids, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_feature_uuid(ids);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_nested_uuids(port_, arg0),
      parseSuccessData: _wire2api_feature_uuid,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kHandleNestedUuidsConstMeta,
      argValues: [ids],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleNestedUuidsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_nested_uuids",
        argNames: ["ids"],
      );

  Future<MessageId> newMsgid({required U8Array32 id, dynamic hint}) {
    var arg0 = _platform.api2wire_u8_array_32(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_msgid(port_, arg0),
      parseSuccessData: _wire2api_message_id,
      parseErrorData: null,
      constMeta: kNewMsgidConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewMsgidConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new_msgid",
        argNames: ["id"],
      );

  Future<U8Array32> useMsgid({required MessageId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_message_id(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_use_msgid(port_, arg0),
      parseSuccessData: _wire2api_u8_array_32,
      parseErrorData: null,
      constMeta: kUseMsgidConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUseMsgidConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "use_msgid",
        argNames: ["id"],
      );

  Future<Blob> boxedBlob({required U8Array1600 blob, dynamic hint}) {
    var arg0 = _platform.api2wire_box_u8_array_1600(blob);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_boxed_blob(port_, arg0),
      parseSuccessData: _wire2api_blob,
      parseErrorData: null,
      constMeta: kBoxedBlobConstMeta,
      argValues: [blob],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBoxedBlobConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "boxed_blob",
        argNames: ["blob"],
      );

  Future<U8Array1600> useBoxedBlob({required Blob blob, dynamic hint}) {
    var arg0 = _platform.api2wire_box_blob(blob);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_use_boxed_blob(port_, arg0),
      parseSuccessData: _wire2api_u8_array_1600,
      parseErrorData: null,
      constMeta: kUseBoxedBlobConstMeta,
      argValues: [blob],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUseBoxedBlobConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "use_boxed_blob",
        argNames: ["blob"],
      );

  Future<FeedId> returnBoxedFeedId({required U8Array8 id, dynamic hint}) {
    var arg0 = _platform.api2wire_u8_array_8(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_boxed_feed_id(port_, arg0),
      parseSuccessData: _wire2api_box_feed_id,
      parseErrorData: null,
      constMeta: kReturnBoxedFeedIdConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnBoxedFeedIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_boxed_feed_id",
        argNames: ["id"],
      );

  Future<U8Array8> returnBoxedRawFeedId({required FeedId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_feed_id(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_boxed_raw_feed_id(port_, arg0),
      parseSuccessData: _wire2api_box_u8_array_8,
      parseErrorData: null,
      constMeta: kReturnBoxedRawFeedIdConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnBoxedRawFeedIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_boxed_raw_feed_id",
        argNames: ["id"],
      );

  Future<TestId> testId({required TestId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_test_id(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_id(port_, arg0),
      parseSuccessData: _wire2api_test_id,
      parseErrorData: null,
      constMeta: kTestIdConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_id",
        argNames: ["id"],
      );

  Future<double> lastNumber({required F64Array16 array, dynamic hint}) {
    var arg0 = _platform.api2wire_f64_array_16(array);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_last_number(port_, arg0),
      parseSuccessData: _wire2api_f64,
      parseErrorData: null,
      constMeta: kLastNumberConstMeta,
      argValues: [array],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLastNumberConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "last_number",
        argNames: ["array"],
      );

  Future<TestIdArray2> nestedId({required TestIdArray4 id, dynamic hint}) {
    var arg0 = _platform.api2wire_TestId_array_4(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_nested_id(port_, arg0),
      parseSuccessData: _wire2api_TestId_array_2,
      parseErrorData: null,
      constMeta: kNestedIdConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNestedIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "nested_id",
        argNames: ["id"],
      );

  String syncAcceptDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_accept_dart_opaque(arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kSyncAcceptDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncAcceptDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_accept_dart_opaque",
        argNames: ["opaque"],
      );

  Future<String> asyncAcceptDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_async_accept_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kAsyncAcceptDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsyncAcceptDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "async_accept_dart_opaque",
        argNames: ["opaque"],
      );

  Future<Object> loopBack({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back(port_, arg0),
      parseSuccessData: _wire2api_DartOpaque,
      parseErrorData: null,
      constMeta: kLoopBackConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back",
        argNames: ["opaque"],
      );

  Future<Object?> loopBackOption({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_option(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_DartOpaque,
      parseErrorData: null,
      constMeta: kLoopBackOptionConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackOptionConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_option",
        argNames: ["opaque"],
      );

  Future<ObjectArray1> loopBackArray({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_array(port_, arg0),
      parseSuccessData: _wire2api_Object_array_1,
      parseErrorData: null,
      constMeta: kLoopBackArrayConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_array",
        argNames: ["opaque"],
      );

  Future<List<Object>> loopBackVec({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_vec(port_, arg0),
      parseSuccessData: _wire2api_list_DartOpaque,
      parseErrorData: null,
      constMeta: kLoopBackVecConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackVecConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_vec",
        argNames: ["opaque"],
      );

  Future<void> loopBackOptionGet({Object? opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_option_get(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kLoopBackOptionGetConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackOptionGetConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_option_get",
        argNames: ["opaque"],
      );

  Future<void> loopBackArrayGet({required ObjectArray1 opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_Object_array_1(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_array_get(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kLoopBackArrayGetConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackArrayGetConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_array_get",
        argNames: ["opaque"],
      );

  Future<void> loopBackVecGet({required List<Object> opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_list_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_loop_back_vec_get(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kLoopBackVecGetConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoopBackVecGetConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "loop_back_vec_get",
        argNames: ["opaque"],
      );

  String unwrapDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_unwrap_dart_opaque(arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kUnwrapDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnwrapDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "unwrap_dart_opaque",
        argNames: ["opaque"],
      );

  Future<void> panicUnwrapDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_panic_unwrap_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kPanicUnwrapDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPanicUnwrapDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "panic_unwrap_dart_opaque",
        argNames: ["opaque"],
      );

  Future<HideData> createOpaque({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_opaque(port_),
      parseSuccessData: _wire2api_HideData,
      parseErrorData: null,
      constMeta: kCreateOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_opaque",
        argNames: [],
      );

  Future<HideData?> createOptionOpaque({HideData? opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_HideData(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_option_opaque(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_HideData,
      parseErrorData: null,
      constMeta: kCreateOptionOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateOptionOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_option_opaque",
        argNames: ["opaque"],
      );

  HideData syncCreateOpaque({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_create_opaque(),
      parseSuccessData: _wire2api_HideData,
      parseErrorData: null,
      constMeta: kSyncCreateOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncCreateOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_create_opaque",
        argNames: [],
      );

  Future<EnumOpaqueArray5> createArrayOpaqueEnum({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_array_opaque_enum(port_),
      parseSuccessData: _wire2api_EnumOpaque_array_5,
      parseErrorData: null,
      constMeta: kCreateArrayOpaqueEnumConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateArrayOpaqueEnumConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_array_opaque_enum",
        argNames: [],
      );

  Future<String> runEnumOpaque({required EnumOpaque opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_enum_opaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_run_enum_opaque(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kRunEnumOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunEnumOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "run_enum_opaque",
        argNames: ["opaque"],
      );

  Future<String> runOpaque({required HideData opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_HideData(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_run_opaque(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kRunOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "run_opaque",
        argNames: ["opaque"],
      );

  Future<String> runOpaqueWithDelay({required HideData opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_HideData(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_run_opaque_with_delay(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kRunOpaqueWithDelayConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunOpaqueWithDelayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "run_opaque_with_delay",
        argNames: ["opaque"],
      );

  Future<HideDataArray2> opaqueArray({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_opaque_array(port_),
      parseSuccessData: _wire2api_HideData_array_2,
      parseErrorData: null,
      constMeta: kOpaqueArrayConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpaqueArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "opaque_array",
        argNames: [],
      );

  NonCloneData syncCreateNonClone({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_create_non_clone(),
      parseSuccessData: _wire2api_NonCloneData,
      parseErrorData: null,
      constMeta: kSyncCreateNonCloneConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncCreateNonCloneConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_create_non_clone",
        argNames: [],
      );

  Future<String> runNonClone({required NonCloneData clone, dynamic hint}) {
    var arg0 = _platform.api2wire_NonCloneData(clone);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_run_non_clone(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kRunNonCloneConstMeta,
      argValues: [clone],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunNonCloneConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "run_non_clone",
        argNames: ["clone"],
      );

  Future<NonSendHideData> createSyncOpaque({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_sync_opaque(port_),
      parseSuccessData: _wire2api_NonSendHideData,
      parseErrorData: null,
      constMeta: kCreateSyncOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateSyncOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_sync_opaque",
        argNames: [],
      );

  NonSendHideData syncCreateSyncOpaque({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_create_sync_opaque(),
      parseSuccessData: _wire2api_NonSendHideData,
      parseErrorData: null,
      constMeta: kSyncCreateSyncOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncCreateSyncOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_create_sync_opaque",
        argNames: [],
      );

  String syncRunOpaque({required NonSendHideData opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_NonSendHideData(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_run_opaque(arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kSyncRunOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncRunOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_run_opaque",
        argNames: ["opaque"],
      );

  Future<void> opaqueArrayRun({required HideDataArray2 data, dynamic hint}) {
    var arg0 = _platform.api2wire_HideData_array_2(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_opaque_array_run(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kOpaqueArrayRunConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpaqueArrayRunConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "opaque_array_run",
        argNames: ["data"],
      );

  Future<List<HideData>> opaqueVec({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_opaque_vec(port_),
      parseSuccessData: _wire2api_list_HideData,
      parseErrorData: null,
      constMeta: kOpaqueVecConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpaqueVecConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "opaque_vec",
        argNames: [],
      );

  Future<void> opaqueVecRun({required List<HideData> data, dynamic hint}) {
    var arg0 = _platform.api2wire_list_HideData(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_opaque_vec_run(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kOpaqueVecRunConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpaqueVecRunConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "opaque_vec_run",
        argNames: ["data"],
      );

  Future<OpaqueNested> createNestedOpaque({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_nested_opaque(port_),
      parseSuccessData: _wire2api_opaque_nested,
      parseErrorData: null,
      constMeta: kCreateNestedOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateNestedOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_nested_opaque",
        argNames: [],
      );

  Object syncLoopback({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_loopback(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      parseErrorData: null,
      constMeta: kSyncLoopbackConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncLoopbackConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_loopback",
        argNames: ["opaque"],
      );

  Object? syncOptionLoopback({Object? opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_option_loopback(arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_DartOpaque,
      parseErrorData: null,
      constMeta: kSyncOptionLoopbackConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncOptionLoopbackConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_option_loopback",
        argNames: ["opaque"],
      );

  String? syncOption({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_option(),
      parseSuccessData: _wire2api_opt_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSyncOptionConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncOptionConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_option",
        argNames: [],
      );

  String? syncOptionNull({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_option_null(),
      parseSuccessData: _wire2api_opt_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSyncOptionNullConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncOptionNullConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_option_null",
        argNames: [],
      );

  HideData? syncOptionRustOpaque({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_option_rust_opaque(),
      parseSuccessData: _wire2api_opt_box_autoadd_HideData,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSyncOptionRustOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncOptionRustOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_option_rust_opaque",
        argNames: [],
      );

  Object? syncOptionDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_option_dart_opaque(arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_DartOpaque,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSyncOptionDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncOptionDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_option_dart_opaque",
        argNames: ["opaque"],
      );

  void syncVoid({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_void(),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSyncVoidConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncVoidConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_void",
        argNames: [],
      );

  Future<void> runNestedOpaque({required OpaqueNested opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_opaque_nested(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_run_nested_opaque(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kRunNestedOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunNestedOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "run_nested_opaque",
        argNames: ["opaque"],
      );

  Future<DartOpaqueNested> createNestedDartOpaque({required Object opaque1, required Object opaque2, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque1);
    var arg1 = _platform.api2wire_DartOpaque(opaque2);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_nested_dart_opaque(port_, arg0, arg1),
      parseSuccessData: _wire2api_dart_opaque_nested,
      parseErrorData: null,
      constMeta: kCreateNestedDartOpaqueConstMeta,
      argValues: [opaque1, opaque2],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateNestedDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_nested_dart_opaque",
        argNames: ["opaque1", "opaque2"],
      );

  Future<void> getNestedDartOpaque({required DartOpaqueNested opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_dart_opaque_nested(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_nested_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kGetNestedDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetNestedDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_nested_dart_opaque",
        argNames: ["opaque"],
      );

  Future<EnumDartOpaque> createEnumDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_enum_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_enum_dart_opaque,
      parseErrorData: null,
      constMeta: kCreateEnumDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateEnumDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_enum_dart_opaque",
        argNames: ["opaque"],
      );

  Future<void> getEnumDartOpaque({required EnumDartOpaque opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_enum_dart_opaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_enum_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kGetEnumDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetEnumDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_enum_dart_opaque",
        argNames: ["opaque"],
      );

  Future<void> setStaticDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_static_dart_opaque(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetStaticDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetStaticDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "set_static_dart_opaque",
        argNames: ["opaque"],
      );

  Future<void> dropStaticDartOpaque({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_drop_static_dart_opaque(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kDropStaticDartOpaqueConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDropStaticDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "drop_static_dart_opaque",
        argNames: [],
      );

  Future<String> unwrapRustOpaque({required HideData opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_HideData(opaque);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_unwrap_rust_opaque(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kUnwrapRustOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnwrapRustOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "unwrap_rust_opaque",
        argNames: ["opaque"],
      );

  Object returnNonDroppableDartOpaque({required Object opaque, dynamic hint}) {
    var arg0 = _platform.api2wire_DartOpaque(opaque);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_return_non_droppable_dart_opaque(arg0),
      parseSuccessData: _wire2api_DartOpaque,
      parseErrorData: null,
      constMeta: kReturnNonDroppableDartOpaqueConstMeta,
      argValues: [opaque],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnNonDroppableDartOpaqueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_non_droppable_dart_opaque",
        argNames: ["opaque"],
      );

  Future<FrbOpaqueReturn> frbGeneratorTest({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_frb_generator_test(port_),
      parseSuccessData: _wire2api_FrbOpaqueReturn,
      parseErrorData: null,
      constMeta: kFrbGeneratorTestConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFrbGeneratorTestConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "frb_generator_test",
        argNames: [],
      );

  FrbOpaqueSyncReturn frbSyncGeneratorTest({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_frb_sync_generator_test(),
      parseSuccessData: _wire2api_FrbOpaqueSyncReturn,
      parseErrorData: null,
      constMeta: kFrbSyncGeneratorTestConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFrbSyncGeneratorTestConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "frb_sync_generator_test",
        argNames: [],
      );

  Future<int> handleTypeAliasId({required int input, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_type_alias_id(port_, arg0),
      parseSuccessData: _wire2api_u64,
      parseErrorData: null,
      constMeta: kHandleTypeAliasIdConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleTypeAliasIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_type_alias_id",
        argNames: ["input"],
      );

  Future<int> handleTypeNestAliasId({required int input, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_type_nest_alias_id(port_, arg0),
      parseSuccessData: _wire2api_u64,
      parseErrorData: null,
      constMeta: kHandleTypeNestAliasIdConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleTypeNestAliasIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_type_nest_alias_id",
        argNames: ["input"],
      );

  Future<TestModel> handleTypeAliasModel({required int input, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_type_alias_model(port_, arg0),
      parseSuccessData: _wire2api_test_model,
      parseErrorData: null,
      constMeta: kHandleTypeAliasModelConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleTypeAliasModelConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_type_alias_model",
        argNames: ["input"],
      );

  Future<Empty> emptyStruct({required Empty empty, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_empty(empty);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_empty_struct(port_, arg0),
      parseSuccessData: _wire2api_empty,
      parseErrorData: null,
      constMeta: kEmptyStructConstMeta,
      argValues: [empty],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEmptyStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "empty_struct",
        argNames: ["empty"],
      );

  Future<dynamic> returnDartDynamic({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_dart_dynamic(port_),
      parseSuccessData: _wire2api_dartabi,
      parseErrorData: null,
      constMeta: kReturnDartDynamicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnDartDynamicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_dart_dynamic",
        argNames: [],
      );

  Future<RawStringItemStruct> testRawStringItemStruct({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_raw_string_item_struct(port_),
      parseSuccessData: _wire2api_raw_string_item_struct,
      parseErrorData: null,
      constMeta: kTestRawStringItemStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestRawStringItemStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_raw_string_item_struct",
        argNames: [],
      );

  Future<MoreThanJustOneRawStringStruct> testMoreThanJustOneRawStringStruct({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_more_than_just_one_raw_string_struct(port_),
      parseSuccessData: _wire2api_more_than_just_one_raw_string_struct,
      parseErrorData: null,
      constMeta: kTestMoreThanJustOneRawStringStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestMoreThanJustOneRawStringStructConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_more_than_just_one_raw_string_struct",
        argNames: [],
      );

  Future<RawStringMirrored> testRawStringMirrored({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_raw_string_mirrored(port_),
      parseSuccessData: _wire2api_raw_string_mirrored,
      parseErrorData: null,
      constMeta: kTestRawStringMirroredConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestRawStringMirroredConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_raw_string_mirrored",
        argNames: [],
      );

  Future<NestedRawStringMirrored> testNestedRawStringMirrored({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_nested_raw_string_mirrored(port_),
      parseSuccessData: _wire2api_nested_raw_string_mirrored,
      parseErrorData: null,
      constMeta: kTestNestedRawStringMirroredConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestNestedRawStringMirroredConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_nested_raw_string_mirrored",
        argNames: [],
      );

  Future<RawStringEnumMirrored> testRawStringEnumMirrored({required bool nested, dynamic hint}) {
    var arg0 = nested;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_raw_string_enum_mirrored(port_, arg0),
      parseSuccessData: _wire2api_raw_string_enum_mirrored,
      parseErrorData: null,
      constMeta: kTestRawStringEnumMirroredConstMeta,
      argValues: [nested],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestRawStringEnumMirroredConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_raw_string_enum_mirrored",
        argNames: ["nested"],
      );

  Future<ListOfNestedRawStringMirrored> testListOfRawNestedStringMirrored({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_list_of_raw_nested_string_mirrored(port_),
      parseSuccessData: _wire2api_list_of_nested_raw_string_mirrored,
      parseErrorData: null,
      constMeta: kTestListOfRawNestedStringMirroredConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestListOfRawNestedStringMirroredConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_list_of_raw_nested_string_mirrored",
        argNames: [],
      );

  Future<List<RawStringMirrored>> testFallibleOfRawStringMirrored({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_fallible_of_raw_string_mirrored(port_),
      parseSuccessData: _wire2api_list_raw_string_mirrored,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kTestFallibleOfRawStringMirroredConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestFallibleOfRawStringMirroredConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_fallible_of_raw_string_mirrored",
        argNames: [],
      );

  Future<List<Weekdays>> listOfPrimitiveEnums({required List<Weekdays> weekdays, dynamic hint}) {
    var arg0 = _platform.api2wire_list_weekdays(weekdays);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_of_primitive_enums(port_, arg0),
      parseSuccessData: _wire2api_list_weekdays,
      parseErrorData: null,
      constMeta: kListOfPrimitiveEnumsConstMeta,
      argValues: [weekdays],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListOfPrimitiveEnumsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_of_primitive_enums",
        argNames: ["weekdays"],
      );

  Future<Abc> testAbcEnum({required Abc abc, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_abc(abc);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_abc_enum(port_, arg0),
      parseSuccessData: _wire2api_abc,
      parseErrorData: null,
      constMeta: kTestAbcEnumConstMeta,
      argValues: [abc],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestAbcEnumConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_abc_enum",
        argNames: ["abc"],
      );

  Future<ContainsMirroredSubStruct> testContainsMirroredSubStruct({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_contains_mirrored_sub_struct(port_),
      parseSuccessData: _wire2api_contains_mirrored_sub_struct,
      parseErrorData: null,
      constMeta: kTestContainsMirroredSubStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestContainsMirroredSubStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_contains_mirrored_sub_struct",
        argNames: [],
      );

  Future<StructWithEnum> testStructWithEnum({required StructWithEnum se, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_struct_with_enum(se);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_struct_with_enum(port_, arg0),
      parseSuccessData: _wire2api_struct_with_enum,
      parseErrorData: null,
      constMeta: kTestStructWithEnumConstMeta,
      argValues: [se],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestStructWithEnumConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_struct_with_enum",
        argNames: ["se"],
      );

  Future<(String, int)> testTuple({(String, int)? value, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd___record__String_i32(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_tuple(port_, arg0),
      parseSuccessData: _wire2api___record__String_i32,
      parseErrorData: null,
      constMeta: kTestTupleConstMeta,
      argValues: [value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestTupleConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_tuple",
        argNames: ["value"],
      );

  Future<void> testTuple2({required List<(String, int)> value, dynamic hint}) {
    var arg0 = _platform.api2wire_list___record__String_i32(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_tuple_2(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kTestTuple2ConstMeta,
      argValues: [value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestTuple2ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_tuple_2",
        argNames: ["value"],
      );

  ApplicationSettings syncReturnMirror({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_return_mirror(),
      parseSuccessData: _wire2api_application_settings,
      parseErrorData: null,
      constMeta: kSyncReturnMirrorConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncReturnMirrorConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_return_mirror",
        argNames: [],
      );

  Future<MacroStruct> macroStruct({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_macro_struct(port_),
      parseSuccessData: _wire2api_macro_struct,
      parseErrorData: null,
      constMeta: kMacroStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMacroStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "macro_struct",
        argNames: [],
      );

  Future<int> returnErrCustomError({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_err_custom_error(port_),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_custom_error,
      constMeta: kReturnErrCustomErrorConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnErrCustomErrorConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_err_custom_error",
        argNames: [],
      );

  Future<int> returnOkCustomError({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_ok_custom_error(port_),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_custom_error,
      constMeta: kReturnOkCustomErrorConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnOkCustomErrorConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_ok_custom_error",
        argNames: [],
      );

  Future<int> returnErrorVariant({required int variant, dynamic hint}) {
    var arg0 = api2wire_u32(variant);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_error_variant(port_, arg0),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_custom_error,
      constMeta: kReturnErrorVariantConstMeta,
      argValues: [variant],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnErrorVariantConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_error_variant",
        argNames: ["variant"],
      );

  Future<void> returnCustomNestedError1({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_custom_nested_error_1(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_custom_nested_error_1,
      constMeta: kReturnCustomNestedError1ConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnCustomNestedError1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_custom_nested_error_1",
        argNames: [],
      );

  Future<void> returnCustomNestedError1Variant1({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_custom_nested_error_1_variant1(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_custom_nested_error_1,
      constMeta: kReturnCustomNestedError1Variant1ConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnCustomNestedError1Variant1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_custom_nested_error_1_variant1",
        argNames: [],
      );

  Future<void> returnCustomNestedError2({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_custom_nested_error_2(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_custom_nested_error_2,
      constMeta: kReturnCustomNestedError2ConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnCustomNestedError2ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_custom_nested_error_2",
        argNames: [],
      );

  Future<void> returnCustomStructError({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_custom_struct_error(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_custom_struct_error,
      constMeta: kReturnCustomStructErrorConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnCustomStructErrorConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_custom_struct_error",
        argNames: [],
      );

  void syncReturnCustomStructError({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_sync_return_custom_struct_error(),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_custom_struct_error,
      constMeta: kSyncReturnCustomStructErrorConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncReturnCustomStructErrorConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_return_custom_struct_error",
        argNames: [],
      );

  Future<int> returnCustomStructOk({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_return_custom_struct_ok(port_),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_custom_struct_error,
      constMeta: kReturnCustomStructOkConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReturnCustomStructOkConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_custom_struct_ok",
        argNames: [],
      );

  Future<void> throwAnyhow({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_throw_anyhow(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kThrowAnyhowConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kThrowAnyhowConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "throw_anyhow",
        argNames: [],
      );

  Future<void> panicWithCustomResult({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_panic_with_custom_result(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_custom_error,
      constMeta: kPanicWithCustomResultConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPanicWithCustomResultConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "panic_with_custom_result",
        argNames: [],
      );

  Stream<String> streamSinkThrowAnyhow({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stream_sink_throw_anyhow(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kStreamSinkThrowAnyhowConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStreamSinkThrowAnyhowConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "stream_sink_throw_anyhow",
        argNames: [],
      );

  Future<String> asStringMethodEvent({required Event that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_event(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_as_string__method__Event(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kAsStringMethodEventConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsStringMethodEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "as_string__method__Event",
        argNames: ["that"],
      );

  Future<int> sumMethodSumWith({required SumWith that, required int y, required int z, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_sum_with(that);
    var arg1 = api2wire_u32(y);
    var arg2 = api2wire_u32(z);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sum__method__SumWith(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_u32,
      parseErrorData: null,
      constMeta: kSumMethodSumWithConstMeta,
      argValues: [that, y, z],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSumMethodSumWithConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sum__method__SumWith",
        argNames: ["that", "y", "z"],
      );

  Future<ConcatenateWith> newStaticMethodConcatenateWith({required String a, dynamic hint}) {
    var arg0 = _platform.api2wire_String(a);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new__static_method__ConcatenateWith(port_, arg0),
      parseSuccessData: (d) => _wire2api_concatenate_with(d),
      parseErrorData: null,
      constMeta: kNewStaticMethodConcatenateWithConstMeta,
      argValues: [a],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodConcatenateWithConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__ConcatenateWith",
        argNames: ["a"],
      );

  Future<String> concatenateMethodConcatenateWith({required ConcatenateWith that, required String b, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_concatenate_with(that);
    var arg1 = _platform.api2wire_String(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_concatenate__method__ConcatenateWith(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kConcatenateMethodConcatenateWithConstMeta,
      argValues: [that, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConcatenateMethodConcatenateWithConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "concatenate__method__ConcatenateWith",
        argNames: ["that", "b"],
      );

  Future<String> concatenateStaticStaticMethodConcatenateWith({required String a, required String b, dynamic hint}) {
    var arg0 = _platform.api2wire_String(a);
    var arg1 = _platform.api2wire_String(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_concatenate_static__static_method__ConcatenateWith(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kConcatenateStaticStaticMethodConcatenateWithConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConcatenateStaticStaticMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "concatenate_static__static_method__ConcatenateWith",
        argNames: ["a", "b"],
      );

  Stream<Log2> handleSomeStreamSinkMethodConcatenateWith(
      {required ConcatenateWith that, required int key, required int max, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_concatenate_with(that);
    var arg1 = api2wire_u32(key);
    var arg2 = api2wire_u32(max);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_handle_some_stream_sink__method__ConcatenateWith(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_log_2,
      parseErrorData: null,
      constMeta: kHandleSomeStreamSinkMethodConcatenateWithConstMeta,
      argValues: [that, key, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleSomeStreamSinkMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_stream_sink__method__ConcatenateWith",
        argNames: ["that", "key", "max"],
      );

  Stream<int> handleSomeStreamSinkAt1MethodConcatenateWith({required ConcatenateWith that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_concatenate_with(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_some_stream_sink_at_1__method__ConcatenateWith(port_, arg0),
      parseSuccessData: _wire2api_u32,
      parseErrorData: null,
      constMeta: kHandleSomeStreamSinkAt1MethodConcatenateWithConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleSomeStreamSinkAt1MethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_stream_sink_at_1__method__ConcatenateWith",
        argNames: ["that"],
      );

  Stream<Log2> handleSomeStaticStreamSinkStaticMethodConcatenateWith(
      {required int key, required int max, dynamic hint}) {
    var arg0 = api2wire_u32(key);
    var arg1 = api2wire_u32(max);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_handle_some_static_stream_sink__static_method__ConcatenateWith(port_, arg0, arg1),
      parseSuccessData: _wire2api_log_2,
      parseErrorData: null,
      constMeta: kHandleSomeStaticStreamSinkStaticMethodConcatenateWithConstMeta,
      argValues: [key, max],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleSomeStaticStreamSinkStaticMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_static_stream_sink__static_method__ConcatenateWith",
        argNames: ["key", "max"],
      );

  Stream<int> handleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWith({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(port_),
      parseSuccessData: _wire2api_u32,
      parseErrorData: null,
      constMeta: kHandleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWithConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith",
        argNames: [],
      );

  Future<SomeStruct> newStaticMethodSomeStruct({required int value, dynamic hint}) {
    var arg0 = api2wire_u32(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new__static_method__SomeStruct(port_, arg0),
      parseSuccessData: (d) => _wire2api_some_struct(d),
      parseErrorData: null,
      constMeta: kNewStaticMethodSomeStructConstMeta,
      argValues: [value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodSomeStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__SomeStruct",
        argNames: ["value"],
      );

  Future<int> staticReturnErrCustomErrorStaticMethodSomeStruct({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_static_return_err_custom_error__static_method__SomeStruct(port_),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_custom_error,
      constMeta: kStaticReturnErrCustomErrorStaticMethodSomeStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStaticReturnErrCustomErrorStaticMethodSomeStructConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "static_return_err_custom_error__static_method__SomeStruct",
        argNames: [],
      );

  Future<int> staticReturnOkCustomErrorStaticMethodSomeStruct({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_static_return_ok_custom_error__static_method__SomeStruct(port_),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_custom_error,
      constMeta: kStaticReturnOkCustomErrorStaticMethodSomeStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStaticReturnOkCustomErrorStaticMethodSomeStructConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "static_return_ok_custom_error__static_method__SomeStruct",
        argNames: [],
      );

  Future<int> nonStaticReturnErrCustomErrorMethodSomeStruct({required SomeStruct that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_some_struct(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_non_static_return_err_custom_error__method__SomeStruct(port_, arg0),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_custom_error,
      constMeta: kNonStaticReturnErrCustomErrorMethodSomeStructConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNonStaticReturnErrCustomErrorMethodSomeStructConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "non_static_return_err_custom_error__method__SomeStruct",
        argNames: ["that"],
      );

  Future<int> nonStaticReturnOkCustomErrorMethodSomeStruct({required SomeStruct that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_some_struct(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_non_static_return_ok_custom_error__method__SomeStruct(port_, arg0),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_custom_error,
      constMeta: kNonStaticReturnOkCustomErrorMethodSomeStructConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNonStaticReturnOkCustomErrorMethodSomeStructConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "non_static_return_ok_custom_error__method__SomeStruct",
        argNames: ["that"],
      );

  Future<CustomStruct> newStaticMethodCustomStruct({required String message, dynamic hint}) {
    var arg0 = _platform.api2wire_String(message);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new__static_method__CustomStruct(port_, arg0),
      parseSuccessData: (d) => _wire2api_custom_struct(d),
      parseErrorData: null,
      constMeta: kNewStaticMethodCustomStructConstMeta,
      argValues: [message],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodCustomStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__CustomStruct",
        argNames: ["message"],
      );

  Future<void> staticReturnCustomStructErrorStaticMethodCustomStruct({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_static_return_custom_struct_error__static_method__CustomStruct(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_custom_struct_error,
      constMeta: kStaticReturnCustomStructErrorStaticMethodCustomStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStaticReturnCustomStructErrorStaticMethodCustomStructConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "static_return_custom_struct_error__static_method__CustomStruct",
        argNames: [],
      );

  Future<int> staticReturnCustomStructOkStaticMethodCustomStruct({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_static_return_custom_struct_ok__static_method__CustomStruct(port_),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_custom_struct_error,
      constMeta: kStaticReturnCustomStructOkStaticMethodCustomStructConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStaticReturnCustomStructOkStaticMethodCustomStructConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "static_return_custom_struct_ok__static_method__CustomStruct",
        argNames: [],
      );

  Future<void> nonstaticReturnCustomStructErrorMethodCustomStruct({required CustomStruct that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_custom_struct(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_nonstatic_return_custom_struct_error__method__CustomStruct(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_custom_struct_error,
      constMeta: kNonstaticReturnCustomStructErrorMethodCustomStructConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNonstaticReturnCustomStructErrorMethodCustomStructConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nonstatic_return_custom_struct_error__method__CustomStruct",
        argNames: ["that"],
      );

  Future<int> nonstaticReturnCustomStructOkMethodCustomStruct({required CustomStruct that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_custom_struct(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_nonstatic_return_custom_struct_ok__method__CustomStruct(port_, arg0),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_custom_struct_error,
      constMeta: kNonstaticReturnCustomStructOkMethodCustomStructConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNonstaticReturnCustomStructOkMethodCustomStructConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nonstatic_return_custom_struct_ok__method__CustomStruct",
        argNames: ["that"],
      );

  DropFnType get dropOpaqueBoxDartDebug => _platform.inner.drop_opaque_BoxDartDebug;
  ShareFnType get shareOpaqueBoxDartDebug => _platform.inner.share_opaque_BoxDartDebug;
  OpaqueTypeFinalizer get BoxDartDebugFinalizer => _platform.BoxDartDebugFinalizer;

  DropFnType get dropOpaqueFrbOpaqueReturn => _platform.inner.drop_opaque_FrbOpaqueReturn;
  ShareFnType get shareOpaqueFrbOpaqueReturn => _platform.inner.share_opaque_FrbOpaqueReturn;
  OpaqueTypeFinalizer get FrbOpaqueReturnFinalizer => _platform.FrbOpaqueReturnFinalizer;

  DropFnType get dropOpaqueFrbOpaqueSyncReturn => _platform.inner.drop_opaque_FrbOpaqueSyncReturn;
  ShareFnType get shareOpaqueFrbOpaqueSyncReturn => _platform.inner.share_opaque_FrbOpaqueSyncReturn;
  OpaqueTypeFinalizer get FrbOpaqueSyncReturnFinalizer => _platform.FrbOpaqueSyncReturnFinalizer;

  DropFnType get dropOpaqueHideData => _platform.inner.drop_opaque_HideData;
  ShareFnType get shareOpaqueHideData => _platform.inner.share_opaque_HideData;
  OpaqueTypeFinalizer get HideDataFinalizer => _platform.HideDataFinalizer;

  DropFnType get dropOpaqueI32 => _platform.inner.drop_opaque_I32;
  ShareFnType get shareOpaqueI32 => _platform.inner.share_opaque_I32;
  OpaqueTypeFinalizer get I32Finalizer => _platform.I32Finalizer;

  DropFnType get dropOpaqueMutexHideData => _platform.inner.drop_opaque_MutexHideData;
  ShareFnType get shareOpaqueMutexHideData => _platform.inner.share_opaque_MutexHideData;
  OpaqueTypeFinalizer get MutexHideDataFinalizer => _platform.MutexHideDataFinalizer;

  DropFnType get dropOpaqueNonCloneData => _platform.inner.drop_opaque_NonCloneData;
  ShareFnType get shareOpaqueNonCloneData => _platform.inner.share_opaque_NonCloneData;
  OpaqueTypeFinalizer get NonCloneDataFinalizer => _platform.NonCloneDataFinalizer;

  DropFnType get dropOpaqueNonSendHideData => _platform.inner.drop_opaque_NonSendHideData;
  ShareFnType get shareOpaqueNonSendHideData => _platform.inner.share_opaque_NonSendHideData;
  OpaqueTypeFinalizer get NonSendHideDataFinalizer => _platform.NonSendHideDataFinalizer;

  DropFnType get dropOpaqueRwLockHideData => _platform.inner.drop_opaque_RwLockHideData;
  ShareFnType get shareOpaqueRwLockHideData => _platform.inner.share_opaque_RwLockHideData;
  OpaqueTypeFinalizer get RwLockHideDataFinalizer => _platform.RwLockHideDataFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  BoxDartDebug _wire2api_BoxDartDebug(dynamic raw) {
    return BoxDartDebug.fromRaw(raw[0], raw[1], this);
  }

  Duration _wire2api_Chrono_Duration(dynamic raw) {
    return wire2apiDuration(_wire2api_i64(raw));
  }

  List<Duration> _wire2api_Chrono_DurationList(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_Chrono_Duration).toList();
  }

  DateTime _wire2api_Chrono_Local(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: false);
  }

  List<DateTime> _wire2api_Chrono_LocalList(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_Chrono_Local).toList();
  }

  DateTime _wire2api_Chrono_Naive(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: true);
  }

  DateTime _wire2api_Chrono_Utc(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: true);
  }

  Object _wire2api_DartOpaque(dynamic raw) {
    return _platform.inner.get_dart_object(raw);
  }

  EnumOpaqueArray5 _wire2api_EnumOpaque_array_5(dynamic raw) {
    return EnumOpaqueArray5((raw as List<dynamic>).map(_wire2api_enum_opaque).toList());
  }

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  FrbOpaqueReturn _wire2api_FrbOpaqueReturn(dynamic raw) {
    return FrbOpaqueReturn.fromRaw(raw[0], raw[1], this);
  }

  FrbOpaqueSyncReturn _wire2api_FrbOpaqueSyncReturn(dynamic raw) {
    return FrbOpaqueSyncReturn.fromRaw(raw[0], raw[1], this);
  }

  HideData _wire2api_HideData(dynamic raw) {
    return HideData.fromRaw(raw[0], raw[1], this);
  }

  HideDataArray2 _wire2api_HideData_array_2(dynamic raw) {
    return HideDataArray2((raw as List<dynamic>).map(_wire2api_HideData).toList());
  }

  I32 _wire2api_I32(dynamic raw) {
    return I32.fromRaw(raw[0], raw[1], this);
  }

  MutexHideData _wire2api_MutexHideData(dynamic raw) {
    return MutexHideData.fromRaw(raw[0], raw[1], this);
  }

  NonCloneData _wire2api_NonCloneData(dynamic raw) {
    return NonCloneData.fromRaw(raw[0], raw[1], this);
  }

  NonSendHideData _wire2api_NonSendHideData(dynamic raw) {
    return NonSendHideData.fromRaw(raw[0], raw[1], this);
  }

  ObjectArray1 _wire2api_Object_array_1(dynamic raw) {
    return ObjectArray1((raw as List<dynamic>).map(_wire2api_DartOpaque).toList());
  }

  PointArray2 _wire2api_Point_array_2(dynamic raw) {
    return PointArray2((raw as List<dynamic>).map(_wire2api_point).toList());
  }

  RwLockHideData _wire2api_RwLockHideData(dynamic raw) {
    return RwLockHideData.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  SumWithArray3 _wire2api_SumWith_array_3(dynamic raw) {
    return SumWithArray3((raw as List<dynamic>).map(_wire2api_sum_with).toList());
  }

  TestIdArray2 _wire2api_TestId_array_2(dynamic raw) {
    return TestIdArray2((raw as List<dynamic>).map(_wire2api_test_id).toList());
  }

  UuidValue _wire2api_Uuid(dynamic raw) {
    return UuidValue.fromByteList(_wire2api_uint_8_list(raw));
  }

  List<UuidValue> _wire2api_Uuids(dynamic raw) {
    final bytes = _wire2api_uint_8_list(raw);
    return wire2apiUuids(bytes);
  }

  Float32List _wire2api_ZeroCopyBuffer_Float32List(dynamic raw) {
    return raw as Float32List;
  }

  Float64List _wire2api_ZeroCopyBuffer_Float64List(dynamic raw) {
    return raw as Float64List;
  }

  Int16List _wire2api_ZeroCopyBuffer_Int16List(dynamic raw) {
    return raw as Int16List;
  }

  Int32List _wire2api_ZeroCopyBuffer_Int32List(dynamic raw) {
    return raw as Int32List;
  }

  Int64List _wire2api_ZeroCopyBuffer_Int64List(dynamic raw) {
    return _wire2api_int_64_list(raw);
  }

  Int8List _wire2api_ZeroCopyBuffer_Int8List(dynamic raw) {
    return raw as Int8List;
  }

  Uint16List _wire2api_ZeroCopyBuffer_Uint16List(dynamic raw) {
    return raw as Uint16List;
  }

  Uint32List _wire2api_ZeroCopyBuffer_Uint32List(dynamic raw) {
    return raw as Uint32List;
  }

  Uint64List _wire2api_ZeroCopyBuffer_Uint64List(dynamic raw) {
    return _wire2api_uint_64_list(raw);
  }

  Uint8List _wire2api_ZeroCopyBuffer_Uint8List(dynamic raw) {
    return raw as Uint8List;
  }

  (String, int) _wire2api___record__String_i32(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_String(arr[0]),
      _wire2api_i32(arr[1]),
    );
  }

  (ApplicationSettings, RawStringEnumMirrored) _wire2api___record__application_settings_raw_string_enum_mirrored(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_application_settings(arr[0]),
      _wire2api_raw_string_enum_mirrored(arr[1]),
    );
  }

  A _wire2api_a(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return A(
      a: _wire2api_String(arr[0]),
    );
  }

  Abc _wire2api_abc(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Abc_A(
          _wire2api_box_autoadd_a(raw[1]),
        );
      case 1:
        return Abc_B(
          _wire2api_box_autoadd_b(raw[1]),
        );
      case 2:
        return Abc_C(
          _wire2api_box_autoadd_c(raw[1]),
        );
      case 3:
        return Abc_JustInt(
          _wire2api_i32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  ApplicationEnv _wire2api_application_env(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ApplicationEnv(
      vars: _wire2api_list_application_env_var(arr[0]),
    );
  }

  ApplicationEnvVar _wire2api_application_env_var(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApplicationEnvVar(
      field0: _wire2api_String(arr[0]),
      field1: _wire2api_bool(arr[1]),
    );
  }

  ApplicationMessage _wire2api_application_message(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ApplicationMessage_DisplayMessage(
          _wire2api_String(raw[1]),
        );
      case 1:
        return ApplicationMessage_RenderPixel(
          x: _wire2api_i32(raw[1]),
          y: _wire2api_i32(raw[2]),
        );
      case 2:
        return ApplicationMessage_Exit();
      default:
        throw Exception("unreachable");
    }
  }

  ApplicationMode _wire2api_application_mode(dynamic raw) {
    return ApplicationMode.values[raw as int];
  }

  ApplicationSettings _wire2api_application_settings(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApplicationSettings(
      name: _wire2api_String(arr[0]),
      version: _wire2api_String(arr[1]),
      mode: _wire2api_application_mode(arr[2]),
      env: _wire2api_box_application_env(arr[3]),
      envOptional: _wire2api_opt_box_autoadd_application_env(arr[4]),
    );
  }

  Attribute _wire2api_attribute(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Attribute(
      key: _wire2api_String(arr[0]),
      value: _wire2api_String(arr[1]),
    );
  }

  B _wire2api_b(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return B(
      b: _wire2api_i32(arr[0]),
    );
  }

  BigBuffers _wire2api_big_buffers(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffers(
      int64: _wire2api_int_64_list(arr[0]),
      uint64: _wire2api_uint_64_list(arr[1]),
    );
  }

  Blob _wire2api_blob(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Blob(
      field0: _wire2api_u8_array_1600(arr[0]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  ApplicationEnv _wire2api_box_application_env(dynamic raw) {
    return _wire2api_application_env(raw);
  }

  Duration _wire2api_box_autoadd_Chrono_Duration(dynamic raw) {
    return _wire2api_Chrono_Duration(raw);
  }

  DateTime _wire2api_box_autoadd_Chrono_Naive(dynamic raw) {
    return _wire2api_Chrono_Naive(raw);
  }

  DateTime _wire2api_box_autoadd_Chrono_Utc(dynamic raw) {
    return _wire2api_Chrono_Utc(raw);
  }

  Object _wire2api_box_autoadd_DartOpaque(dynamic raw) {
    return _wire2api_DartOpaque(raw);
  }

  HideData _wire2api_box_autoadd_HideData(dynamic raw) {
    return _wire2api_HideData(raw);
  }

  A _wire2api_box_autoadd_a(dynamic raw) {
    return _wire2api_a(raw);
  }

  ApplicationEnv _wire2api_box_autoadd_application_env(dynamic raw) {
    return _wire2api_application_env(raw);
  }

  Attribute _wire2api_box_autoadd_attribute(dynamic raw) {
    return _wire2api_attribute(raw);
  }

  B _wire2api_box_autoadd_b(dynamic raw) {
    return _wire2api_b(raw);
  }

  bool _wire2api_box_autoadd_bool(dynamic raw) {
    return raw as bool;
  }

  C _wire2api_box_autoadd_c(dynamic raw) {
    return _wire2api_c(raw);
  }

  CustomNestedError2 _wire2api_box_autoadd_custom_nested_error_2(dynamic raw) {
    return _wire2api_custom_nested_error_2(raw);
  }

  Element _wire2api_box_autoadd_element(dynamic raw) {
    return _wire2api_element(raw);
  }

  ExoticOptionals _wire2api_box_autoadd_exotic_optionals(dynamic raw) {
    return _wire2api_exotic_optionals(raw);
  }

  double _wire2api_box_autoadd_f64(dynamic raw) {
    return raw as double;
  }

  int _wire2api_box_autoadd_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_box_autoadd_i64(dynamic raw) {
    return _wire2api_i64(raw);
  }

  ListOfNestedRawStringMirrored _wire2api_box_autoadd_list_of_nested_raw_string_mirrored(dynamic raw) {
    return _wire2api_list_of_nested_raw_string_mirrored(raw);
  }

  Measure _wire2api_box_autoadd_measure(dynamic raw) {
    return _wire2api_measure(raw);
  }

  NestedRawStringMirrored _wire2api_box_autoadd_nested_raw_string_mirrored(dynamic raw) {
    return _wire2api_nested_raw_string_mirrored(raw);
  }

  NewTypeInt _wire2api_box_autoadd_new_type_int(dynamic raw) {
    return _wire2api_new_type_int(raw);
  }

  RawStringMirrored _wire2api_box_autoadd_raw_string_mirrored(dynamic raw) {
    return _wire2api_raw_string_mirrored(raw);
  }

  Weekdays _wire2api_box_autoadd_weekdays(dynamic raw) {
    return _wire2api_weekdays(raw);
  }

  Distance _wire2api_box_distance(dynamic raw) {
    return _wire2api_distance(raw);
  }

  FeedId _wire2api_box_feed_id(dynamic raw) {
    return _wire2api_feed_id(raw);
  }

  KitchenSink _wire2api_box_kitchen_sink(dynamic raw) {
    return _wire2api_kitchen_sink(raw);
  }

  Speed _wire2api_box_speed(dynamic raw) {
    return _wire2api_speed(raw);
  }

  U8Array8 _wire2api_box_u8_array_8(dynamic raw) {
    return _wire2api_u8_array_8(raw);
  }

  C _wire2api_c(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return C(
      c: _wire2api_bool(arr[0]),
    );
  }

  ConcatenateWith _wire2api_concatenate_with(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWith(
      bridge: this,
      a: _wire2api_String(arr[0]),
    );
  }

  ContainsMirroredSubStruct _wire2api_contains_mirrored_sub_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStruct(
      test: _wire2api_raw_string_mirrored(arr[0]),
      test2: _wire2api_a(arr[1]),
    );
  }

  CustomError _wire2api_custom_error(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomError_Error0(
          e: _wire2api_String(raw[1]),
          backtrace: _wire2api_String(raw[2]),
        );
      case 1:
        return CustomError_Error1(
          e: _wire2api_u32(raw[1]),
          backtrace: _wire2api_String(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError1 _wire2api_custom_nested_error_1(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError1_CustomNested1(
          _wire2api_String(raw[1]),
        );
      case 1:
        return CustomNestedError1_ErrorNested(
          _wire2api_box_autoadd_custom_nested_error_2(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomNestedError2 _wire2api_custom_nested_error_2(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CustomNestedError2_CustomNested2(
          _wire2api_String(raw[1]),
        );
      case 1:
        return CustomNestedError2_CustomNested2Number(
          _wire2api_u32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CustomStruct _wire2api_custom_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStruct(
      bridge: this,
      message: _wire2api_String(arr[0]),
    );
  }

  CustomStructError _wire2api_custom_struct_error(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructError(
      message: _wire2api_String(arr[0]),
    );
  }

  DartOpaqueNested _wire2api_dart_opaque_nested(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNested(
      first: _wire2api_DartOpaque(arr[0]),
      second: _wire2api_DartOpaque(arr[1]),
    );
  }

  dynamic _wire2api_dartabi(dynamic raw) {
    return raw;
  }

  Distance _wire2api_distance(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Distance_Unknown();
      case 1:
        return Distance_Map(
          _wire2api_f64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  Element _wire2api_element(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Element(
      tag: _wire2api_opt_String(arr[0]),
      text: _wire2api_opt_String(arr[1]),
      attributes: _wire2api_opt_list_attribute(arr[2]),
      children: _wire2api_opt_list_element(arr[3]),
    );
  }

  Empty _wire2api_empty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0) throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return Empty();
  }

  EnumDartOpaque _wire2api_enum_dart_opaque(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumDartOpaque_Primitive(
          _wire2api_i32(raw[1]),
        );
      case 1:
        return EnumDartOpaque_Opaque(
          _wire2api_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  EnumOpaque _wire2api_enum_opaque(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EnumOpaque_Struct(
          _wire2api_HideData(raw[1]),
        );
      case 1:
        return EnumOpaque_Primitive(
          _wire2api_I32(raw[1]),
        );
      case 2:
        return EnumOpaque_TraitObj(
          _wire2api_BoxDartDebug(raw[1]),
        );
      case 3:
        return EnumOpaque_Mutex(
          _wire2api_MutexHideData(raw[1]),
        );
      case 4:
        return EnumOpaque_RwLock(
          _wire2api_RwLockHideData(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  Event _wire2api_event(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Event(
      bridge: this,
      address: _wire2api_String(arr[0]),
      payload: _wire2api_String(arr[1]),
    );
  }

  ExoticOptionals _wire2api_exotic_optionals(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 14) throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionals(
      int32: _wire2api_opt_box_autoadd_i32(arr[0]),
      int64: _wire2api_opt_box_autoadd_i64(arr[1]),
      float64: _wire2api_opt_box_autoadd_f64(arr[2]),
      boolean: _wire2api_opt_box_autoadd_bool(arr[3]),
      zerocopy: _wire2api_opt_ZeroCopyBuffer_Uint8List(arr[4]),
      int8List: _wire2api_opt_int_8_list(arr[5]),
      uint8List: _wire2api_opt_uint_8_list(arr[6]),
      int32List: _wire2api_opt_int_32_list(arr[7]),
      float32List: _wire2api_opt_float_32_list(arr[8]),
      float64List: _wire2api_opt_float_64_list(arr[9]),
      attributes: _wire2api_opt_list_attribute(arr[10]),
      attributesNullable: _wire2api_list_opt_box_autoadd_attribute(arr[11]),
      nullableAttributes: _wire2api_opt_list_opt_box_autoadd_attribute(arr[12]),
      newtypeint: _wire2api_opt_box_autoadd_new_type_int(arr[13]),
    );
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  FeatureUuid _wire2api_feature_uuid(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FeatureUuid(
      one: _wire2api_Uuid(arr[0]),
      many: _wire2api_Uuids(arr[1]),
    );
  }

  FeedId _wire2api_feed_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedId(
      field0: _wire2api_u8_array_8(arr[0]),
    );
  }

  Float32List _wire2api_float_32_list(dynamic raw) {
    return raw as Float32List;
  }

  Float64List _wire2api_float_64_list(dynamic raw) {
    return raw as Float64List;
  }

  int _wire2api_i16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  I32Array2 _wire2api_i32_array_2(dynamic raw) {
    return I32Array2(_wire2api_int_32_list(raw));
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_i8(dynamic raw) {
    return raw as int;
  }

  Int16List _wire2api_int_16_list(dynamic raw) {
    return raw as Int16List;
  }

  Int32List _wire2api_int_32_list(dynamic raw) {
    return raw as Int32List;
  }

  Int64List _wire2api_int_64_list(dynamic raw) {
    return Int64List.from(raw);
  }

  Int8List _wire2api_int_8_list(dynamic raw) {
    return raw as Int8List;
  }

  KitchenSink _wire2api_kitchen_sink(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return KitchenSink_Empty();
      case 1:
        return KitchenSink_Primitives(
          int32: _wire2api_i32(raw[1]),
          float64: _wire2api_f64(raw[2]),
          boolean: _wire2api_bool(raw[3]),
        );
      case 2:
        return KitchenSink_Nested(
          _wire2api_i32(raw[1]),
          _wire2api_box_kitchen_sink(raw[2]),
        );
      case 3:
        return KitchenSink_Optional(
          _wire2api_opt_box_autoadd_i32(raw[1]),
          _wire2api_opt_box_autoadd_i32(raw[2]),
        );
      case 4:
        return KitchenSink_Buffer(
          _wire2api_ZeroCopyBuffer_Uint8List(raw[1]),
        );
      case 5:
        return KitchenSink_Enums(
          _wire2api_weekdays(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  List<Object> _wire2api_list_DartOpaque(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_DartOpaque).toList();
  }

  List<HideData> _wire2api_list_HideData(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_HideData).toList();
  }

  List<ApplicationEnvVar> _wire2api_list_application_env_var(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_application_env_var).toList();
  }

  List<ApplicationSettings> _wire2api_list_application_settings(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_application_settings).toList();
  }

  List<Attribute> _wire2api_list_attribute(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_attribute).toList();
  }

  List<bool> _wire2api_list_bool(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_bool).toList();
  }

  List<Element> _wire2api_list_element(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_element).toList();
  }

  List<EnumOpaque> _wire2api_list_enum_opaque(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_enum_opaque).toList();
  }

  List<MyEnum> _wire2api_list_my_enum(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_my_enum).toList();
  }

  List<MySize> _wire2api_list_my_size(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_my_size).toList();
  }

  List<MyTreeNode> _wire2api_list_my_tree_node(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_my_tree_node).toList();
  }

  List<NestedRawStringMirrored> _wire2api_list_nested_raw_string_mirrored(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_nested_raw_string_mirrored).toList();
  }

  ListOfNestedRawStringMirrored _wire2api_list_of_nested_raw_string_mirrored(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ListOfNestedRawStringMirrored(
      raw: _wire2api_list_nested_raw_string_mirrored(arr[0]),
    );
  }

  List<String?> _wire2api_list_opt_String(dynamic raw) {
    return mapNonNull(raw as List<dynamic>, _wire2api_String);
  }

  List<Attribute?> _wire2api_list_opt_box_autoadd_attribute(dynamic raw) {
    return mapNonNull(raw as List<dynamic>, _wire2api_box_autoadd_attribute);
  }

  List<int?> _wire2api_list_opt_box_autoadd_i32(dynamic raw) {
    return mapNonNull(raw as List<dynamic>, _wire2api_box_autoadd_i32);
  }

  List<Weekdays?> _wire2api_list_opt_box_autoadd_weekdays(dynamic raw) {
    return mapNonNull(raw as List<dynamic>, _wire2api_box_autoadd_weekdays);
  }

  List<Int32List?> _wire2api_list_opt_int_32_list(dynamic raw) {
    return mapNonNull(raw as List<dynamic>, _wire2api_int_32_list);
  }

  List<Point> _wire2api_list_point(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_point).toList();
  }

  List<RawStringMirrored> _wire2api_list_raw_string_mirrored(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_raw_string_mirrored).toList();
  }

  List<SumWith> _wire2api_list_sum_with(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_sum_with).toList();
  }

  List<TestId> _wire2api_list_test_id(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_test_id).toList();
  }

  List<Weekdays> _wire2api_list_weekdays(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_weekdays).toList();
  }

  Log _wire2api_log(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log(
      key: _wire2api_u32(arr[0]),
      value: _wire2api_u32(arr[1]),
    );
  }

  Log2 _wire2api_log_2(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2(
      key: _wire2api_u32(arr[0]),
      value: _wire2api_String(arr[1]),
    );
  }

  MacroStruct _wire2api_macro_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MacroStruct(
      data: _wire2api_i32(arr[0]),
      nonFinalData: _wire2api_i32(arr[1]),
    );
  }

  Measure _wire2api_measure(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Measure_Speed(
          _wire2api_box_speed(raw[1]),
        );
      case 1:
        return Measure_Distance(
          _wire2api_box_distance(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  MessageId _wire2api_message_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageId(
      field0: _wire2api_u8_array_32(arr[0]),
    );
  }

  MirrorStruct _wire2api_mirror_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStruct(
      a: _wire2api_application_settings(arr[0]),
      b: _wire2api_my_struct(arr[1]),
      c: _wire2api_list_my_enum(arr[2]),
      d: _wire2api_list_application_settings(arr[3]),
    );
  }

  MoreThanJustOneRawStringStruct _wire2api_more_than_just_one_raw_string_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStruct(
      regular: _wire2api_String(arr[0]),
      type: _wire2api_String(arr[1]),
      async: _wire2api_bool(arr[2]),
      another: _wire2api_String(arr[3]),
    );
  }

  MyEnum _wire2api_my_enum(dynamic raw) {
    return MyEnum.values[raw as int];
  }

  MyEnumFreezed _wire2api_my_enum_freezed(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return MyEnumFreezed_A(
          _wire2api_i32(raw[1]),
        );
      case 1:
        return MyEnumFreezed_B(
          _wire2api_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  MyNestedStruct _wire2api_my_nested_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStruct(
      treeNode: _wire2api_my_tree_node(arr[0]),
      weekday: _wire2api_weekdays(arr[1]),
    );
  }

  MySize _wire2api_my_size(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MySize(
      width: _wire2api_i32(arr[0]),
      height: _wire2api_i32(arr[1]),
    );
  }

  MySizeFreezed _wire2api_my_size_freezed(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MySizeFreezed(
      width: _wire2api_i32(arr[0]),
      height: _wire2api_i32(arr[1]),
    );
  }

  MyStreamEntry _wire2api_my_stream_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStreamEntry(
      hello: _wire2api_String(arr[0]),
    );
  }

  MyStruct _wire2api_my_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStruct(
      content: _wire2api_bool(arr[0]),
    );
  }

  MyTreeNode _wire2api_my_tree_node(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNode(
      valueI32: _wire2api_i32(arr[0]),
      valueVecU8: _wire2api_uint_8_list(arr[1]),
      valueBoolean: _wire2api_bool(arr[2]),
      children: _wire2api_list_my_tree_node(arr[3]),
    );
  }

  NestedRawStringMirrored _wire2api_nested_raw_string_mirrored(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NestedRawStringMirrored(
      raw: _wire2api_raw_string_mirrored(arr[0]),
    );
  }

  NewSimpleStruct _wire2api_new_simple_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewSimpleStruct(
      field: _wire2api_i32(arr[0]),
    );
  }

  NewTypeInt _wire2api_new_type_int(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeInt(
      field0: _wire2api_i64(arr[0]),
    );
  }

  Numbers _wire2api_numbers(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Numbers(
      field0: _wire2api_int_32_list(arr[0]),
    );
  }

  OldSimpleStruct _wire2api_old_simple_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OldSimpleStruct(
      field: _wire2api_i32(arr[0]),
    );
  }

  OpaqueNested _wire2api_opaque_nested(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNested(
      first: _wire2api_HideData(arr[0]),
      second: _wire2api_HideData(arr[1]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Uint8List? _wire2api_opt_ZeroCopyBuffer_Uint8List(dynamic raw) {
    return raw == null ? null : _wire2api_ZeroCopyBuffer_Uint8List(raw);
  }

  Duration? _wire2api_opt_box_autoadd_Chrono_Duration(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_Chrono_Duration(raw);
  }

  DateTime? _wire2api_opt_box_autoadd_Chrono_Naive(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_Chrono_Naive(raw);
  }

  DateTime? _wire2api_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_Chrono_Utc(raw);
  }

  Object? _wire2api_opt_box_autoadd_DartOpaque(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_DartOpaque(raw);
  }

  HideData? _wire2api_opt_box_autoadd_HideData(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_HideData(raw);
  }

  ApplicationEnv? _wire2api_opt_box_autoadd_application_env(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_application_env(raw);
  }

  bool? _wire2api_opt_box_autoadd_bool(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_bool(raw);
  }

  Element? _wire2api_opt_box_autoadd_element(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_element(raw);
  }

  ExoticOptionals? _wire2api_opt_box_autoadd_exotic_optionals(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_exotic_optionals(raw);
  }

  double? _wire2api_opt_box_autoadd_f64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_f64(raw);
  }

  int? _wire2api_opt_box_autoadd_i32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_i32(raw);
  }

  int? _wire2api_opt_box_autoadd_i64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_i64(raw);
  }

  Measure? _wire2api_opt_box_autoadd_measure(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_measure(raw);
  }

  NewTypeInt? _wire2api_opt_box_autoadd_new_type_int(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_new_type_int(raw);
  }

  Weekdays? _wire2api_opt_box_autoadd_weekdays(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_weekdays(raw);
  }

  Float32List? _wire2api_opt_float_32_list(dynamic raw) {
    return raw == null ? null : _wire2api_float_32_list(raw);
  }

  Float64List? _wire2api_opt_float_64_list(dynamic raw) {
    return raw == null ? null : _wire2api_float_64_list(raw);
  }

  Int32List? _wire2api_opt_int_32_list(dynamic raw) {
    return raw == null ? null : _wire2api_int_32_list(raw);
  }

  Int8List? _wire2api_opt_int_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_int_8_list(raw);
  }

  List<Attribute>? _wire2api_opt_list_attribute(dynamic raw) {
    return raw == null ? null : _wire2api_list_attribute(raw);
  }

  List<Element>? _wire2api_opt_list_element(dynamic raw) {
    return raw == null ? null : _wire2api_list_element(raw);
  }

  List<Attribute?>? _wire2api_opt_list_opt_box_autoadd_attribute(dynamic raw) {
    return raw == null ? null : _wire2api_list_opt_box_autoadd_attribute(raw);
  }

  Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_8_list(raw);
  }

  OptVecs _wire2api_opt_vecs(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecs(
      i32: _wire2api_list_opt_box_autoadd_i32(arr[0]),
      enums: _wire2api_list_opt_box_autoadd_weekdays(arr[1]),
      strings: _wire2api_list_opt_String(arr[2]),
      buffers: _wire2api_list_opt_int_32_list(arr[3]),
    );
  }

  Point _wire2api_point(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Point(
      x: _wire2api_f32(arr[0]),
      y: _wire2api_f32(arr[1]),
    );
  }

  RawStringEnumMirrored _wire2api_raw_string_enum_mirrored(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return RawStringEnumMirrored_Raw(
          _wire2api_box_autoadd_raw_string_mirrored(raw[1]),
        );
      case 1:
        return RawStringEnumMirrored_Nested(
          _wire2api_box_autoadd_nested_raw_string_mirrored(raw[1]),
        );
      case 2:
        return RawStringEnumMirrored_ListOfNested(
          _wire2api_box_autoadd_list_of_nested_raw_string_mirrored(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  RawStringItemStruct _wire2api_raw_string_item_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStruct(
      type: _wire2api_String(arr[0]),
    );
  }

  RawStringMirrored _wire2api_raw_string_mirrored(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringMirrored(
      value: _wire2api_String(arr[0]),
    );
  }

  Sequences _wire2api_sequences(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Sequences(
      field0: _wire2api_int_32_list(arr[0]),
    );
  }

  SomeStruct _wire2api_some_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStruct(
      bridge: this,
      value: _wire2api_u32(arr[0]),
    );
  }

  Speed _wire2api_speed(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Speed_Unknown();
      case 1:
        return Speed_GPS(
          _wire2api_f64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  StructWithEnum _wire2api_struct_with_enum(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnum(
      abc1: _wire2api_abc(arr[0]),
      abc2: _wire2api_abc(arr[1]),
    );
  }

  SumWith _wire2api_sum_with(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWith(
      bridge: this,
      x: _wire2api_u32(arr[0]),
    );
  }

  TestChrono _wire2api_test_chrono(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TestChrono(
      dt: _wire2api_opt_box_autoadd_Chrono_Utc(arr[0]),
      dt2: _wire2api_opt_box_autoadd_Chrono_Naive(arr[1]),
      du: _wire2api_opt_box_autoadd_Chrono_Duration(arr[2]),
    );
  }

  TestId _wire2api_test_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestId(
      field0: _wire2api_i32_array_2(arr[0]),
    );
  }

  TestModel _wire2api_test_model(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModel(
      id: _wire2api_u64(arr[0]),
      name: _wire2api_String(arr[1]),
      aliasEnum: _wire2api_my_enum(arr[2]),
      aliasStruct: _wire2api_my_struct(arr[3]),
    );
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array1600 _wire2api_u8_array_1600(dynamic raw) {
    return U8Array1600(_wire2api_uint_8_list(raw));
  }

  U8Array32 _wire2api_u8_array_32(dynamic raw) {
    return U8Array32(_wire2api_uint_8_list(raw));
  }

  U8Array5 _wire2api_u8_array_5(dynamic raw) {
    return U8Array5(_wire2api_uint_8_list(raw));
  }

  U8Array8 _wire2api_u8_array_8(dynamic raw) {
    return U8Array8(_wire2api_uint_8_list(raw));
  }

  Uint16List _wire2api_uint_16_list(dynamic raw) {
    return raw as Uint16List;
  }

  Uint32List _wire2api_uint_32_list(dynamic raw) {
    return raw as Uint32List;
  }

  Uint64List _wire2api_uint_64_list(dynamic raw) {
    return Uint64List.from(raw);
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UserId _wire2api_user_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserId(
      value: _wire2api_u32(arr[0]),
    );
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }

  VecOfPrimitivePack _wire2api_vec_of_primitive_pack(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11) throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePack(
      int8List: _wire2api_int_8_list(arr[0]),
      uint8List: _wire2api_uint_8_list(arr[1]),
      int16List: _wire2api_int_16_list(arr[2]),
      uint16List: _wire2api_uint_16_list(arr[3]),
      uint32List: _wire2api_uint_32_list(arr[4]),
      int32List: _wire2api_int_32_list(arr[5]),
      uint64List: _wire2api_uint_64_list(arr[6]),
      int64List: _wire2api_int_64_list(arr[7]),
      float32List: _wire2api_float_32_list(arr[8]),
      float64List: _wire2api_float_64_list(arr[9]),
      boolList: _wire2api_list_bool(arr[10]),
    );
  }

  Weekdays _wire2api_weekdays(dynamic raw) {
    return Weekdays.values[raw as int];
  }

  ZeroCopyVecOfPrimitivePack _wire2api_zero_copy_vec_of_primitive_pack(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 10) throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return ZeroCopyVecOfPrimitivePack(
      int8List: _wire2api_ZeroCopyBuffer_Int8List(arr[0]),
      uint8List: _wire2api_ZeroCopyBuffer_Uint8List(arr[1]),
      int16List: _wire2api_ZeroCopyBuffer_Int16List(arr[2]),
      uint16List: _wire2api_ZeroCopyBuffer_Uint16List(arr[3]),
      uint32List: _wire2api_ZeroCopyBuffer_Uint32List(arr[4]),
      int32List: _wire2api_ZeroCopyBuffer_Int32List(arr[5]),
      uint64List: _wire2api_ZeroCopyBuffer_Uint64List(arr[6]),
      int64List: _wire2api_ZeroCopyBuffer_Int64List(arr[7]),
      float32List: _wire2api_ZeroCopyBuffer_Float32List(arr[8]),
      float64List: _wire2api_ZeroCopyBuffer_Float64List(arr[9]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_application_mode(ApplicationMode raw) {
  return api2wire_i32(raw.index);
}

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_i8(int raw) {
  return raw;
}

@protected
int api2wire_my_enum(MyEnum raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

@protected
int api2wire_weekdays(Weekdays raw) {
  return api2wire_i32(raw.index);
}
// Section: finalizer
