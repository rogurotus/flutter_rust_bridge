// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class FlutterRustBridgeExampleSingleBlockTestPlatform
    extends FlutterRustBridgeBase<FlutterRustBridgeExampleSingleBlockTestWire> with FlutterRustBridgeSetupMixin {
  FlutterRustBridgeExampleSingleBlockTestPlatform(FutureOr<WasmModule> dylib)
      : super(FlutterRustBridgeExampleSingleBlockTestWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  Object api2wire_BoxDartDebug(BoxDartDebug raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_Chrono_Duration(Duration raw) {
    return api2wire_i64(raw.inMilliseconds);
  }

  @protected
  Object /* BigInt64Array */ api2wire_Chrono_DurationList(List<Duration> raw) {
    final ans = Int64List(raw.length);
    for (var i = 0; i < raw.length; ++i) ans[i] = api2wire_Chrono_Duration(raw[i]);
    return api2wire_int_64_list(ans);
  }

  @protected
  Object api2wire_Chrono_Local(DateTime raw) {
    return api2wire_i64(raw.millisecondsSinceEpoch);
  }

  @protected
  Object api2wire_Chrono_Naive(DateTime raw) {
    return api2wire_i64(raw.millisecondsSinceEpoch);
  }

  @protected
  Object /* BigInt64Array */ api2wire_Chrono_NaiveList(List<DateTime> raw) {
    final ans = Int64List(raw.length);
    for (var i = 0; i < raw.length; ++i) ans[i] = api2wire_Chrono_Naive(raw[i]);
    return api2wire_int_64_list(ans);
  }

  @protected
  Object api2wire_Chrono_Utc(DateTime raw) {
    return api2wire_i64(raw.millisecondsSinceEpoch);
  }

  @protected
  Object api2wire_DartOpaque(Object raw) {
    return [raw, dropPort];
  }

  @protected
  Object api2wire_HideData(HideData raw) {
    return raw.shareOrMove();
  }

  @protected
  List<dynamic> api2wire_HideData_array_2(HideDataArray2 raw) {
    return api2wire_list_HideData(raw);
  }

  @protected
  Object api2wire_I32(I32 raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_MutexHideData(MutexHideData raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_NonCloneData(NonCloneData raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_NonSendHideData(NonSendHideData raw) {
    return raw.shareOrMove();
  }

  @protected
  List<dynamic> api2wire_Object_array_1(ObjectArray1 raw) {
    return api2wire_list_DartOpaque(raw);
  }

  @protected
  Object api2wire_RwLockHideData(RwLockHideData raw) {
    return raw.shareOrMove();
  }

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<String> api2wire_StringList(List<String> raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_TestId_array_4(TestIdArray4 raw) {
    return api2wire_list_test_id(raw);
  }

  @protected
  Uint8List api2wire_Uuid(UuidValue raw) {
    return api2wire_uint_8_list(raw.toBytes());
  }

  @protected
  Uint8List api2wire_Uuids(List<UuidValue> raw) {
    return api2wire_uint_8_list(api2wireConcatenateBytes(raw));
  }

  @protected
  Uint8List api2wire_ZeroCopyBuffer_Uint8List(Uint8List raw) {
    return api2wire_uint_8_list(raw);
  }

  @protected
  List<dynamic> api2wire___record__String_i32((String, int) raw) {
    return [api2wire_String(raw.$1), api2wire_i32(raw.$2)];
  }

  @protected
  List<dynamic> api2wire_a(A raw) {
    return [api2wire_String(raw.a)];
  }

  @protected
  List<dynamic> api2wire_abc(Abc raw) {
    if (raw is Abc_A) {
      return [0, api2wire_box_autoadd_a(raw.field0)];
    }
    if (raw is Abc_B) {
      return [1, api2wire_box_autoadd_b(raw.field0)];
    }
    if (raw is Abc_C) {
      return [2, api2wire_box_autoadd_c(raw.field0)];
    }
    if (raw is Abc_JustInt) {
      return [3, api2wire_i32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_application_env(ApplicationEnv raw) {
    return [api2wire_list_application_env_var(raw.vars)];
  }

  @protected
  List<dynamic> api2wire_application_env_var(ApplicationEnvVar raw) {
    return [api2wire_String(raw.field0), api2wire_bool(raw.field1)];
  }

  @protected
  List<dynamic> api2wire_application_settings(ApplicationSettings raw) {
    return [
      api2wire_String(raw.name),
      api2wire_String(raw.version),
      api2wire_application_mode(raw.mode),
      api2wire_box_application_env(raw.env),
      api2wire_opt_box_autoadd_application_env(raw.envOptional)
    ];
  }

  @protected
  List<dynamic> api2wire_attribute(Attribute raw) {
    return [api2wire_String(raw.key), api2wire_String(raw.value)];
  }

  @protected
  List<dynamic> api2wire_b(B raw) {
    return [api2wire_i32(raw.b)];
  }

  @protected
  List<dynamic> api2wire_blob(Blob raw) {
    return [api2wire_u8_array_1600(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_box_application_env(ApplicationEnv raw) {
    return api2wire_application_env(raw);
  }

  @protected
  Object api2wire_box_autoadd_Chrono_Utc(DateTime raw) {
    return api2wire_Chrono_Utc(raw);
  }

  @protected
  Object api2wire_box_autoadd_DartOpaque(Object raw) {
    return api2wire_DartOpaque(raw);
  }

  @protected
  Object api2wire_box_autoadd_HideData(HideData raw) {
    return api2wire_HideData(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd___record__String_i32((String, int) raw) {
    return api2wire___record__String_i32(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_a(A raw) {
    return api2wire_a(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_abc(Abc raw) {
    return api2wire_abc(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_application_env(ApplicationEnv raw) {
    return api2wire_application_env(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_application_settings(ApplicationSettings raw) {
    return api2wire_application_settings(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_attribute(Attribute raw) {
    return api2wire_attribute(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_b(B raw) {
    return api2wire_b(raw);
  }

  @protected
  bool api2wire_box_autoadd_bool(bool raw) {
    return api2wire_bool(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_c(C raw) {
    return api2wire_c(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_concatenate_with(ConcatenateWith raw) {
    return api2wire_concatenate_with(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_custom_struct(CustomStruct raw) {
    return api2wire_custom_struct(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_customized(Customized raw) {
    return api2wire_customized(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_dart_opaque_nested(DartOpaqueNested raw) {
    return api2wire_dart_opaque_nested(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_empty(Empty raw) {
    return api2wire_empty(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_enum_dart_opaque(EnumDartOpaque raw) {
    return api2wire_enum_dart_opaque(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_enum_opaque(EnumOpaque raw) {
    return api2wire_enum_opaque(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_event(Event raw) {
    return api2wire_event(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_exotic_optionals(ExoticOptionals raw) {
    return api2wire_exotic_optionals(raw);
  }

  @protected
  double api2wire_box_autoadd_f64(double raw) {
    return api2wire_f64(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_feature_chrono(FeatureChrono raw) {
    return api2wire_feature_chrono(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_feature_uuid(FeatureUuid raw) {
    return api2wire_feature_uuid(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_feed_id(FeedId raw) {
    return api2wire_feed_id(raw);
  }

  @protected
  int api2wire_box_autoadd_i32(int raw) {
    return api2wire_i32(raw);
  }

  @protected
  Object api2wire_box_autoadd_i64(int raw) {
    return api2wire_i64(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_kitchen_sink(KitchenSink raw) {
    return api2wire_kitchen_sink(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_measure(Measure raw) {
    return api2wire_measure(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_message_id(MessageId raw) {
    return api2wire_message_id(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_my_enum_freezed(MyEnumFreezed raw) {
    return api2wire_my_enum_freezed(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_my_nested_struct(MyNestedStruct raw) {
    return api2wire_my_nested_struct(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_my_size(MySize raw) {
    return api2wire_my_size(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_my_size_freezed(MySizeFreezed raw) {
    return api2wire_my_size_freezed(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_my_struct(MyStruct raw) {
    return api2wire_my_struct(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_my_tree_node(MyTreeNode raw) {
    return api2wire_my_tree_node(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_new_type_int(NewTypeInt raw) {
    return api2wire_new_type_int(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_note(Note raw) {
    return api2wire_note(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_numbers(Numbers raw) {
    return api2wire_numbers(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_opaque_nested(OpaqueNested raw) {
    return api2wire_opaque_nested(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_opt_vecs(OptVecs raw) {
    return api2wire_opt_vecs(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_sequences(Sequences raw) {
    return api2wire_sequences(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_some_struct(SomeStruct raw) {
    return api2wire_some_struct(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_struct_with_enum(StructWithEnum raw) {
    return api2wire_struct_with_enum(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_sum_with(SumWith raw) {
    return api2wire_sum_with(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_test_id(TestId raw) {
    return api2wire_test_id(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_user_id(UserId raw) {
    return api2wire_user_id(raw);
  }

  @protected
  int api2wire_box_autoadd_weekdays(Weekdays raw) {
    return api2wire_weekdays(raw);
  }

  @protected
  List<dynamic> api2wire_box_blob(Blob raw) {
    return api2wire_blob(raw);
  }

  @protected
  bool api2wire_box_bool(bool raw) {
    return api2wire_bool(raw);
  }

  @protected
  List<dynamic> api2wire_box_distance(Distance raw) {
    return api2wire_distance(raw);
  }

  @protected
  List<dynamic> api2wire_box_exotic_optionals(ExoticOptionals raw) {
    return api2wire_exotic_optionals(raw);
  }

  @protected
  double api2wire_box_f64(double raw) {
    return api2wire_f64(raw);
  }

  @protected
  int api2wire_box_i32(int raw) {
    return api2wire_i32(raw);
  }

  @protected
  Object api2wire_box_i64(int raw) {
    return api2wire_i64(raw);
  }

  @protected
  int api2wire_box_i8(int raw) {
    return api2wire_i8(raw);
  }

  @protected
  List<dynamic> api2wire_box_kitchen_sink(KitchenSink raw) {
    return api2wire_kitchen_sink(raw);
  }

  @protected
  List<dynamic> api2wire_box_my_size(MySize raw) {
    return api2wire_my_size(raw);
  }

  @protected
  List<dynamic> api2wire_box_my_size_freezed(MySizeFreezed raw) {
    return api2wire_my_size_freezed(raw);
  }

  @protected
  List<dynamic> api2wire_box_speed(Speed raw) {
    return api2wire_speed(raw);
  }

  @protected
  int api2wire_box_u8(int raw) {
    return api2wire_u8(raw);
  }

  @protected
  Uint8List api2wire_box_u8_array_1600(U8Array1600 raw) {
    return api2wire_u8_array_1600(raw);
  }

  @protected
  int api2wire_box_weekdays(Weekdays raw) {
    return api2wire_weekdays(raw);
  }

  @protected
  List<dynamic> api2wire_c(C raw) {
    return [api2wire_bool(raw.c)];
  }

  @protected
  List<dynamic> api2wire_concatenate_with(ConcatenateWith raw) {
    return [api2wire_String(raw.a)];
  }

  @protected
  List<dynamic> api2wire_custom_struct(CustomStruct raw) {
    return [api2wire_String(raw.message)];
  }

  @protected
  List<dynamic> api2wire_customized(Customized raw) {
    return [api2wire_String(raw.finalField), api2wire_opt_String(raw.nonFinalField)];
  }

  @protected
  List<dynamic> api2wire_dart_opaque_nested(DartOpaqueNested raw) {
    return [api2wire_DartOpaque(raw.first), api2wire_DartOpaque(raw.second)];
  }

  @protected
  List<dynamic> api2wire_distance(Distance raw) {
    if (raw is Distance_Unknown) {
      return [0];
    }
    if (raw is Distance_Map) {
      return [1, api2wire_f64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_empty(Empty raw) {
    return [];
  }

  @protected
  List<dynamic> api2wire_enum_dart_opaque(EnumDartOpaque raw) {
    if (raw is EnumDartOpaque_Primitive) {
      return [0, api2wire_i32(raw.field0)];
    }
    if (raw is EnumDartOpaque_Opaque) {
      return [1, api2wire_DartOpaque(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_enum_opaque(EnumOpaque raw) {
    if (raw is EnumOpaque_Struct) {
      return [0, api2wire_HideData(raw.field0)];
    }
    if (raw is EnumOpaque_Primitive) {
      return [1, api2wire_I32(raw.field0)];
    }
    if (raw is EnumOpaque_TraitObj) {
      return [2, api2wire_BoxDartDebug(raw.field0)];
    }
    if (raw is EnumOpaque_Mutex) {
      return [3, api2wire_MutexHideData(raw.field0)];
    }
    if (raw is EnumOpaque_RwLock) {
      return [4, api2wire_RwLockHideData(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_event(Event raw) {
    return [api2wire_String(raw.address), api2wire_String(raw.payload)];
  }

  @protected
  List<dynamic> api2wire_exotic_optionals(ExoticOptionals raw) {
    return [
      api2wire_opt_box_autoadd_i32(raw.int32),
      api2wire_opt_box_autoadd_i64(raw.int64),
      api2wire_opt_box_autoadd_f64(raw.float64),
      api2wire_opt_box_autoadd_bool(raw.boolean),
      api2wire_opt_ZeroCopyBuffer_Uint8List(raw.zerocopy),
      api2wire_opt_int_8_list(raw.int8List),
      api2wire_opt_uint_8_list(raw.uint8List),
      api2wire_opt_int_32_list(raw.int32List),
      api2wire_opt_float_32_list(raw.float32List),
      api2wire_opt_float_64_list(raw.float64List),
      api2wire_opt_list_attribute(raw.attributes),
      api2wire_list_opt_box_autoadd_attribute(raw.attributesNullable),
      api2wire_opt_list_opt_box_autoadd_attribute(raw.nullableAttributes),
      api2wire_opt_box_autoadd_new_type_int(raw.newtypeint)
    ];
  }

  @protected
  Float64List api2wire_f64_array_16(F64Array16 raw) {
    return Float64List.fromList(raw);
  }

  @protected
  List<dynamic> api2wire_feature_chrono(FeatureChrono raw) {
    return [
      api2wire_Chrono_Utc(raw.utc),
      api2wire_Chrono_Local(raw.local),
      api2wire_Chrono_Duration(raw.duration),
      api2wire_Chrono_Naive(raw.naive)
    ];
  }

  @protected
  List<dynamic> api2wire_feature_uuid(FeatureUuid raw) {
    return [api2wire_Uuid(raw.one), api2wire_Uuids(raw.many)];
  }

  @protected
  List<dynamic> api2wire_feed_id(FeedId raw) {
    return [api2wire_u8_array_8(raw.field0)];
  }

  @protected
  Float32List api2wire_float_32_list(Float32List raw) {
    return raw;
  }

  @protected
  Float64List api2wire_float_64_list(Float64List raw) {
    return raw;
  }

  @protected
  Int32List api2wire_i32_array_2(I32Array2 raw) {
    return Int32List.fromList(raw);
  }

  @protected
  Object api2wire_i64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  Int32List api2wire_int_32_list(Int32List raw) {
    return raw;
  }

  @protected
  Object /* BigInt64Array */ api2wire_int_64_list(Int64List raw) {
    return raw.inner;
  }

  @protected
  Int8List api2wire_int_8_list(Int8List raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_kitchen_sink(KitchenSink raw) {
    if (raw is KitchenSink_Empty) {
      return [0];
    }
    if (raw is KitchenSink_Primitives) {
      return [1, api2wire_i32(raw.int32), api2wire_f64(raw.float64), api2wire_bool(raw.boolean)];
    }
    if (raw is KitchenSink_Nested) {
      return [2, api2wire_i32(raw.field0), api2wire_box_kitchen_sink(raw.field1)];
    }
    if (raw is KitchenSink_Optional) {
      return [3, api2wire_opt_box_autoadd_i32(raw.field0), api2wire_opt_box_autoadd_i32(raw.field1)];
    }
    if (raw is KitchenSink_Buffer) {
      return [4, api2wire_ZeroCopyBuffer_Uint8List(raw.field0)];
    }
    if (raw is KitchenSink_Enums) {
      return [5, api2wire_weekdays(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_list_DartOpaque(List<Object> raw) {
    return raw.map(api2wire_DartOpaque).toList();
  }

  @protected
  List<dynamic> api2wire_list_HideData(List<HideData> raw) {
    return raw.map(api2wire_HideData).toList();
  }

  @protected
  List<dynamic> api2wire_list___record__String_i32(List<(String, int)> raw) {
    return raw.map(api2wire___record__String_i32).toList();
  }

  @protected
  List<dynamic> api2wire_list_application_env_var(List<ApplicationEnvVar> raw) {
    return raw.map(api2wire_application_env_var).toList();
  }

  @protected
  List<dynamic> api2wire_list_attribute(List<Attribute> raw) {
    return raw.map(api2wire_attribute).toList();
  }

  @protected
  List<dynamic> api2wire_list_my_size(List<MySize> raw) {
    return raw.map(api2wire_my_size).toList();
  }

  @protected
  List<dynamic> api2wire_list_my_tree_node(List<MyTreeNode> raw) {
    return raw.map(api2wire_my_tree_node).toList();
  }

  @protected
  List<dynamic> api2wire_list_opt_String(List<String?> raw) {
    return mapNonNull(raw, api2wire_String);
  }

  @protected
  List<dynamic> api2wire_list_opt_box_autoadd_attribute(List<Attribute?> raw) {
    return mapNonNull(raw, api2wire_box_autoadd_attribute);
  }

  @protected
  List<dynamic> api2wire_list_opt_box_autoadd_i32(List<int?> raw) {
    return mapNonNull(raw, api2wire_box_autoadd_i32);
  }

  @protected
  List<dynamic> api2wire_list_opt_box_autoadd_weekdays(List<Weekdays?> raw) {
    return mapNonNull(raw, api2wire_box_autoadd_weekdays);
  }

  @protected
  List<dynamic> api2wire_list_opt_int_32_list(List<Int32List?> raw) {
    return mapNonNull(raw, api2wire_int_32_list);
  }

  @protected
  List<dynamic> api2wire_list_test_id(List<TestId> raw) {
    return raw.map(api2wire_test_id).toList();
  }

  @protected
  List<dynamic> api2wire_list_weekdays(List<Weekdays> raw) {
    return raw.map(api2wire_weekdays).toList();
  }

  @protected
  List<dynamic> api2wire_measure(Measure raw) {
    if (raw is Measure_Speed) {
      return [0, api2wire_box_speed(raw.field0)];
    }
    if (raw is Measure_Distance) {
      return [1, api2wire_box_distance(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_message_id(MessageId raw) {
    return [api2wire_u8_array_32(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_my_enum_freezed(MyEnumFreezed raw) {
    if (raw is MyEnumFreezed_A) {
      return [0, api2wire_i32(raw.field0)];
    }
    if (raw is MyEnumFreezed_B) {
      return [1, api2wire_String(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_my_nested_struct(MyNestedStruct raw) {
    return [api2wire_my_tree_node(raw.treeNode), api2wire_weekdays(raw.weekday)];
  }

  @protected
  List<dynamic> api2wire_my_size(MySize raw) {
    return [api2wire_i32(raw.width), api2wire_i32(raw.height)];
  }

  @protected
  List<dynamic> api2wire_my_size_freezed(MySizeFreezed raw) {
    return [api2wire_i32(raw.width), api2wire_i32(raw.height)];
  }

  @protected
  List<dynamic> api2wire_my_struct(MyStruct raw) {
    return [api2wire_bool(raw.content)];
  }

  @protected
  List<dynamic> api2wire_my_tree_node(MyTreeNode raw) {
    return [
      api2wire_i32(raw.valueI32),
      api2wire_uint_8_list(raw.valueVecU8),
      api2wire_bool(raw.valueBoolean),
      api2wire_list_my_tree_node(raw.children)
    ];
  }

  @protected
  List<dynamic> api2wire_new_type_int(NewTypeInt raw) {
    return [api2wire_i64(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_note(Note raw) {
    return [api2wire_box_weekdays(raw.day), api2wire_String(raw.body)];
  }

  @protected
  List<dynamic> api2wire_numbers(Numbers raw) {
    return [api2wire_int_32_list(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_opaque_nested(OpaqueNested raw) {
    return [api2wire_HideData(raw.first), api2wire_HideData(raw.second)];
  }

  @protected
  String? api2wire_opt_String(String? raw) {
    return raw == null ? null : api2wire_String(raw);
  }

  @protected
  Uint8List? api2wire_opt_ZeroCopyBuffer_Uint8List(Uint8List? raw) {
    return raw == null ? null : api2wire_ZeroCopyBuffer_Uint8List(raw);
  }

  @protected
  Object? api2wire_opt_box_autoadd_Chrono_Utc(DateTime? raw) {
    return raw == null ? null : api2wire_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  Object? api2wire_opt_box_autoadd_DartOpaque(Object? raw) {
    return raw == null ? null : api2wire_box_autoadd_DartOpaque(raw);
  }

  @protected
  Object? api2wire_opt_box_autoadd_HideData(HideData? raw) {
    return raw == null ? null : api2wire_box_autoadd_HideData(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd___record__String_i32((String, int)? raw) {
    return raw == null ? null : api2wire_box_autoadd___record__String_i32(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_application_env(ApplicationEnv? raw) {
    return raw == null ? null : api2wire_box_autoadd_application_env(raw);
  }

  @protected
  bool? api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? null : api2wire_box_autoadd_bool(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_exotic_optionals(ExoticOptionals? raw) {
    return raw == null ? null : api2wire_box_autoadd_exotic_optionals(raw);
  }

  @protected
  double? api2wire_opt_box_autoadd_f64(double? raw) {
    return raw == null ? null : api2wire_box_autoadd_f64(raw);
  }

  @protected
  int? api2wire_opt_box_autoadd_i32(int? raw) {
    return raw == null ? null : api2wire_box_autoadd_i32(raw);
  }

  @protected
  Object? api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? null : api2wire_box_autoadd_i64(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_new_type_int(NewTypeInt? raw) {
    return raw == null ? null : api2wire_box_autoadd_new_type_int(raw);
  }

  @protected
  bool? api2wire_opt_box_bool(bool? raw) {
    return raw == null ? null : api2wire_box_bool(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_exotic_optionals(ExoticOptionals? raw) {
    return raw == null ? null : api2wire_box_exotic_optionals(raw);
  }

  @protected
  double? api2wire_opt_box_f64(double? raw) {
    return raw == null ? null : api2wire_box_f64(raw);
  }

  @protected
  int? api2wire_opt_box_i32(int? raw) {
    return raw == null ? null : api2wire_box_i32(raw);
  }

  @protected
  Object? api2wire_opt_box_i64(int? raw) {
    return raw == null ? null : api2wire_box_i64(raw);
  }

  @protected
  int? api2wire_opt_box_i8(int? raw) {
    return raw == null ? null : api2wire_box_i8(raw);
  }

  @protected
  int? api2wire_opt_box_u8(int? raw) {
    return raw == null ? null : api2wire_box_u8(raw);
  }

  @protected
  Float32List? api2wire_opt_float_32_list(Float32List? raw) {
    return raw == null ? null : api2wire_float_32_list(raw);
  }

  @protected
  Float64List? api2wire_opt_float_64_list(Float64List? raw) {
    return raw == null ? null : api2wire_float_64_list(raw);
  }

  @protected
  Int32List? api2wire_opt_int_32_list(Int32List? raw) {
    return raw == null ? null : api2wire_int_32_list(raw);
  }

  @protected
  Int8List? api2wire_opt_int_8_list(Int8List? raw) {
    return raw == null ? null : api2wire_int_8_list(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_list_attribute(List<Attribute>? raw) {
    return raw == null ? null : api2wire_list_attribute(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_list_opt_box_autoadd_attribute(List<Attribute?>? raw) {
    return raw == null ? null : api2wire_list_opt_box_autoadd_attribute(raw);
  }

  @protected
  Uint8List? api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? null : api2wire_uint_8_list(raw);
  }

  @protected
  List<dynamic> api2wire_opt_vecs(OptVecs raw) {
    return [
      api2wire_list_opt_box_autoadd_i32(raw.i32),
      api2wire_list_opt_box_autoadd_weekdays(raw.enums),
      api2wire_list_opt_String(raw.strings),
      api2wire_list_opt_int_32_list(raw.buffers)
    ];
  }

  @protected
  List<dynamic> api2wire_sequences(Sequences raw) {
    return [api2wire_int_32_list(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_some_struct(SomeStruct raw) {
    return [api2wire_u32(raw.value)];
  }

  @protected
  List<dynamic> api2wire_speed(Speed raw) {
    if (raw is Speed_Unknown) {
      return [0];
    }
    if (raw is Speed_GPS) {
      return [1, api2wire_f64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_struct_with_enum(StructWithEnum raw) {
    return [api2wire_abc(raw.abc1), api2wire_abc(raw.abc2)];
  }

  @protected
  List<dynamic> api2wire_sum_with(SumWith raw) {
    return [api2wire_u32(raw.x)];
  }

  @protected
  List<dynamic> api2wire_test_id(TestId raw) {
    return [api2wire_i32_array_2(raw.field0)];
  }

  @protected
  Object api2wire_u64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  Uint8List api2wire_u8_array_1600(U8Array1600 raw) {
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List api2wire_u8_array_32(U8Array32 raw) {
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List api2wire_u8_array_8(U8Array8 raw) {
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_user_id(UserId raw) {
    return [api2wire_u32(raw.value)];
  }

// Section: finalizer

  late final Finalizer<PlatformPointer> _BoxDartDebugFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_BoxDartDebug);
  Finalizer<PlatformPointer> get BoxDartDebugFinalizer => _BoxDartDebugFinalizer;
  late final Finalizer<PlatformPointer> _FrbOpaqueReturnFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_FrbOpaqueReturn);
  Finalizer<PlatformPointer> get FrbOpaqueReturnFinalizer => _FrbOpaqueReturnFinalizer;
  late final Finalizer<PlatformPointer> _FrbOpaqueSyncReturnFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_FrbOpaqueSyncReturn);
  Finalizer<PlatformPointer> get FrbOpaqueSyncReturnFinalizer => _FrbOpaqueSyncReturnFinalizer;
  late final Finalizer<PlatformPointer> _HideDataFinalizer = Finalizer<PlatformPointer>(inner.drop_opaque_HideData);
  Finalizer<PlatformPointer> get HideDataFinalizer => _HideDataFinalizer;
  late final Finalizer<PlatformPointer> _I32Finalizer = Finalizer<PlatformPointer>(inner.drop_opaque_I32);
  Finalizer<PlatformPointer> get I32Finalizer => _I32Finalizer;
  late final Finalizer<PlatformPointer> _MutexHideDataFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_MutexHideData);
  Finalizer<PlatformPointer> get MutexHideDataFinalizer => _MutexHideDataFinalizer;
  late final Finalizer<PlatformPointer> _NonCloneDataFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_NonCloneData);
  Finalizer<PlatformPointer> get NonCloneDataFinalizer => _NonCloneDataFinalizer;
  late final Finalizer<PlatformPointer> _NonSendHideDataFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_NonSendHideData);
  Finalizer<PlatformPointer> get NonSendHideDataFinalizer => _NonSendHideDataFinalizer;
  late final Finalizer<PlatformPointer> _RwLockHideDataFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_RwLockHideData);
  Finalizer<PlatformPointer> get RwLockHideDataFinalizer => _RwLockHideDataFinalizer;
}

// Section: WASM wire module

@JS('wasm_bindgen')
external FlutterRustBridgeExampleSingleBlockTestWasmModule get wasmModule;

@JS()
@anonymous
class FlutterRustBridgeExampleSingleBlockTestWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external FlutterRustBridgeExampleSingleBlockTestWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_simple_adder(NativePortType port_, int a, int b);

  external dynamic /* int */ wire_simple_adder_sync(int a, int b);

  external dynamic /* void */ wire_primitive_types(
      NativePortType port_, int my_i32, Object my_i64, double my_f64, bool my_bool);

  external dynamic /* void */ wire_primitive_optional_types(
      NativePortType port_, int? my_i32, Object? my_i64, double? my_f64, bool? my_bool);

  external dynamic /* int */ wire_primitive_types_sync(int my_i32, Object my_i64, double my_f64, bool my_bool);

  external dynamic /* void */ wire_primitive_u32(NativePortType port_, int my_u32);

  external dynamic /* int */ wire_primitive_u32_sync(int my_u32);

  external dynamic /* void */ wire_handle_string(NativePortType port_, String s);

  external dynamic /* String */ wire_handle_string_sync(String s);

  external dynamic /* void */ wire_handle_return_unit(NativePortType port_);

  external dynamic /* void */ wire_handle_return_unit_sync();

  external dynamic /* void */ wire_handle_vec_u8(NativePortType port_, Uint8List v);

  external dynamic /* Uint8List */ wire_handle_vec_u8_sync(Uint8List v);

  external dynamic /* void */ wire_handle_vec_of_primitive(NativePortType port_, int n);

  external dynamic /* List<dynamic> */ wire_handle_vec_of_primitive_sync(int n);

  external dynamic /* void */ wire_handle_zero_copy_vec_of_primitive(NativePortType port_, int n);

  external dynamic /* List<dynamic> */ wire_handle_zero_copy_vec_of_primitive_sync(int n);

  external dynamic /* void */ wire_handle_struct(NativePortType port_, List<dynamic> arg, List<dynamic> boxed);

  external dynamic /* List<dynamic> */ wire_handle_struct_sync(List<dynamic> arg, List<dynamic> boxed);

  external dynamic /* List<dynamic> */ wire_handle_struct_sync_freezed(List<dynamic> arg, List<dynamic> boxed);

  external dynamic /* void */ wire_handle_newtype(NativePortType port_, List<dynamic> arg);

  external dynamic /* List<dynamic> */ wire_handle_newtype_sync(List<dynamic> arg);

  external dynamic /* void */ wire_handle_list_of_struct(NativePortType port_, List<dynamic> l);

  external dynamic /* List<dynamic> */ wire_handle_list_of_struct_sync(List<dynamic> l);

  external dynamic /* void */ wire_handle_string_list(NativePortType port_, List<String> names);

  external dynamic /* List<String> */ wire_handle_string_list_sync(List<String> names);

  external dynamic /* void */ wire_handle_complex_struct(NativePortType port_, List<dynamic> s);

  external dynamic /* List<dynamic> */ wire_handle_complex_struct_sync(List<dynamic> s);

  external dynamic /* void */ wire_handle_nested_struct(NativePortType port_, List<dynamic> s);

  external dynamic /* Uint8List */ wire_handle_sync_return(String mode);

  external dynamic /* void */ wire_handle_stream(NativePortType port_, String arg);

  external dynamic /* void */ wire_handle_stream_of_struct(NativePortType port_);

  external dynamic /* void */ wire_return_err(NativePortType port_);

  external dynamic /* void */ wire_return_panic(NativePortType port_);

  external dynamic /* void */ wire_handle_optional_return(NativePortType port_, double left, double right);

  external dynamic /* void */ wire_handle_optional_struct(NativePortType port_, String? document);

  external dynamic /* void */ wire_handle_optional_increment(NativePortType port_, List<dynamic>? opt);

  external dynamic /* void */ wire_handle_increment_boxed_optional(NativePortType port_, double? opt);

  external dynamic /* void */ wire_handle_vec_of_opts(NativePortType port_, List<dynamic> opt);

  external dynamic /* void */ wire_handle_option_box_arguments(NativePortType port_, int? i8box, int? u8box,
      int? i32box, Object? i64box, double? f64box, bool? boolbox, List<dynamic>? structbox);

  external dynamic /* void */ wire_print_note(NativePortType port_, List<dynamic> note);

  external dynamic /* void */ wire_handle_return_enum(NativePortType port_, String input);

  external dynamic /* void */ wire_handle_enum_parameter(NativePortType port_, int weekday);

  external dynamic /* List<dynamic> */ wire_handle_enum_sync_freezed(List<dynamic> value);

  external dynamic /* void */ wire_handle_customized_struct(NativePortType port_, List<dynamic> val);

  external dynamic /* void */ wire_handle_enum_struct(NativePortType port_, List<dynamic> val);

  external dynamic /* void */ wire_use_imported_struct(NativePortType port_, List<dynamic> my_struct);

  external dynamic /* void */ wire_use_imported_enum(NativePortType port_, int my_enum);

  external dynamic /* void */ wire_get_app_settings(NativePortType port_);

  external dynamic /* void */ wire_get_fallible_app_settings(NativePortType port_);

  external dynamic /* void */ wire_is_app_embedded(NativePortType port_, List<dynamic> app_settings);

  external dynamic /* void */ wire_app_settings_stream(NativePortType port_);

  external dynamic /* void */ wire_app_settings_vec_stream(NativePortType port_);

  external dynamic /* void */ wire_mirror_struct_stream(NativePortType port_);

  external dynamic /* void */ wire_mirror_tuple_stream(NativePortType port_);

  external dynamic /* void */ wire_get_message(NativePortType port_);

  external dynamic /* void */ wire_repeat_number(NativePortType port_, int num, int times);

  external dynamic /* void */ wire_repeat_sequence(NativePortType port_, int seq, int times);

  external dynamic /* void */ wire_first_number(NativePortType port_, List<dynamic> nums);

  external dynamic /* void */ wire_first_sequence(NativePortType port_, List<dynamic> seqs);

  external dynamic /* void */ wire_get_array(NativePortType port_);

  external dynamic /* void */ wire_get_complex_array(NativePortType port_);

  external dynamic /* void */ wire_get_usize(NativePortType port_, int u);

  external dynamic /* void */ wire_next_user_id(NativePortType port_, List<dynamic> user_id);

  external dynamic /* void */ wire_register_event_listener(NativePortType port_);

  external dynamic /* void */ wire_close_event_listener(NativePortType port_);

  external dynamic /* void */ wire_create_event(NativePortType port_, String address, String payload);

  external dynamic /* void */ wire_handle_stream_sink_at_1(NativePortType port_, int key, int max);

  external dynamic /* void */ wire_handle_stream_sink_at_2(NativePortType port_, int key, int max);

  external dynamic /* void */ wire_handle_stream_sink_at_3(NativePortType port_, int key, int max);

  external dynamic /* void */ wire_get_sum_struct(NativePortType port_);

  external dynamic /* void */ wire_get_sum_array(NativePortType port_, int a, int b, int c);

  external dynamic /* void */ wire_multiply_by_ten(NativePortType port_, List<dynamic> measure);

  external dynamic /* void */ wire_call_old_module_system(NativePortType port_);

  external dynamic /* void */ wire_call_new_module_system(NativePortType port_);

  external dynamic /* void */ wire_handle_big_buffers(NativePortType port_);

  external dynamic /* void */ wire_datetime_utc(NativePortType port_, Object d);

  external dynamic /* void */ wire_datetime_local(NativePortType port_, Object d);

  external dynamic /* void */ wire_naivedatetime(NativePortType port_, Object d);

  external dynamic /* void */ wire_optional_empty_datetime_utc(NativePortType port_, Object? d);

  external dynamic /* void */ wire_duration(NativePortType port_, Object d);

  external dynamic /* void */ wire_handle_timestamps(
      NativePortType port_, Object /* BigInt64Array */ timestamps, Object epoch);

  external dynamic /* void */ wire_handle_durations(
      NativePortType port_, Object /* BigInt64Array */ durations, Object since);

  external dynamic /* void */ wire_test_chrono(NativePortType port_);

  external dynamic /* void */ wire_test_precise_chrono(NativePortType port_);

  external dynamic /* void */ wire_how_long_does_it_take(NativePortType port_, List<dynamic> mine);

  external dynamic /* void */ wire_handle_uuid(NativePortType port_, Uint8List id);

  external dynamic /* void */ wire_handle_uuids(NativePortType port_, Uint8List ids);

  external dynamic /* void */ wire_handle_nested_uuids(NativePortType port_, List<dynamic> ids);

  external dynamic /* void */ wire_new_msgid(NativePortType port_, Uint8List id);

  external dynamic /* void */ wire_use_msgid(NativePortType port_, List<dynamic> id);

  external dynamic /* void */ wire_boxed_blob(NativePortType port_, Uint8List blob);

  external dynamic /* void */ wire_use_boxed_blob(NativePortType port_, List<dynamic> blob);

  external dynamic /* void */ wire_return_boxed_feed_id(NativePortType port_, Uint8List id);

  external dynamic /* void */ wire_return_boxed_raw_feed_id(NativePortType port_, List<dynamic> id);

  external dynamic /* void */ wire_test_id(NativePortType port_, List<dynamic> id);

  external dynamic /* void */ wire_last_number(NativePortType port_, Float64List array);

  external dynamic /* void */ wire_nested_id(NativePortType port_, List<dynamic> id);

  external dynamic /* String */ wire_sync_accept_dart_opaque(Object opaque);

  external dynamic /* void */ wire_async_accept_dart_opaque(NativePortType port_, Object opaque);

  external dynamic /* void */ wire_loop_back(NativePortType port_, Object opaque);

  external dynamic /* void */ wire_loop_back_option(NativePortType port_, Object opaque);

  external dynamic /* void */ wire_loop_back_array(NativePortType port_, Object opaque);

  external dynamic /* void */ wire_loop_back_vec(NativePortType port_, Object opaque);

  external dynamic /* void */ wire_loop_back_option_get(NativePortType port_, Object? opaque);

  external dynamic /* void */ wire_loop_back_array_get(NativePortType port_, List<dynamic> opaque);

  external dynamic /* void */ wire_loop_back_vec_get(NativePortType port_, List<dynamic> opaque);

  external dynamic /* String */ wire_unwrap_dart_opaque(Object opaque);

  external dynamic /* void */ wire_panic_unwrap_dart_opaque(NativePortType port_, Object opaque);

  external dynamic /* void */ wire_create_opaque(NativePortType port_);

  external dynamic /* void */ wire_create_option_opaque(NativePortType port_, Object? opaque);

  external dynamic /* Object */ wire_sync_create_opaque();

  external dynamic /* void */ wire_create_array_opaque_enum(NativePortType port_);

  external dynamic /* void */ wire_run_enum_opaque(NativePortType port_, List<dynamic> opaque);

  external dynamic /* void */ wire_run_opaque(NativePortType port_, Object opaque);

  external dynamic /* void */ wire_run_opaque_with_delay(NativePortType port_, Object opaque);

  external dynamic /* void */ wire_opaque_array(NativePortType port_);

  external dynamic /* Object */ wire_sync_create_non_clone();

  external dynamic /* void */ wire_run_non_clone(NativePortType port_, Object clone);

  external dynamic /* void */ wire_create_sync_opaque(NativePortType port_);

  external dynamic /* Object */ wire_sync_create_sync_opaque();

  external dynamic /* String */ wire_sync_run_opaque(Object opaque);

  external dynamic /* void */ wire_opaque_array_run(NativePortType port_, List<dynamic> data);

  external dynamic /* void */ wire_opaque_vec(NativePortType port_);

  external dynamic /* void */ wire_opaque_vec_run(NativePortType port_, List<dynamic> data);

  external dynamic /* void */ wire_create_nested_opaque(NativePortType port_);

  external dynamic /* Object */ wire_sync_loopback(Object opaque);

  external dynamic /* Object? */ wire_sync_option_loopback(Object? opaque);

  external dynamic /* String? */ wire_sync_option();

  external dynamic /* String? */ wire_sync_option_null();

  external dynamic /* Object? */ wire_sync_option_rust_opaque();

  external dynamic /* Object? */ wire_sync_option_dart_opaque(Object opaque);

  external dynamic /* void */ wire_sync_void();

  external dynamic /* void */ wire_run_nested_opaque(NativePortType port_, List<dynamic> opaque);

  external dynamic /* void */ wire_create_nested_dart_opaque(NativePortType port_, Object opaque1, Object opaque2);

  external dynamic /* void */ wire_get_nested_dart_opaque(NativePortType port_, List<dynamic> opaque);

  external dynamic /* void */ wire_create_enum_dart_opaque(NativePortType port_, Object opaque);

  external dynamic /* void */ wire_get_enum_dart_opaque(NativePortType port_, List<dynamic> opaque);

  external dynamic /* void */ wire_set_static_dart_opaque(NativePortType port_, Object opaque);

  external dynamic /* void */ wire_drop_static_dart_opaque(NativePortType port_);

  external dynamic /* void */ wire_unwrap_rust_opaque(NativePortType port_, Object opaque);

  external dynamic /* Object */ wire_return_non_droppable_dart_opaque(Object opaque);

  external dynamic /* void */ wire_frb_generator_test(NativePortType port_);

  external dynamic /* Object */ wire_frb_sync_generator_test();

  external dynamic /* void */ wire_handle_type_alias_id(NativePortType port_, Object input);

  external dynamic /* void */ wire_handle_type_nest_alias_id(NativePortType port_, Object input);

  external dynamic /* void */ wire_handle_type_alias_model(NativePortType port_, Object input);

  external dynamic /* void */ wire_empty_struct(NativePortType port_, List<dynamic> empty);

  external dynamic /* void */ wire_return_dart_dynamic(NativePortType port_);

  external dynamic /* void */ wire_test_raw_string_item_struct(NativePortType port_);

  external dynamic /* void */ wire_test_more_than_just_one_raw_string_struct(NativePortType port_);

  external dynamic /* void */ wire_test_raw_string_mirrored(NativePortType port_);

  external dynamic /* void */ wire_test_nested_raw_string_mirrored(NativePortType port_);

  external dynamic /* void */ wire_test_raw_string_enum_mirrored(NativePortType port_, bool nested);

  external dynamic /* void */ wire_test_list_of_raw_nested_string_mirrored(NativePortType port_);

  external dynamic /* void */ wire_test_fallible_of_raw_string_mirrored(NativePortType port_);

  external dynamic /* void */ wire_list_of_primitive_enums(NativePortType port_, List<dynamic> weekdays);

  external dynamic /* void */ wire_test_abc_enum(NativePortType port_, List<dynamic> abc);

  external dynamic /* void */ wire_test_contains_mirrored_sub_struct(NativePortType port_);

  external dynamic /* void */ wire_test_struct_with_enum(NativePortType port_, List<dynamic> se);

  external dynamic /* void */ wire_test_tuple(NativePortType port_, List<dynamic>? value);

  external dynamic /* void */ wire_test_tuple_2(NativePortType port_, List<dynamic> value);

  external dynamic /* List<dynamic> */ wire_sync_return_mirror();

  external dynamic /* void */ wire_macro_struct(NativePortType port_);

  external dynamic /* void */ wire_return_err_custom_error(NativePortType port_);

  external dynamic /* void */ wire_return_ok_custom_error(NativePortType port_);

  external dynamic /* void */ wire_return_error_variant(NativePortType port_, int variant);

  external dynamic /* void */ wire_return_custom_nested_error_1(NativePortType port_);

  external dynamic /* void */ wire_return_custom_nested_error_1_variant1(NativePortType port_);

  external dynamic /* void */ wire_return_custom_nested_error_2(NativePortType port_);

  external dynamic /* void */ wire_return_custom_struct_error(NativePortType port_);

  external dynamic /* void */ wire_sync_return_custom_struct_error();

  external dynamic /* void */ wire_return_custom_struct_ok(NativePortType port_);

  external dynamic /* void */ wire_throw_anyhow(NativePortType port_);

  external dynamic /* void */ wire_panic_with_custom_result(NativePortType port_);

  external dynamic /* void */ wire_stream_sink_throw_anyhow(NativePortType port_);

  external dynamic /* void */ wire_as_string__method__Event(NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_sum__method__SumWith(NativePortType port_, List<dynamic> that, int y, int z);

  external dynamic /* void */ wire_new__static_method__ConcatenateWith(NativePortType port_, String a);

  external dynamic /* void */ wire_concatenate__method__ConcatenateWith(
      NativePortType port_, List<dynamic> that, String b);

  external dynamic /* void */ wire_concatenate_static__static_method__ConcatenateWith(
      NativePortType port_, String a, String b);

  external dynamic /* void */ wire_handle_some_stream_sink__method__ConcatenateWith(
      NativePortType port_, List<dynamic> that, int key, int max);

  external dynamic /* void */ wire_handle_some_stream_sink_at_1__method__ConcatenateWith(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_handle_some_static_stream_sink__static_method__ConcatenateWith(
      NativePortType port_, int key, int max);

  external dynamic /* void */ wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(
      NativePortType port_);

  external dynamic /* void */ wire_new__static_method__SomeStruct(NativePortType port_, int value);

  external dynamic /* void */ wire_static_return_err_custom_error__static_method__SomeStruct(NativePortType port_);

  external dynamic /* void */ wire_static_return_ok_custom_error__static_method__SomeStruct(NativePortType port_);

  external dynamic /* void */ wire_non_static_return_err_custom_error__method__SomeStruct(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_non_static_return_ok_custom_error__method__SomeStruct(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_new__static_method__CustomStruct(NativePortType port_, String message);

  external dynamic /* void */ wire_static_return_custom_struct_error__static_method__CustomStruct(NativePortType port_);

  external dynamic /* void */ wire_static_return_custom_struct_ok__static_method__CustomStruct(NativePortType port_);

  external dynamic /* void */ wire_nonstatic_return_custom_struct_error__method__CustomStruct(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_nonstatic_return_custom_struct_ok__method__CustomStruct(
      NativePortType port_, List<dynamic> that);

  external dynamic /*  */ drop_opaque_BoxDartDebug(ptr);

  external int /* *const c_void */ share_opaque_BoxDartDebug(ptr);

  external dynamic /*  */ drop_opaque_FrbOpaqueReturn(ptr);

  external int /* *const c_void */ share_opaque_FrbOpaqueReturn(ptr);

  external dynamic /*  */ drop_opaque_FrbOpaqueSyncReturn(ptr);

  external int /* *const c_void */ share_opaque_FrbOpaqueSyncReturn(ptr);

  external dynamic /*  */ drop_opaque_HideData(ptr);

  external int /* *const c_void */ share_opaque_HideData(ptr);

  external dynamic /*  */ drop_opaque_I32(ptr);

  external int /* *const c_void */ share_opaque_I32(ptr);

  external dynamic /*  */ drop_opaque_MutexHideData(ptr);

  external int /* *const c_void */ share_opaque_MutexHideData(ptr);

  external dynamic /*  */ drop_opaque_NonCloneData(ptr);

  external int /* *const c_void */ share_opaque_NonCloneData(ptr);

  external dynamic /*  */ drop_opaque_NonSendHideData(ptr);

  external int /* *const c_void */ share_opaque_NonSendHideData(ptr);

  external dynamic /*  */ drop_opaque_RwLockHideData(ptr);

  external int /* *const c_void */ share_opaque_RwLockHideData(ptr);
}

// Section: WASM wire connector

class FlutterRustBridgeExampleSingleBlockTestWire
    extends FlutterRustBridgeWasmWireBase<FlutterRustBridgeExampleSingleBlockTestWasmModule> {
  FlutterRustBridgeExampleSingleBlockTestWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<FlutterRustBridgeExampleSingleBlockTestWasmModule>(module));

  void wire_simple_adder(NativePortType port_, int a, int b) => wasmModule.wire_simple_adder(port_, a, b);

  dynamic /* int */ wire_simple_adder_sync(int a, int b) => wasmModule.wire_simple_adder_sync(a, b);

  void wire_primitive_types(NativePortType port_, int my_i32, Object my_i64, double my_f64, bool my_bool) =>
      wasmModule.wire_primitive_types(port_, my_i32, my_i64, my_f64, my_bool);

  void wire_primitive_optional_types(
          NativePortType port_, int? my_i32, Object? my_i64, double? my_f64, bool? my_bool) =>
      wasmModule.wire_primitive_optional_types(port_, my_i32, my_i64, my_f64, my_bool);

  dynamic /* int */ wire_primitive_types_sync(int my_i32, Object my_i64, double my_f64, bool my_bool) =>
      wasmModule.wire_primitive_types_sync(my_i32, my_i64, my_f64, my_bool);

  void wire_primitive_u32(NativePortType port_, int my_u32) => wasmModule.wire_primitive_u32(port_, my_u32);

  dynamic /* int */ wire_primitive_u32_sync(int my_u32) => wasmModule.wire_primitive_u32_sync(my_u32);

  void wire_handle_string(NativePortType port_, String s) => wasmModule.wire_handle_string(port_, s);

  dynamic /* String */ wire_handle_string_sync(String s) => wasmModule.wire_handle_string_sync(s);

  void wire_handle_return_unit(NativePortType port_) => wasmModule.wire_handle_return_unit(port_);

  dynamic /* void */ wire_handle_return_unit_sync() => wasmModule.wire_handle_return_unit_sync();

  void wire_handle_vec_u8(NativePortType port_, Uint8List v) => wasmModule.wire_handle_vec_u8(port_, v);

  dynamic /* Uint8List */ wire_handle_vec_u8_sync(Uint8List v) => wasmModule.wire_handle_vec_u8_sync(v);

  void wire_handle_vec_of_primitive(NativePortType port_, int n) => wasmModule.wire_handle_vec_of_primitive(port_, n);

  dynamic /* List<dynamic> */ wire_handle_vec_of_primitive_sync(int n) =>
      wasmModule.wire_handle_vec_of_primitive_sync(n);

  void wire_handle_zero_copy_vec_of_primitive(NativePortType port_, int n) =>
      wasmModule.wire_handle_zero_copy_vec_of_primitive(port_, n);

  dynamic /* List<dynamic> */ wire_handle_zero_copy_vec_of_primitive_sync(int n) =>
      wasmModule.wire_handle_zero_copy_vec_of_primitive_sync(n);

  void wire_handle_struct(NativePortType port_, List<dynamic> arg, List<dynamic> boxed) =>
      wasmModule.wire_handle_struct(port_, arg, boxed);

  dynamic /* List<dynamic> */ wire_handle_struct_sync(List<dynamic> arg, List<dynamic> boxed) =>
      wasmModule.wire_handle_struct_sync(arg, boxed);

  dynamic /* List<dynamic> */ wire_handle_struct_sync_freezed(List<dynamic> arg, List<dynamic> boxed) =>
      wasmModule.wire_handle_struct_sync_freezed(arg, boxed);

  void wire_handle_newtype(NativePortType port_, List<dynamic> arg) => wasmModule.wire_handle_newtype(port_, arg);

  dynamic /* List<dynamic> */ wire_handle_newtype_sync(List<dynamic> arg) => wasmModule.wire_handle_newtype_sync(arg);

  void wire_handle_list_of_struct(NativePortType port_, List<dynamic> l) =>
      wasmModule.wire_handle_list_of_struct(port_, l);

  dynamic /* List<dynamic> */ wire_handle_list_of_struct_sync(List<dynamic> l) =>
      wasmModule.wire_handle_list_of_struct_sync(l);

  void wire_handle_string_list(NativePortType port_, List<String> names) =>
      wasmModule.wire_handle_string_list(port_, names);

  dynamic /* List<String> */ wire_handle_string_list_sync(List<String> names) =>
      wasmModule.wire_handle_string_list_sync(names);

  void wire_handle_complex_struct(NativePortType port_, List<dynamic> s) =>
      wasmModule.wire_handle_complex_struct(port_, s);

  dynamic /* List<dynamic> */ wire_handle_complex_struct_sync(List<dynamic> s) =>
      wasmModule.wire_handle_complex_struct_sync(s);

  void wire_handle_nested_struct(NativePortType port_, List<dynamic> s) =>
      wasmModule.wire_handle_nested_struct(port_, s);

  dynamic /* Uint8List */ wire_handle_sync_return(String mode) => wasmModule.wire_handle_sync_return(mode);

  void wire_handle_stream(NativePortType port_, String arg) => wasmModule.wire_handle_stream(port_, arg);

  void wire_handle_stream_of_struct(NativePortType port_) => wasmModule.wire_handle_stream_of_struct(port_);

  void wire_return_err(NativePortType port_) => wasmModule.wire_return_err(port_);

  void wire_return_panic(NativePortType port_) => wasmModule.wire_return_panic(port_);

  void wire_handle_optional_return(NativePortType port_, double left, double right) =>
      wasmModule.wire_handle_optional_return(port_, left, right);

  void wire_handle_optional_struct(NativePortType port_, String? document) =>
      wasmModule.wire_handle_optional_struct(port_, document);

  void wire_handle_optional_increment(NativePortType port_, List<dynamic>? opt) =>
      wasmModule.wire_handle_optional_increment(port_, opt);

  void wire_handle_increment_boxed_optional(NativePortType port_, double? opt) =>
      wasmModule.wire_handle_increment_boxed_optional(port_, opt);

  void wire_handle_vec_of_opts(NativePortType port_, List<dynamic> opt) =>
      wasmModule.wire_handle_vec_of_opts(port_, opt);

  void wire_handle_option_box_arguments(NativePortType port_, int? i8box, int? u8box, int? i32box, Object? i64box,
          double? f64box, bool? boolbox, List<dynamic>? structbox) =>
      wasmModule.wire_handle_option_box_arguments(port_, i8box, u8box, i32box, i64box, f64box, boolbox, structbox);

  void wire_print_note(NativePortType port_, List<dynamic> note) => wasmModule.wire_print_note(port_, note);

  void wire_handle_return_enum(NativePortType port_, String input) => wasmModule.wire_handle_return_enum(port_, input);

  void wire_handle_enum_parameter(NativePortType port_, int weekday) =>
      wasmModule.wire_handle_enum_parameter(port_, weekday);

  dynamic /* List<dynamic> */ wire_handle_enum_sync_freezed(List<dynamic> value) =>
      wasmModule.wire_handle_enum_sync_freezed(value);

  void wire_handle_customized_struct(NativePortType port_, List<dynamic> val) =>
      wasmModule.wire_handle_customized_struct(port_, val);

  void wire_handle_enum_struct(NativePortType port_, List<dynamic> val) =>
      wasmModule.wire_handle_enum_struct(port_, val);

  void wire_use_imported_struct(NativePortType port_, List<dynamic> my_struct) =>
      wasmModule.wire_use_imported_struct(port_, my_struct);

  void wire_use_imported_enum(NativePortType port_, int my_enum) => wasmModule.wire_use_imported_enum(port_, my_enum);

  void wire_get_app_settings(NativePortType port_) => wasmModule.wire_get_app_settings(port_);

  void wire_get_fallible_app_settings(NativePortType port_) => wasmModule.wire_get_fallible_app_settings(port_);

  void wire_is_app_embedded(NativePortType port_, List<dynamic> app_settings) =>
      wasmModule.wire_is_app_embedded(port_, app_settings);

  void wire_app_settings_stream(NativePortType port_) => wasmModule.wire_app_settings_stream(port_);

  void wire_app_settings_vec_stream(NativePortType port_) => wasmModule.wire_app_settings_vec_stream(port_);

  void wire_mirror_struct_stream(NativePortType port_) => wasmModule.wire_mirror_struct_stream(port_);

  void wire_mirror_tuple_stream(NativePortType port_) => wasmModule.wire_mirror_tuple_stream(port_);

  void wire_get_message(NativePortType port_) => wasmModule.wire_get_message(port_);

  void wire_repeat_number(NativePortType port_, int num, int times) => wasmModule.wire_repeat_number(port_, num, times);

  void wire_repeat_sequence(NativePortType port_, int seq, int times) =>
      wasmModule.wire_repeat_sequence(port_, seq, times);

  void wire_first_number(NativePortType port_, List<dynamic> nums) => wasmModule.wire_first_number(port_, nums);

  void wire_first_sequence(NativePortType port_, List<dynamic> seqs) => wasmModule.wire_first_sequence(port_, seqs);

  void wire_get_array(NativePortType port_) => wasmModule.wire_get_array(port_);

  void wire_get_complex_array(NativePortType port_) => wasmModule.wire_get_complex_array(port_);

  void wire_get_usize(NativePortType port_, int u) => wasmModule.wire_get_usize(port_, u);

  void wire_next_user_id(NativePortType port_, List<dynamic> user_id) => wasmModule.wire_next_user_id(port_, user_id);

  void wire_register_event_listener(NativePortType port_) => wasmModule.wire_register_event_listener(port_);

  void wire_close_event_listener(NativePortType port_) => wasmModule.wire_close_event_listener(port_);

  void wire_create_event(NativePortType port_, String address, String payload) =>
      wasmModule.wire_create_event(port_, address, payload);

  void wire_handle_stream_sink_at_1(NativePortType port_, int key, int max) =>
      wasmModule.wire_handle_stream_sink_at_1(port_, key, max);

  void wire_handle_stream_sink_at_2(NativePortType port_, int key, int max) =>
      wasmModule.wire_handle_stream_sink_at_2(port_, key, max);

  void wire_handle_stream_sink_at_3(NativePortType port_, int key, int max) =>
      wasmModule.wire_handle_stream_sink_at_3(port_, key, max);

  void wire_get_sum_struct(NativePortType port_) => wasmModule.wire_get_sum_struct(port_);

  void wire_get_sum_array(NativePortType port_, int a, int b, int c) => wasmModule.wire_get_sum_array(port_, a, b, c);

  void wire_multiply_by_ten(NativePortType port_, List<dynamic> measure) =>
      wasmModule.wire_multiply_by_ten(port_, measure);

  void wire_call_old_module_system(NativePortType port_) => wasmModule.wire_call_old_module_system(port_);

  void wire_call_new_module_system(NativePortType port_) => wasmModule.wire_call_new_module_system(port_);

  void wire_handle_big_buffers(NativePortType port_) => wasmModule.wire_handle_big_buffers(port_);

  void wire_datetime_utc(NativePortType port_, Object d) => wasmModule.wire_datetime_utc(port_, d);

  void wire_datetime_local(NativePortType port_, Object d) => wasmModule.wire_datetime_local(port_, d);

  void wire_naivedatetime(NativePortType port_, Object d) => wasmModule.wire_naivedatetime(port_, d);

  void wire_optional_empty_datetime_utc(NativePortType port_, Object? d) =>
      wasmModule.wire_optional_empty_datetime_utc(port_, d);

  void wire_duration(NativePortType port_, Object d) => wasmModule.wire_duration(port_, d);

  void wire_handle_timestamps(NativePortType port_, Object /* BigInt64Array */ timestamps, Object epoch) =>
      wasmModule.wire_handle_timestamps(port_, timestamps, epoch);

  void wire_handle_durations(NativePortType port_, Object /* BigInt64Array */ durations, Object since) =>
      wasmModule.wire_handle_durations(port_, durations, since);

  void wire_test_chrono(NativePortType port_) => wasmModule.wire_test_chrono(port_);

  void wire_test_precise_chrono(NativePortType port_) => wasmModule.wire_test_precise_chrono(port_);

  void wire_how_long_does_it_take(NativePortType port_, List<dynamic> mine) =>
      wasmModule.wire_how_long_does_it_take(port_, mine);

  void wire_handle_uuid(NativePortType port_, Uint8List id) => wasmModule.wire_handle_uuid(port_, id);

  void wire_handle_uuids(NativePortType port_, Uint8List ids) => wasmModule.wire_handle_uuids(port_, ids);

  void wire_handle_nested_uuids(NativePortType port_, List<dynamic> ids) =>
      wasmModule.wire_handle_nested_uuids(port_, ids);

  void wire_new_msgid(NativePortType port_, Uint8List id) => wasmModule.wire_new_msgid(port_, id);

  void wire_use_msgid(NativePortType port_, List<dynamic> id) => wasmModule.wire_use_msgid(port_, id);

  void wire_boxed_blob(NativePortType port_, Uint8List blob) => wasmModule.wire_boxed_blob(port_, blob);

  void wire_use_boxed_blob(NativePortType port_, List<dynamic> blob) => wasmModule.wire_use_boxed_blob(port_, blob);

  void wire_return_boxed_feed_id(NativePortType port_, Uint8List id) => wasmModule.wire_return_boxed_feed_id(port_, id);

  void wire_return_boxed_raw_feed_id(NativePortType port_, List<dynamic> id) =>
      wasmModule.wire_return_boxed_raw_feed_id(port_, id);

  void wire_test_id(NativePortType port_, List<dynamic> id) => wasmModule.wire_test_id(port_, id);

  void wire_last_number(NativePortType port_, Float64List array) => wasmModule.wire_last_number(port_, array);

  void wire_nested_id(NativePortType port_, List<dynamic> id) => wasmModule.wire_nested_id(port_, id);

  dynamic /* String */ wire_sync_accept_dart_opaque(Object opaque) => wasmModule.wire_sync_accept_dart_opaque(opaque);

  void wire_async_accept_dart_opaque(NativePortType port_, Object opaque) =>
      wasmModule.wire_async_accept_dart_opaque(port_, opaque);

  void wire_loop_back(NativePortType port_, Object opaque) => wasmModule.wire_loop_back(port_, opaque);

  void wire_loop_back_option(NativePortType port_, Object opaque) => wasmModule.wire_loop_back_option(port_, opaque);

  void wire_loop_back_array(NativePortType port_, Object opaque) => wasmModule.wire_loop_back_array(port_, opaque);

  void wire_loop_back_vec(NativePortType port_, Object opaque) => wasmModule.wire_loop_back_vec(port_, opaque);

  void wire_loop_back_option_get(NativePortType port_, Object? opaque) =>
      wasmModule.wire_loop_back_option_get(port_, opaque);

  void wire_loop_back_array_get(NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_loop_back_array_get(port_, opaque);

  void wire_loop_back_vec_get(NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_loop_back_vec_get(port_, opaque);

  dynamic /* String */ wire_unwrap_dart_opaque(Object opaque) => wasmModule.wire_unwrap_dart_opaque(opaque);

  void wire_panic_unwrap_dart_opaque(NativePortType port_, Object opaque) =>
      wasmModule.wire_panic_unwrap_dart_opaque(port_, opaque);

  void wire_create_opaque(NativePortType port_) => wasmModule.wire_create_opaque(port_);

  void wire_create_option_opaque(NativePortType port_, Object? opaque) =>
      wasmModule.wire_create_option_opaque(port_, opaque);

  dynamic /* Object */ wire_sync_create_opaque() => wasmModule.wire_sync_create_opaque();

  void wire_create_array_opaque_enum(NativePortType port_) => wasmModule.wire_create_array_opaque_enum(port_);

  void wire_run_enum_opaque(NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_run_enum_opaque(port_, opaque);

  void wire_run_opaque(NativePortType port_, Object opaque) => wasmModule.wire_run_opaque(port_, opaque);

  void wire_run_opaque_with_delay(NativePortType port_, Object opaque) =>
      wasmModule.wire_run_opaque_with_delay(port_, opaque);

  void wire_opaque_array(NativePortType port_) => wasmModule.wire_opaque_array(port_);

  dynamic /* Object */ wire_sync_create_non_clone() => wasmModule.wire_sync_create_non_clone();

  void wire_run_non_clone(NativePortType port_, Object clone) => wasmModule.wire_run_non_clone(port_, clone);

  void wire_create_sync_opaque(NativePortType port_) => wasmModule.wire_create_sync_opaque(port_);

  dynamic /* Object */ wire_sync_create_sync_opaque() => wasmModule.wire_sync_create_sync_opaque();

  dynamic /* String */ wire_sync_run_opaque(Object opaque) => wasmModule.wire_sync_run_opaque(opaque);

  void wire_opaque_array_run(NativePortType port_, List<dynamic> data) => wasmModule.wire_opaque_array_run(port_, data);

  void wire_opaque_vec(NativePortType port_) => wasmModule.wire_opaque_vec(port_);

  void wire_opaque_vec_run(NativePortType port_, List<dynamic> data) => wasmModule.wire_opaque_vec_run(port_, data);

  void wire_create_nested_opaque(NativePortType port_) => wasmModule.wire_create_nested_opaque(port_);

  dynamic /* Object */ wire_sync_loopback(Object opaque) => wasmModule.wire_sync_loopback(opaque);

  dynamic /* Object? */ wire_sync_option_loopback(Object? opaque) => wasmModule.wire_sync_option_loopback(opaque);

  dynamic /* String? */ wire_sync_option() => wasmModule.wire_sync_option();

  dynamic /* String? */ wire_sync_option_null() => wasmModule.wire_sync_option_null();

  dynamic /* Object? */ wire_sync_option_rust_opaque() => wasmModule.wire_sync_option_rust_opaque();

  dynamic /* Object? */ wire_sync_option_dart_opaque(Object opaque) => wasmModule.wire_sync_option_dart_opaque(opaque);

  dynamic /* void */ wire_sync_void() => wasmModule.wire_sync_void();

  void wire_run_nested_opaque(NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_run_nested_opaque(port_, opaque);

  void wire_create_nested_dart_opaque(NativePortType port_, Object opaque1, Object opaque2) =>
      wasmModule.wire_create_nested_dart_opaque(port_, opaque1, opaque2);

  void wire_get_nested_dart_opaque(NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_get_nested_dart_opaque(port_, opaque);

  void wire_create_enum_dart_opaque(NativePortType port_, Object opaque) =>
      wasmModule.wire_create_enum_dart_opaque(port_, opaque);

  void wire_get_enum_dart_opaque(NativePortType port_, List<dynamic> opaque) =>
      wasmModule.wire_get_enum_dart_opaque(port_, opaque);

  void wire_set_static_dart_opaque(NativePortType port_, Object opaque) =>
      wasmModule.wire_set_static_dart_opaque(port_, opaque);

  void wire_drop_static_dart_opaque(NativePortType port_) => wasmModule.wire_drop_static_dart_opaque(port_);

  void wire_unwrap_rust_opaque(NativePortType port_, Object opaque) =>
      wasmModule.wire_unwrap_rust_opaque(port_, opaque);

  dynamic /* Object */ wire_return_non_droppable_dart_opaque(Object opaque) =>
      wasmModule.wire_return_non_droppable_dart_opaque(opaque);

  void wire_frb_generator_test(NativePortType port_) => wasmModule.wire_frb_generator_test(port_);

  dynamic /* Object */ wire_frb_sync_generator_test() => wasmModule.wire_frb_sync_generator_test();

  void wire_handle_type_alias_id(NativePortType port_, Object input) =>
      wasmModule.wire_handle_type_alias_id(port_, input);

  void wire_handle_type_nest_alias_id(NativePortType port_, Object input) =>
      wasmModule.wire_handle_type_nest_alias_id(port_, input);

  void wire_handle_type_alias_model(NativePortType port_, Object input) =>
      wasmModule.wire_handle_type_alias_model(port_, input);

  void wire_empty_struct(NativePortType port_, List<dynamic> empty) => wasmModule.wire_empty_struct(port_, empty);

  void wire_return_dart_dynamic(NativePortType port_) => wasmModule.wire_return_dart_dynamic(port_);

  void wire_test_raw_string_item_struct(NativePortType port_) => wasmModule.wire_test_raw_string_item_struct(port_);

  void wire_test_more_than_just_one_raw_string_struct(NativePortType port_) =>
      wasmModule.wire_test_more_than_just_one_raw_string_struct(port_);

  void wire_test_raw_string_mirrored(NativePortType port_) => wasmModule.wire_test_raw_string_mirrored(port_);

  void wire_test_nested_raw_string_mirrored(NativePortType port_) =>
      wasmModule.wire_test_nested_raw_string_mirrored(port_);

  void wire_test_raw_string_enum_mirrored(NativePortType port_, bool nested) =>
      wasmModule.wire_test_raw_string_enum_mirrored(port_, nested);

  void wire_test_list_of_raw_nested_string_mirrored(NativePortType port_) =>
      wasmModule.wire_test_list_of_raw_nested_string_mirrored(port_);

  void wire_test_fallible_of_raw_string_mirrored(NativePortType port_) =>
      wasmModule.wire_test_fallible_of_raw_string_mirrored(port_);

  void wire_list_of_primitive_enums(NativePortType port_, List<dynamic> weekdays) =>
      wasmModule.wire_list_of_primitive_enums(port_, weekdays);

  void wire_test_abc_enum(NativePortType port_, List<dynamic> abc) => wasmModule.wire_test_abc_enum(port_, abc);

  void wire_test_contains_mirrored_sub_struct(NativePortType port_) =>
      wasmModule.wire_test_contains_mirrored_sub_struct(port_);

  void wire_test_struct_with_enum(NativePortType port_, List<dynamic> se) =>
      wasmModule.wire_test_struct_with_enum(port_, se);

  void wire_test_tuple(NativePortType port_, List<dynamic>? value) => wasmModule.wire_test_tuple(port_, value);

  void wire_test_tuple_2(NativePortType port_, List<dynamic> value) => wasmModule.wire_test_tuple_2(port_, value);

  dynamic /* List<dynamic> */ wire_sync_return_mirror() => wasmModule.wire_sync_return_mirror();

  void wire_macro_struct(NativePortType port_) => wasmModule.wire_macro_struct(port_);

  void wire_return_err_custom_error(NativePortType port_) => wasmModule.wire_return_err_custom_error(port_);

  void wire_return_ok_custom_error(NativePortType port_) => wasmModule.wire_return_ok_custom_error(port_);

  void wire_return_error_variant(NativePortType port_, int variant) =>
      wasmModule.wire_return_error_variant(port_, variant);

  void wire_return_custom_nested_error_1(NativePortType port_) => wasmModule.wire_return_custom_nested_error_1(port_);

  void wire_return_custom_nested_error_1_variant1(NativePortType port_) =>
      wasmModule.wire_return_custom_nested_error_1_variant1(port_);

  void wire_return_custom_nested_error_2(NativePortType port_) => wasmModule.wire_return_custom_nested_error_2(port_);

  void wire_return_custom_struct_error(NativePortType port_) => wasmModule.wire_return_custom_struct_error(port_);

  dynamic /* void */ wire_sync_return_custom_struct_error() => wasmModule.wire_sync_return_custom_struct_error();

  void wire_return_custom_struct_ok(NativePortType port_) => wasmModule.wire_return_custom_struct_ok(port_);

  void wire_throw_anyhow(NativePortType port_) => wasmModule.wire_throw_anyhow(port_);

  void wire_panic_with_custom_result(NativePortType port_) => wasmModule.wire_panic_with_custom_result(port_);

  void wire_stream_sink_throw_anyhow(NativePortType port_) => wasmModule.wire_stream_sink_throw_anyhow(port_);

  void wire_as_string__method__Event(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_as_string__method__Event(port_, that);

  void wire_sum__method__SumWith(NativePortType port_, List<dynamic> that, int y, int z) =>
      wasmModule.wire_sum__method__SumWith(port_, that, y, z);

  void wire_new__static_method__ConcatenateWith(NativePortType port_, String a) =>
      wasmModule.wire_new__static_method__ConcatenateWith(port_, a);

  void wire_concatenate__method__ConcatenateWith(NativePortType port_, List<dynamic> that, String b) =>
      wasmModule.wire_concatenate__method__ConcatenateWith(port_, that, b);

  void wire_concatenate_static__static_method__ConcatenateWith(NativePortType port_, String a, String b) =>
      wasmModule.wire_concatenate_static__static_method__ConcatenateWith(port_, a, b);

  void wire_handle_some_stream_sink__method__ConcatenateWith(
          NativePortType port_, List<dynamic> that, int key, int max) =>
      wasmModule.wire_handle_some_stream_sink__method__ConcatenateWith(port_, that, key, max);

  void wire_handle_some_stream_sink_at_1__method__ConcatenateWith(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_handle_some_stream_sink_at_1__method__ConcatenateWith(port_, that);

  void wire_handle_some_static_stream_sink__static_method__ConcatenateWith(NativePortType port_, int key, int max) =>
      wasmModule.wire_handle_some_static_stream_sink__static_method__ConcatenateWith(port_, key, max);

  void wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(NativePortType port_) =>
      wasmModule.wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(port_);

  void wire_new__static_method__SomeStruct(NativePortType port_, int value) =>
      wasmModule.wire_new__static_method__SomeStruct(port_, value);

  void wire_static_return_err_custom_error__static_method__SomeStruct(NativePortType port_) =>
      wasmModule.wire_static_return_err_custom_error__static_method__SomeStruct(port_);

  void wire_static_return_ok_custom_error__static_method__SomeStruct(NativePortType port_) =>
      wasmModule.wire_static_return_ok_custom_error__static_method__SomeStruct(port_);

  void wire_non_static_return_err_custom_error__method__SomeStruct(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_non_static_return_err_custom_error__method__SomeStruct(port_, that);

  void wire_non_static_return_ok_custom_error__method__SomeStruct(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_non_static_return_ok_custom_error__method__SomeStruct(port_, that);

  void wire_new__static_method__CustomStruct(NativePortType port_, String message) =>
      wasmModule.wire_new__static_method__CustomStruct(port_, message);

  void wire_static_return_custom_struct_error__static_method__CustomStruct(NativePortType port_) =>
      wasmModule.wire_static_return_custom_struct_error__static_method__CustomStruct(port_);

  void wire_static_return_custom_struct_ok__static_method__CustomStruct(NativePortType port_) =>
      wasmModule.wire_static_return_custom_struct_ok__static_method__CustomStruct(port_);

  void wire_nonstatic_return_custom_struct_error__method__CustomStruct(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_nonstatic_return_custom_struct_error__method__CustomStruct(port_, that);

  void wire_nonstatic_return_custom_struct_ok__method__CustomStruct(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_nonstatic_return_custom_struct_ok__method__CustomStruct(port_, that);

  dynamic /*  */ drop_opaque_BoxDartDebug(ptr) => wasmModule.drop_opaque_BoxDartDebug(ptr);

  int /* *const c_void */ share_opaque_BoxDartDebug(ptr) => wasmModule.share_opaque_BoxDartDebug(ptr);

  dynamic /*  */ drop_opaque_FrbOpaqueReturn(ptr) => wasmModule.drop_opaque_FrbOpaqueReturn(ptr);

  int /* *const c_void */ share_opaque_FrbOpaqueReturn(ptr) => wasmModule.share_opaque_FrbOpaqueReturn(ptr);

  dynamic /*  */ drop_opaque_FrbOpaqueSyncReturn(ptr) => wasmModule.drop_opaque_FrbOpaqueSyncReturn(ptr);

  int /* *const c_void */ share_opaque_FrbOpaqueSyncReturn(ptr) => wasmModule.share_opaque_FrbOpaqueSyncReturn(ptr);

  dynamic /*  */ drop_opaque_HideData(ptr) => wasmModule.drop_opaque_HideData(ptr);

  int /* *const c_void */ share_opaque_HideData(ptr) => wasmModule.share_opaque_HideData(ptr);

  dynamic /*  */ drop_opaque_I32(ptr) => wasmModule.drop_opaque_I32(ptr);

  int /* *const c_void */ share_opaque_I32(ptr) => wasmModule.share_opaque_I32(ptr);

  dynamic /*  */ drop_opaque_MutexHideData(ptr) => wasmModule.drop_opaque_MutexHideData(ptr);

  int /* *const c_void */ share_opaque_MutexHideData(ptr) => wasmModule.share_opaque_MutexHideData(ptr);

  dynamic /*  */ drop_opaque_NonCloneData(ptr) => wasmModule.drop_opaque_NonCloneData(ptr);

  int /* *const c_void */ share_opaque_NonCloneData(ptr) => wasmModule.share_opaque_NonCloneData(ptr);

  dynamic /*  */ drop_opaque_NonSendHideData(ptr) => wasmModule.drop_opaque_NonSendHideData(ptr);

  int /* *const c_void */ share_opaque_NonSendHideData(ptr) => wasmModule.share_opaque_NonSendHideData(ptr);

  dynamic /*  */ drop_opaque_RwLockHideData(ptr) => wasmModule.drop_opaque_RwLockHideData(ptr);

  int /* *const c_void */ share_opaque_RwLockHideData(ptr) => wasmModule.share_opaque_RwLockHideData(ptr);
}
