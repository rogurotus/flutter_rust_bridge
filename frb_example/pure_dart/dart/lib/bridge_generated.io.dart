// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class FlutterRustBridgeExampleSingleBlockTestPlatform
    extends FlutterRustBridgeBase<FlutterRustBridgeExampleSingleBlockTestWire> {
  FlutterRustBridgeExampleSingleBlockTestPlatform(ffi.DynamicLibrary dylib)
      : super(FlutterRustBridgeExampleSingleBlockTestWire(dylib));

// Section: api2wire

  @protected
  wire_BoxDartDebug api2wire_BoxDartDebug(BoxDartDebug raw) {
    final ptr = inner.new_BoxDartDebug();
    _api_fill_to_wire_BoxDartDebug(raw, ptr);
    return ptr;
  }

  @protected
  int api2wire_Chrono_Duration(Duration raw) {
    return api2wire_i64(raw.inMicroseconds);
  }

  @protected
  ffi.Pointer<wire_int_64_list> api2wire_Chrono_DurationList(List<Duration> raw) {
    final ans = Int64List(raw.length);
    for (var i = 0; i < raw.length; ++i) ans[i] = api2wire_Chrono_Duration(raw[i]);
    return api2wire_int_64_list(ans);
  }

  @protected
  int api2wire_Chrono_Local(DateTime raw) {
    return api2wire_i64(raw.microsecondsSinceEpoch);
  }

  @protected
  int api2wire_Chrono_Naive(DateTime raw) {
    return api2wire_i64(raw.microsecondsSinceEpoch);
  }

  @protected
  ffi.Pointer<wire_int_64_list> api2wire_Chrono_NaiveList(List<DateTime> raw) {
    final ans = Int64List(raw.length);
    for (var i = 0; i < raw.length; ++i) ans[i] = api2wire_Chrono_Naive(raw[i]);
    return api2wire_int_64_list(ans);
  }

  @protected
  int api2wire_Chrono_Utc(DateTime raw) {
    return api2wire_i64(raw.microsecondsSinceEpoch);
  }

  @protected
  wire_DartOpaque api2wire_DartOpaque(Object raw) {
    inner.dartApi.initApi();
    final ptr = inner.new_DartOpaque();
    _api_fill_to_wire_DartOpaque(raw, ptr);
    return ptr;
  }

  @protected
  wire_HideData api2wire_HideData(HideData raw) {
    final ptr = inner.new_HideData();
    _api_fill_to_wire_HideData(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_HideData> api2wire_HideData_array_2(HideDataArray2 raw) {
    return api2wire_list_HideData(raw);
  }

  @protected
  wire_I32 api2wire_I32(I32 raw) {
    final ptr = inner.new_I32();
    _api_fill_to_wire_I32(raw, ptr);
    return ptr;
  }

  @protected
  wire_MutexHideData api2wire_MutexHideData(MutexHideData raw) {
    final ptr = inner.new_MutexHideData();
    _api_fill_to_wire_MutexHideData(raw, ptr);
    return ptr;
  }

  @protected
  wire_NonCloneData api2wire_NonCloneData(NonCloneData raw) {
    final ptr = inner.new_NonCloneData();
    _api_fill_to_wire_NonCloneData(raw, ptr);
    return ptr;
  }

  @protected
  wire_NonSendHideData api2wire_NonSendHideData(NonSendHideData raw) {
    final ptr = inner.new_NonSendHideData();
    _api_fill_to_wire_NonSendHideData(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_DartOpaque> api2wire_Object_array_1(ObjectArray1 raw) {
    return api2wire_list_DartOpaque(raw);
  }

  @protected
  wire_RwLockHideData api2wire_RwLockHideData(RwLockHideData raw) {
    final ptr = inner.new_RwLockHideData();
    _api_fill_to_wire_RwLockHideData(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_test_id> api2wire_TestId_array_4(TestIdArray4 raw) {
    return api2wire_list_test_id(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_Uuid(UuidValue raw) {
    return api2wire_uint_8_list(raw.toBytes());
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_Uuids(List<UuidValue> raw) {
    return api2wire_uint_8_list(api2wireConcatenateBytes(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_ZeroCopyBuffer_Uint8List(Uint8List raw) {
    return api2wire_uint_8_list(raw);
  }

  @protected
  ffi.Pointer<wire_ApplicationEnv> api2wire_box_application_env(ApplicationEnv raw) {
    final ptr = inner.new_box_application_env_0();
    _api_fill_to_wire_application_env(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_Chrono_Utc(DateTime raw) {
    return inner.new_box_autoadd_Chrono_Utc_0(api2wire_Chrono_Utc(raw));
  }

  @protected
  ffi.Pointer<wire_DartOpaque> api2wire_box_autoadd_DartOpaque(Object raw) {
    final ptr = inner.new_box_autoadd_DartOpaque_0();
    _api_fill_to_wire_DartOpaque(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_HideData> api2wire_box_autoadd_HideData(HideData raw) {
    final ptr = inner.new_box_autoadd_HideData_0();
    _api_fill_to_wire_HideData(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire___record__String_i32> api2wire_box_autoadd___record__String_i32((String, int) raw) {
    final ptr = inner.new_box_autoadd___record__String_i32_0();
    _api_fill_to_wire___record__String_i32(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_A> api2wire_box_autoadd_a(A raw) {
    final ptr = inner.new_box_autoadd_a_0();
    _api_fill_to_wire_a(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Abc> api2wire_box_autoadd_abc(Abc raw) {
    final ptr = inner.new_box_autoadd_abc_0();
    _api_fill_to_wire_abc(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApplicationEnv> api2wire_box_autoadd_application_env(ApplicationEnv raw) {
    final ptr = inner.new_box_autoadd_application_env_0();
    _api_fill_to_wire_application_env(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ApplicationSettings> api2wire_box_autoadd_application_settings(ApplicationSettings raw) {
    final ptr = inner.new_box_autoadd_application_settings_0();
    _api_fill_to_wire_application_settings(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Attribute> api2wire_box_autoadd_attribute(Attribute raw) {
    final ptr = inner.new_box_autoadd_attribute_0();
    _api_fill_to_wire_attribute(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_B> api2wire_box_autoadd_b(B raw) {
    final ptr = inner.new_box_autoadd_b_0();
    _api_fill_to_wire_b(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<wire_C> api2wire_box_autoadd_c(C raw) {
    final ptr = inner.new_box_autoadd_c_0();
    _api_fill_to_wire_c(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ConcatenateWith> api2wire_box_autoadd_concatenate_with(ConcatenateWith raw) {
    final ptr = inner.new_box_autoadd_concatenate_with_0();
    _api_fill_to_wire_concatenate_with(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_CustomStruct> api2wire_box_autoadd_custom_struct(CustomStruct raw) {
    final ptr = inner.new_box_autoadd_custom_struct_0();
    _api_fill_to_wire_custom_struct(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Customized> api2wire_box_autoadd_customized(Customized raw) {
    final ptr = inner.new_box_autoadd_customized_0();
    _api_fill_to_wire_customized(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DartOpaqueNested> api2wire_box_autoadd_dart_opaque_nested(DartOpaqueNested raw) {
    final ptr = inner.new_box_autoadd_dart_opaque_nested_0();
    _api_fill_to_wire_dart_opaque_nested(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Empty> api2wire_box_autoadd_empty(Empty raw) {
    final ptr = inner.new_box_autoadd_empty_0();
    return ptr;
  }

  @protected
  ffi.Pointer<wire_EnumDartOpaque> api2wire_box_autoadd_enum_dart_opaque(EnumDartOpaque raw) {
    final ptr = inner.new_box_autoadd_enum_dart_opaque_0();
    _api_fill_to_wire_enum_dart_opaque(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_EnumOpaque> api2wire_box_autoadd_enum_opaque(EnumOpaque raw) {
    final ptr = inner.new_box_autoadd_enum_opaque_0();
    _api_fill_to_wire_enum_opaque(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Event> api2wire_box_autoadd_event(Event raw) {
    final ptr = inner.new_box_autoadd_event_0();
    _api_fill_to_wire_event(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ExoticOptionals> api2wire_box_autoadd_exotic_optionals(ExoticOptionals raw) {
    final ptr = inner.new_box_autoadd_exotic_optionals_0();
    _api_fill_to_wire_exotic_optionals(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_box_autoadd_f64(double raw) {
    return inner.new_box_autoadd_f64_0(api2wire_f64(raw));
  }

  @protected
  ffi.Pointer<wire_FeatureChrono> api2wire_box_autoadd_feature_chrono(FeatureChrono raw) {
    final ptr = inner.new_box_autoadd_feature_chrono_0();
    _api_fill_to_wire_feature_chrono(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_FeatureUuid> api2wire_box_autoadd_feature_uuid(FeatureUuid raw) {
    final ptr = inner.new_box_autoadd_feature_uuid_0();
    _api_fill_to_wire_feature_uuid(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_FeedId> api2wire_box_autoadd_feed_id(FeedId raw) {
    final ptr = inner.new_box_autoadd_feed_id_0();
    _api_fill_to_wire_feed_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_autoadd_i32(int raw) {
    return inner.new_box_autoadd_i32_0(api2wire_i32(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(api2wire_i64(raw));
  }

  @protected
  ffi.Pointer<wire_KitchenSink> api2wire_box_autoadd_kitchen_sink(KitchenSink raw) {
    final ptr = inner.new_box_autoadd_kitchen_sink_0();
    _api_fill_to_wire_kitchen_sink(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Measure> api2wire_box_autoadd_measure(Measure raw) {
    final ptr = inner.new_box_autoadd_measure_0();
    _api_fill_to_wire_measure(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MessageId> api2wire_box_autoadd_message_id(MessageId raw) {
    final ptr = inner.new_box_autoadd_message_id_0();
    _api_fill_to_wire_message_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MyEnumFreezed> api2wire_box_autoadd_my_enum_freezed(MyEnumFreezed raw) {
    final ptr = inner.new_box_autoadd_my_enum_freezed_0();
    _api_fill_to_wire_my_enum_freezed(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MyNestedStruct> api2wire_box_autoadd_my_nested_struct(MyNestedStruct raw) {
    final ptr = inner.new_box_autoadd_my_nested_struct_0();
    _api_fill_to_wire_my_nested_struct(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MySize> api2wire_box_autoadd_my_size(MySize raw) {
    final ptr = inner.new_box_autoadd_my_size_0();
    _api_fill_to_wire_my_size(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MySizeFreezed> api2wire_box_autoadd_my_size_freezed(MySizeFreezed raw) {
    final ptr = inner.new_box_autoadd_my_size_freezed_0();
    _api_fill_to_wire_my_size_freezed(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MyStruct> api2wire_box_autoadd_my_struct(MyStruct raw) {
    final ptr = inner.new_box_autoadd_my_struct_0();
    _api_fill_to_wire_my_struct(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MyTreeNode> api2wire_box_autoadd_my_tree_node(MyTreeNode raw) {
    final ptr = inner.new_box_autoadd_my_tree_node_0();
    _api_fill_to_wire_my_tree_node(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NewTypeInt> api2wire_box_autoadd_new_type_int(NewTypeInt raw) {
    final ptr = inner.new_box_autoadd_new_type_int_0();
    _api_fill_to_wire_new_type_int(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Note> api2wire_box_autoadd_note(Note raw) {
    final ptr = inner.new_box_autoadd_note_0();
    _api_fill_to_wire_note(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Numbers> api2wire_box_autoadd_numbers(Numbers raw) {
    final ptr = inner.new_box_autoadd_numbers_0();
    _api_fill_to_wire_numbers(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OpaqueNested> api2wire_box_autoadd_opaque_nested(OpaqueNested raw) {
    final ptr = inner.new_box_autoadd_opaque_nested_0();
    _api_fill_to_wire_opaque_nested(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OptVecs> api2wire_box_autoadd_opt_vecs(OptVecs raw) {
    final ptr = inner.new_box_autoadd_opt_vecs_0();
    _api_fill_to_wire_opt_vecs(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Sequences> api2wire_box_autoadd_sequences(Sequences raw) {
    final ptr = inner.new_box_autoadd_sequences_0();
    _api_fill_to_wire_sequences(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SomeStruct> api2wire_box_autoadd_some_struct(SomeStruct raw) {
    final ptr = inner.new_box_autoadd_some_struct_0();
    _api_fill_to_wire_some_struct(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_StructWithEnum> api2wire_box_autoadd_struct_with_enum(StructWithEnum raw) {
    final ptr = inner.new_box_autoadd_struct_with_enum_0();
    _api_fill_to_wire_struct_with_enum(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SumWith> api2wire_box_autoadd_sum_with(SumWith raw) {
    final ptr = inner.new_box_autoadd_sum_with_0();
    _api_fill_to_wire_sum_with(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_TestId> api2wire_box_autoadd_test_id(TestId raw) {
    final ptr = inner.new_box_autoadd_test_id_0();
    _api_fill_to_wire_test_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_UserId> api2wire_box_autoadd_user_id(UserId raw) {
    final ptr = inner.new_box_autoadd_user_id_0();
    _api_fill_to_wire_user_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_autoadd_weekdays(Weekdays raw) {
    return inner.new_box_autoadd_weekdays_0(api2wire_weekdays(raw));
  }

  @protected
  ffi.Pointer<wire_Blob> api2wire_box_blob(Blob raw) {
    final ptr = inner.new_box_blob_0();
    _api_fill_to_wire_blob(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_bool(bool raw) {
    return inner.new_box_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<wire_Distance> api2wire_box_distance(Distance raw) {
    final ptr = inner.new_box_distance_0();
    _api_fill_to_wire_distance(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ExoticOptionals> api2wire_box_exotic_optionals(ExoticOptionals raw) {
    final ptr = inner.new_box_exotic_optionals_0();
    _api_fill_to_wire_exotic_optionals(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_box_f64(double raw) {
    return inner.new_box_f64_0(api2wire_f64(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_i32(int raw) {
    return inner.new_box_i32_0(api2wire_i32(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_i64(int raw) {
    return inner.new_box_i64_0(api2wire_i64(raw));
  }

  @protected
  ffi.Pointer<ffi.Int8> api2wire_box_i8(int raw) {
    return inner.new_box_i8_0(api2wire_i8(raw));
  }

  @protected
  ffi.Pointer<wire_KitchenSink> api2wire_box_kitchen_sink(KitchenSink raw) {
    final ptr = inner.new_box_kitchen_sink_0();
    _api_fill_to_wire_kitchen_sink(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MySize> api2wire_box_my_size(MySize raw) {
    final ptr = inner.new_box_my_size_0();
    _api_fill_to_wire_my_size(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_MySizeFreezed> api2wire_box_my_size_freezed(MySizeFreezed raw) {
    final ptr = inner.new_box_my_size_freezed_0();
    _api_fill_to_wire_my_size_freezed(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Speed> api2wire_box_speed(Speed raw) {
    final ptr = inner.new_box_speed_0();
    _api_fill_to_wire_speed(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_u8(int raw) {
    return inner.new_box_u8_0(api2wire_u8(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_box_u8_array_1600(U8Array1600 raw) {
    return api2wire_u8_array_1600(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_weekdays(Weekdays raw) {
    return inner.new_box_weekdays_0(api2wire_weekdays(raw));
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_f64_array_16(F64Array16 raw) {
    final ans = inner.new_float_64_list_0(16);
    ans.ref.ptr.asTypedList(16).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_float_32_list> api2wire_float_32_list(Float32List raw) {
    final ans = inner.new_float_32_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_float_64_list(Float64List raw) {
    final ans = inner.new_float_64_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_int_32_list> api2wire_i32_array_2(I32Array2 raw) {
    final ans = inner.new_int_32_list_0(2);
    ans.ref.ptr.asTypedList(2).setAll(0, raw);
    return ans;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_int_32_list> api2wire_int_32_list(Int32List raw) {
    final ans = inner.new_int_32_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_int_64_list> api2wire_int_64_list(Int64List raw) {
    final ans = inner.new_int_64_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw.inner);
    return ans;
  }

  @protected
  ffi.Pointer<wire_int_8_list> api2wire_int_8_list(Int8List raw) {
    final ans = inner.new_int_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_DartOpaque> api2wire_list_DartOpaque(List<Object> raw) {
    final ans = inner.new_list_DartOpaque_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_DartOpaque(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_HideData> api2wire_list_HideData(List<HideData> raw) {
    final ans = inner.new_list_HideData_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_HideData(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list___record__String_i32> api2wire_list___record__String_i32(List<(String, int)> raw) {
    final ans = inner.new_list___record__String_i32_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire___record__String_i32(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_application_env_var> api2wire_list_application_env_var(List<ApplicationEnvVar> raw) {
    final ans = inner.new_list_application_env_var_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_application_env_var(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_attribute> api2wire_list_attribute(List<Attribute> raw) {
    final ans = inner.new_list_attribute_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_attribute(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_my_size> api2wire_list_my_size(List<MySize> raw) {
    final ans = inner.new_list_my_size_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_my_size(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_my_tree_node> api2wire_list_my_tree_node(List<MyTreeNode> raw) {
    final ans = inner.new_list_my_tree_node_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_my_tree_node(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_opt_String> api2wire_list_opt_String(List<String?> raw) {
    final ans = inner.new_list_opt_String_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      final item = raw[i];
      if (item == null) continue;
      ans.ref.ptr[i] = api2wire_String(item);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_opt_box_autoadd_attribute> api2wire_list_opt_box_autoadd_attribute(List<Attribute?> raw) {
    final ans = inner.new_list_opt_box_autoadd_attribute_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      final item = raw[i];
      if (item == null) continue;
      ans.ref.ptr[i] = api2wire_box_autoadd_attribute(item);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_opt_box_autoadd_i32> api2wire_list_opt_box_autoadd_i32(List<int?> raw) {
    final ans = inner.new_list_opt_box_autoadd_i32_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      final item = raw[i];
      if (item == null) continue;
      ans.ref.ptr[i] = api2wire_box_autoadd_i32(item);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_opt_box_autoadd_weekdays> api2wire_list_opt_box_autoadd_weekdays(List<Weekdays?> raw) {
    final ans = inner.new_list_opt_box_autoadd_weekdays_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      final item = raw[i];
      if (item == null) continue;
      ans.ref.ptr[i] = api2wire_box_autoadd_weekdays(item);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_opt_int_32_list> api2wire_list_opt_int_32_list(List<Int32List?> raw) {
    final ans = inner.new_list_opt_int_32_list_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      final item = raw[i];
      if (item == null) continue;
      ans.ref.ptr[i] = api2wire_int_32_list(item);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_test_id> api2wire_list_test_id(List<TestId> raw) {
    final ans = inner.new_list_test_id_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_test_id(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_weekdays> api2wire_list_weekdays(List<Weekdays> raw) {
    final ans = inner.new_list_weekdays_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = api2wire_weekdays(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_ZeroCopyBuffer_Uint8List(Uint8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_ZeroCopyBuffer_Uint8List(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_Chrono_Utc(DateTime? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  ffi.Pointer<wire_DartOpaque> api2wire_opt_box_autoadd_DartOpaque(Object? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_DartOpaque(raw);
  }

  @protected
  ffi.Pointer<wire_HideData> api2wire_opt_box_autoadd_HideData(HideData? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_HideData(raw);
  }

  @protected
  ffi.Pointer<wire___record__String_i32> api2wire_opt_box_autoadd___record__String_i32((String, int)? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd___record__String_i32(raw);
  }

  @protected
  ffi.Pointer<wire_ApplicationEnv> api2wire_opt_box_autoadd_application_env(ApplicationEnv? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_application_env(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<wire_ExoticOptionals> api2wire_opt_box_autoadd_exotic_optionals(ExoticOptionals? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_exotic_optionals(raw);
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_opt_box_autoadd_f64(double? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_f64(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_opt_box_autoadd_i32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i32(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i64(raw);
  }

  @protected
  ffi.Pointer<wire_NewTypeInt> api2wire_opt_box_autoadd_new_type_int(NewTypeInt? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_new_type_int(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_box_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_bool(raw);
  }

  @protected
  ffi.Pointer<wire_ExoticOptionals> api2wire_opt_box_exotic_optionals(ExoticOptionals? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_exotic_optionals(raw);
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_opt_box_f64(double? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_f64(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_opt_box_i32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_i32(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_i64(raw);
  }

  @protected
  ffi.Pointer<ffi.Int8> api2wire_opt_box_i8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_i8(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_u8(raw);
  }

  @protected
  ffi.Pointer<wire_float_32_list> api2wire_opt_float_32_list(Float32List? raw) {
    return raw == null ? ffi.nullptr : api2wire_float_32_list(raw);
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_opt_float_64_list(Float64List? raw) {
    return raw == null ? ffi.nullptr : api2wire_float_64_list(raw);
  }

  @protected
  ffi.Pointer<wire_int_32_list> api2wire_opt_int_32_list(Int32List? raw) {
    return raw == null ? ffi.nullptr : api2wire_int_32_list(raw);
  }

  @protected
  ffi.Pointer<wire_int_8_list> api2wire_opt_int_8_list(Int8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_int_8_list(raw);
  }

  @protected
  ffi.Pointer<wire_list_attribute> api2wire_opt_list_attribute(List<Attribute>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_attribute(raw);
  }

  @protected
  ffi.Pointer<wire_list_opt_box_autoadd_attribute> api2wire_opt_list_opt_box_autoadd_attribute(List<Attribute?>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_opt_box_autoadd_attribute(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_uint_8_list(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_1600(U8Array1600 raw) {
    final ans = inner.new_uint_8_list_0(1600);
    ans.ref.ptr.asTypedList(1600).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_32(U8Array32 raw) {
    final ans = inner.new_uint_8_list_0(32);
    ans.ref.ptr.asTypedList(32).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_8(U8Array8 raw) {
    final ans = inner.new_uint_8_list_0(8);
    ans.ref.ptr.asTypedList(8).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _BoxDartDebugFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_BoxDartDebugPtr);
  OpaqueTypeFinalizer get BoxDartDebugFinalizer => _BoxDartDebugFinalizer;
  late final OpaqueTypeFinalizer _FrbOpaqueReturnFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_FrbOpaqueReturnPtr);
  OpaqueTypeFinalizer get FrbOpaqueReturnFinalizer => _FrbOpaqueReturnFinalizer;
  late final OpaqueTypeFinalizer _FrbOpaqueSyncReturnFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_FrbOpaqueSyncReturnPtr);
  OpaqueTypeFinalizer get FrbOpaqueSyncReturnFinalizer => _FrbOpaqueSyncReturnFinalizer;
  late final OpaqueTypeFinalizer _HideDataFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_HideDataPtr);
  OpaqueTypeFinalizer get HideDataFinalizer => _HideDataFinalizer;
  late final OpaqueTypeFinalizer _I32Finalizer = OpaqueTypeFinalizer(inner._drop_opaque_I32Ptr);
  OpaqueTypeFinalizer get I32Finalizer => _I32Finalizer;
  late final OpaqueTypeFinalizer _MutexHideDataFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_MutexHideDataPtr);
  OpaqueTypeFinalizer get MutexHideDataFinalizer => _MutexHideDataFinalizer;
  late final OpaqueTypeFinalizer _NonCloneDataFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_NonCloneDataPtr);
  OpaqueTypeFinalizer get NonCloneDataFinalizer => _NonCloneDataFinalizer;
  late final OpaqueTypeFinalizer _NonSendHideDataFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_NonSendHideDataPtr);
  OpaqueTypeFinalizer get NonSendHideDataFinalizer => _NonSendHideDataFinalizer;
  late final OpaqueTypeFinalizer _RwLockHideDataFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_RwLockHideDataPtr);
  OpaqueTypeFinalizer get RwLockHideDataFinalizer => _RwLockHideDataFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_BoxDartDebug(BoxDartDebug apiObj, wire_BoxDartDebug wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_DartOpaque(Object apiObj, wire_DartOpaque wireObj) {
    wireObj.handle = inner.new_dart_opaque(apiObj);
    wireObj.port = dropPort;
  }

  void _api_fill_to_wire_HideData(HideData apiObj, wire_HideData wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_I32(I32 apiObj, wire_I32 wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MutexHideData(MutexHideData apiObj, wire_MutexHideData wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_NonCloneData(NonCloneData apiObj, wire_NonCloneData wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_NonSendHideData(NonSendHideData apiObj, wire_NonSendHideData wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RwLockHideData(RwLockHideData apiObj, wire_RwLockHideData wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire___record__String_i32((String, int) apiObj, wire___record__String_i32 wireObj) {
    wireObj.field0 = api2wire_String(apiObj.$1);
    wireObj.field1 = api2wire_i32(apiObj.$2);
  }

  void _api_fill_to_wire_a(A apiObj, wire_A wireObj) {
    wireObj.a = api2wire_String(apiObj.a);
  }

  void _api_fill_to_wire_abc(Abc apiObj, wire_Abc wireObj) {
    if (apiObj is Abc_A) {
      var pre_field0 = api2wire_box_autoadd_a(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Abc_A();
      wireObj.kind.ref.A.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Abc_B) {
      var pre_field0 = api2wire_box_autoadd_b(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Abc_B();
      wireObj.kind.ref.B.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Abc_C) {
      var pre_field0 = api2wire_box_autoadd_c(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_Abc_C();
      wireObj.kind.ref.C.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Abc_JustInt) {
      var pre_field0 = api2wire_i32(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_Abc_JustInt();
      wireObj.kind.ref.JustInt.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_application_env(ApplicationEnv apiObj, wire_ApplicationEnv wireObj) {
    wireObj.vars = api2wire_list_application_env_var(apiObj.vars);
  }

  void _api_fill_to_wire_application_env_var(ApplicationEnvVar apiObj, wire_ApplicationEnvVar wireObj) {
    wireObj.field0 = api2wire_String(apiObj.field0);
    wireObj.field1 = api2wire_bool(apiObj.field1);
  }

  void _api_fill_to_wire_application_settings(ApplicationSettings apiObj, wire_ApplicationSettings wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.version = api2wire_String(apiObj.version);
    wireObj.mode = api2wire_application_mode(apiObj.mode);
    wireObj.env = api2wire_box_application_env(apiObj.env);
    wireObj.env_optional = api2wire_opt_box_autoadd_application_env(apiObj.envOptional);
  }

  void _api_fill_to_wire_attribute(Attribute apiObj, wire_Attribute wireObj) {
    wireObj.key = api2wire_String(apiObj.key);
    wireObj.value = api2wire_String(apiObj.value);
  }

  void _api_fill_to_wire_b(B apiObj, wire_B wireObj) {
    wireObj.b = api2wire_i32(apiObj.b);
  }

  void _api_fill_to_wire_blob(Blob apiObj, wire_Blob wireObj) {
    wireObj.field0 = api2wire_u8_array_1600(apiObj.field0);
  }

  void _api_fill_to_wire_box_application_env(ApplicationEnv apiObj, ffi.Pointer<wire_ApplicationEnv> wireObj) {
    _api_fill_to_wire_application_env(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_DartOpaque(Object apiObj, ffi.Pointer<wire_DartOpaque> wireObj) {
    _api_fill_to_wire_DartOpaque(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_HideData(HideData apiObj, ffi.Pointer<wire_HideData> wireObj) {
    _api_fill_to_wire_HideData(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd___record__String_i32(
      (String, int) apiObj, ffi.Pointer<wire___record__String_i32> wireObj) {
    _api_fill_to_wire___record__String_i32(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_a(A apiObj, ffi.Pointer<wire_A> wireObj) {
    _api_fill_to_wire_a(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_abc(Abc apiObj, ffi.Pointer<wire_Abc> wireObj) {
    _api_fill_to_wire_abc(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_application_env(ApplicationEnv apiObj, ffi.Pointer<wire_ApplicationEnv> wireObj) {
    _api_fill_to_wire_application_env(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_application_settings(
      ApplicationSettings apiObj, ffi.Pointer<wire_ApplicationSettings> wireObj) {
    _api_fill_to_wire_application_settings(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_attribute(Attribute apiObj, ffi.Pointer<wire_Attribute> wireObj) {
    _api_fill_to_wire_attribute(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_b(B apiObj, ffi.Pointer<wire_B> wireObj) {
    _api_fill_to_wire_b(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_c(C apiObj, ffi.Pointer<wire_C> wireObj) {
    _api_fill_to_wire_c(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_concatenate_with(
      ConcatenateWith apiObj, ffi.Pointer<wire_ConcatenateWith> wireObj) {
    _api_fill_to_wire_concatenate_with(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_custom_struct(CustomStruct apiObj, ffi.Pointer<wire_CustomStruct> wireObj) {
    _api_fill_to_wire_custom_struct(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_customized(Customized apiObj, ffi.Pointer<wire_Customized> wireObj) {
    _api_fill_to_wire_customized(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_dart_opaque_nested(
      DartOpaqueNested apiObj, ffi.Pointer<wire_DartOpaqueNested> wireObj) {
    _api_fill_to_wire_dart_opaque_nested(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_enum_dart_opaque(EnumDartOpaque apiObj, ffi.Pointer<wire_EnumDartOpaque> wireObj) {
    _api_fill_to_wire_enum_dart_opaque(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_enum_opaque(EnumOpaque apiObj, ffi.Pointer<wire_EnumOpaque> wireObj) {
    _api_fill_to_wire_enum_opaque(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_event(Event apiObj, ffi.Pointer<wire_Event> wireObj) {
    _api_fill_to_wire_event(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_exotic_optionals(
      ExoticOptionals apiObj, ffi.Pointer<wire_ExoticOptionals> wireObj) {
    _api_fill_to_wire_exotic_optionals(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_feature_chrono(FeatureChrono apiObj, ffi.Pointer<wire_FeatureChrono> wireObj) {
    _api_fill_to_wire_feature_chrono(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_feature_uuid(FeatureUuid apiObj, ffi.Pointer<wire_FeatureUuid> wireObj) {
    _api_fill_to_wire_feature_uuid(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_feed_id(FeedId apiObj, ffi.Pointer<wire_FeedId> wireObj) {
    _api_fill_to_wire_feed_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_kitchen_sink(KitchenSink apiObj, ffi.Pointer<wire_KitchenSink> wireObj) {
    _api_fill_to_wire_kitchen_sink(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_measure(Measure apiObj, ffi.Pointer<wire_Measure> wireObj) {
    _api_fill_to_wire_measure(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_message_id(MessageId apiObj, ffi.Pointer<wire_MessageId> wireObj) {
    _api_fill_to_wire_message_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_enum_freezed(MyEnumFreezed apiObj, ffi.Pointer<wire_MyEnumFreezed> wireObj) {
    _api_fill_to_wire_my_enum_freezed(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_nested_struct(MyNestedStruct apiObj, ffi.Pointer<wire_MyNestedStruct> wireObj) {
    _api_fill_to_wire_my_nested_struct(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_size(MySize apiObj, ffi.Pointer<wire_MySize> wireObj) {
    _api_fill_to_wire_my_size(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_size_freezed(MySizeFreezed apiObj, ffi.Pointer<wire_MySizeFreezed> wireObj) {
    _api_fill_to_wire_my_size_freezed(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_struct(MyStruct apiObj, ffi.Pointer<wire_MyStruct> wireObj) {
    _api_fill_to_wire_my_struct(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_my_tree_node(MyTreeNode apiObj, ffi.Pointer<wire_MyTreeNode> wireObj) {
    _api_fill_to_wire_my_tree_node(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_new_type_int(NewTypeInt apiObj, ffi.Pointer<wire_NewTypeInt> wireObj) {
    _api_fill_to_wire_new_type_int(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_note(Note apiObj, ffi.Pointer<wire_Note> wireObj) {
    _api_fill_to_wire_note(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_numbers(Numbers apiObj, ffi.Pointer<wire_Numbers> wireObj) {
    _api_fill_to_wire_numbers(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_opaque_nested(OpaqueNested apiObj, ffi.Pointer<wire_OpaqueNested> wireObj) {
    _api_fill_to_wire_opaque_nested(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_opt_vecs(OptVecs apiObj, ffi.Pointer<wire_OptVecs> wireObj) {
    _api_fill_to_wire_opt_vecs(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sequences(Sequences apiObj, ffi.Pointer<wire_Sequences> wireObj) {
    _api_fill_to_wire_sequences(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_some_struct(SomeStruct apiObj, ffi.Pointer<wire_SomeStruct> wireObj) {
    _api_fill_to_wire_some_struct(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_struct_with_enum(StructWithEnum apiObj, ffi.Pointer<wire_StructWithEnum> wireObj) {
    _api_fill_to_wire_struct_with_enum(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sum_with(SumWith apiObj, ffi.Pointer<wire_SumWith> wireObj) {
    _api_fill_to_wire_sum_with(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_test_id(TestId apiObj, ffi.Pointer<wire_TestId> wireObj) {
    _api_fill_to_wire_test_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_user_id(UserId apiObj, ffi.Pointer<wire_UserId> wireObj) {
    _api_fill_to_wire_user_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_blob(Blob apiObj, ffi.Pointer<wire_Blob> wireObj) {
    _api_fill_to_wire_blob(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_distance(Distance apiObj, ffi.Pointer<wire_Distance> wireObj) {
    _api_fill_to_wire_distance(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_exotic_optionals(ExoticOptionals apiObj, ffi.Pointer<wire_ExoticOptionals> wireObj) {
    _api_fill_to_wire_exotic_optionals(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_kitchen_sink(KitchenSink apiObj, ffi.Pointer<wire_KitchenSink> wireObj) {
    _api_fill_to_wire_kitchen_sink(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_my_size(MySize apiObj, ffi.Pointer<wire_MySize> wireObj) {
    _api_fill_to_wire_my_size(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_my_size_freezed(MySizeFreezed apiObj, ffi.Pointer<wire_MySizeFreezed> wireObj) {
    _api_fill_to_wire_my_size_freezed(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_speed(Speed apiObj, ffi.Pointer<wire_Speed> wireObj) {
    _api_fill_to_wire_speed(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_u8_array_1600(U8Array1600 apiObj, ffi.Pointer<wire_uint_8_list> wireObj) {
    wireObj = api2wire_u8_array_1600(apiObj);
  }

  void _api_fill_to_wire_c(C apiObj, wire_C wireObj) {
    wireObj.c = api2wire_bool(apiObj.c);
  }

  void _api_fill_to_wire_concatenate_with(ConcatenateWith apiObj, wire_ConcatenateWith wireObj) {
    wireObj.a = api2wire_String(apiObj.a);
  }

  void _api_fill_to_wire_custom_struct(CustomStruct apiObj, wire_CustomStruct wireObj) {
    wireObj.message = api2wire_String(apiObj.message);
  }

  void _api_fill_to_wire_customized(Customized apiObj, wire_Customized wireObj) {
    wireObj.final_field = api2wire_String(apiObj.finalField);
    wireObj.non_final_field = api2wire_opt_String(apiObj.nonFinalField);
  }

  void _api_fill_to_wire_dart_opaque_nested(DartOpaqueNested apiObj, wire_DartOpaqueNested wireObj) {
    wireObj.first = api2wire_DartOpaque(apiObj.first);
    wireObj.second = api2wire_DartOpaque(apiObj.second);
  }

  void _api_fill_to_wire_distance(Distance apiObj, wire_Distance wireObj) {
    if (apiObj is Distance_Unknown) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Distance_Map) {
      var pre_field0 = api2wire_f64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Distance_Map();
      wireObj.kind.ref.Map.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_empty(Empty apiObj, wire_Empty wireObj) {}

  void _api_fill_to_wire_enum_dart_opaque(EnumDartOpaque apiObj, wire_EnumDartOpaque wireObj) {
    if (apiObj is EnumDartOpaque_Primitive) {
      var pre_field0 = api2wire_i32(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_EnumDartOpaque_Primitive();
      wireObj.kind.ref.Primitive.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EnumDartOpaque_Opaque) {
      var pre_field0 = api2wire_DartOpaque(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_EnumDartOpaque_Opaque();
      wireObj.kind.ref.Opaque.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_enum_opaque(EnumOpaque apiObj, wire_EnumOpaque wireObj) {
    if (apiObj is EnumOpaque_Struct) {
      var pre_field0 = api2wire_HideData(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_EnumOpaque_Struct();
      wireObj.kind.ref.Struct.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EnumOpaque_Primitive) {
      var pre_field0 = api2wire_I32(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_EnumOpaque_Primitive();
      wireObj.kind.ref.Primitive.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EnumOpaque_TraitObj) {
      var pre_field0 = api2wire_BoxDartDebug(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_EnumOpaque_TraitObj();
      wireObj.kind.ref.TraitObj.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EnumOpaque_Mutex) {
      var pre_field0 = api2wire_MutexHideData(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_EnumOpaque_Mutex();
      wireObj.kind.ref.Mutex.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EnumOpaque_RwLock) {
      var pre_field0 = api2wire_RwLockHideData(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_EnumOpaque_RwLock();
      wireObj.kind.ref.RwLock.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_event(Event apiObj, wire_Event wireObj) {
    wireObj.address = api2wire_String(apiObj.address);
    wireObj.payload = api2wire_String(apiObj.payload);
  }

  void _api_fill_to_wire_exotic_optionals(ExoticOptionals apiObj, wire_ExoticOptionals wireObj) {
    wireObj.int32 = api2wire_opt_box_autoadd_i32(apiObj.int32);
    wireObj.int64 = api2wire_opt_box_autoadd_i64(apiObj.int64);
    wireObj.float64 = api2wire_opt_box_autoadd_f64(apiObj.float64);
    wireObj.boolean = api2wire_opt_box_autoadd_bool(apiObj.boolean);
    wireObj.zerocopy = api2wire_opt_ZeroCopyBuffer_Uint8List(apiObj.zerocopy);
    wireObj.int8list = api2wire_opt_int_8_list(apiObj.int8List);
    wireObj.uint8list = api2wire_opt_uint_8_list(apiObj.uint8List);
    wireObj.int32list = api2wire_opt_int_32_list(apiObj.int32List);
    wireObj.float32list = api2wire_opt_float_32_list(apiObj.float32List);
    wireObj.float64list = api2wire_opt_float_64_list(apiObj.float64List);
    wireObj.attributes = api2wire_opt_list_attribute(apiObj.attributes);
    wireObj.attributes_nullable = api2wire_list_opt_box_autoadd_attribute(apiObj.attributesNullable);
    wireObj.nullable_attributes = api2wire_opt_list_opt_box_autoadd_attribute(apiObj.nullableAttributes);
    wireObj.newtypeint = api2wire_opt_box_autoadd_new_type_int(apiObj.newtypeint);
  }

  void _api_fill_to_wire_feature_chrono(FeatureChrono apiObj, wire_FeatureChrono wireObj) {
    wireObj.utc = api2wire_Chrono_Utc(apiObj.utc);
    wireObj.local = api2wire_Chrono_Local(apiObj.local);
    wireObj.duration = api2wire_Chrono_Duration(apiObj.duration);
    wireObj.naive = api2wire_Chrono_Naive(apiObj.naive);
  }

  void _api_fill_to_wire_feature_uuid(FeatureUuid apiObj, wire_FeatureUuid wireObj) {
    wireObj.one = api2wire_Uuid(apiObj.one);
    wireObj.many = api2wire_Uuids(apiObj.many);
  }

  void _api_fill_to_wire_feed_id(FeedId apiObj, wire_FeedId wireObj) {
    wireObj.field0 = api2wire_u8_array_8(apiObj.field0);
  }

  void _api_fill_to_wire_kitchen_sink(KitchenSink apiObj, wire_KitchenSink wireObj) {
    if (apiObj is KitchenSink_Empty) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is KitchenSink_Primitives) {
      var pre_int32 = api2wire_i32(apiObj.int32);
      var pre_float64 = api2wire_f64(apiObj.float64);
      var pre_boolean = api2wire_bool(apiObj.boolean);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_KitchenSink_Primitives();
      wireObj.kind.ref.Primitives.ref.int32 = pre_int32;
      wireObj.kind.ref.Primitives.ref.float64 = pre_float64;
      wireObj.kind.ref.Primitives.ref.boolean = pre_boolean;
      return;
    }
    if (apiObj is KitchenSink_Nested) {
      var pre_field0 = api2wire_i32(apiObj.field0);
      var pre_field1 = api2wire_box_kitchen_sink(apiObj.field1);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_KitchenSink_Nested();
      wireObj.kind.ref.Nested.ref.field0 = pre_field0;
      wireObj.kind.ref.Nested.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is KitchenSink_Optional) {
      var pre_field0 = api2wire_opt_box_autoadd_i32(apiObj.field0);
      var pre_field1 = api2wire_opt_box_autoadd_i32(apiObj.field1);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_KitchenSink_Optional();
      wireObj.kind.ref.Optional.ref.field0 = pre_field0;
      wireObj.kind.ref.Optional.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is KitchenSink_Buffer) {
      var pre_field0 = api2wire_ZeroCopyBuffer_Uint8List(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_KitchenSink_Buffer();
      wireObj.kind.ref.Buffer.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is KitchenSink_Enums) {
      var pre_field0 = api2wire_weekdays(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_KitchenSink_Enums();
      wireObj.kind.ref.Enums.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_measure(Measure apiObj, wire_Measure wireObj) {
    if (apiObj is Measure_Speed) {
      var pre_field0 = api2wire_box_speed(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Measure_Speed();
      wireObj.kind.ref.Speed.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Measure_Distance) {
      var pre_field0 = api2wire_box_distance(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Measure_Distance();
      wireObj.kind.ref.Distance.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_message_id(MessageId apiObj, wire_MessageId wireObj) {
    wireObj.field0 = api2wire_u8_array_32(apiObj.field0);
  }

  void _api_fill_to_wire_my_enum_freezed(MyEnumFreezed apiObj, wire_MyEnumFreezed wireObj) {
    if (apiObj is MyEnumFreezed_A) {
      var pre_field0 = api2wire_i32(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_MyEnumFreezed_A();
      wireObj.kind.ref.A.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is MyEnumFreezed_B) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_MyEnumFreezed_B();
      wireObj.kind.ref.B.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_my_nested_struct(MyNestedStruct apiObj, wire_MyNestedStruct wireObj) {
    _api_fill_to_wire_my_tree_node(apiObj.treeNode, wireObj.tree_node);
    wireObj.weekday = api2wire_weekdays(apiObj.weekday);
  }

  void _api_fill_to_wire_my_size(MySize apiObj, wire_MySize wireObj) {
    wireObj.width = api2wire_i32(apiObj.width);
    wireObj.height = api2wire_i32(apiObj.height);
  }

  void _api_fill_to_wire_my_size_freezed(MySizeFreezed apiObj, wire_MySizeFreezed wireObj) {
    wireObj.width = api2wire_i32(apiObj.width);
    wireObj.height = api2wire_i32(apiObj.height);
  }

  void _api_fill_to_wire_my_struct(MyStruct apiObj, wire_MyStruct wireObj) {
    wireObj.content = api2wire_bool(apiObj.content);
  }

  void _api_fill_to_wire_my_tree_node(MyTreeNode apiObj, wire_MyTreeNode wireObj) {
    wireObj.value_i32 = api2wire_i32(apiObj.valueI32);
    wireObj.value_vec_u8 = api2wire_uint_8_list(apiObj.valueVecU8);
    wireObj.value_boolean = api2wire_bool(apiObj.valueBoolean);
    wireObj.children = api2wire_list_my_tree_node(apiObj.children);
  }

  void _api_fill_to_wire_new_type_int(NewTypeInt apiObj, wire_NewTypeInt wireObj) {
    wireObj.field0 = api2wire_i64(apiObj.field0);
  }

  void _api_fill_to_wire_note(Note apiObj, wire_Note wireObj) {
    wireObj.day = api2wire_box_weekdays(apiObj.day);
    wireObj.body = api2wire_String(apiObj.body);
  }

  void _api_fill_to_wire_numbers(Numbers apiObj, wire_Numbers wireObj) {
    wireObj.field0 = api2wire_int_32_list(apiObj.field0);
  }

  void _api_fill_to_wire_opaque_nested(OpaqueNested apiObj, wire_OpaqueNested wireObj) {
    wireObj.first = api2wire_HideData(apiObj.first);
    wireObj.second = api2wire_HideData(apiObj.second);
  }

  void _api_fill_to_wire_opt_vecs(OptVecs apiObj, wire_OptVecs wireObj) {
    wireObj.i32 = api2wire_list_opt_box_autoadd_i32(apiObj.i32);
    wireObj.enums = api2wire_list_opt_box_autoadd_weekdays(apiObj.enums);
    wireObj.strings = api2wire_list_opt_String(apiObj.strings);
    wireObj.buffers = api2wire_list_opt_int_32_list(apiObj.buffers);
  }

  void _api_fill_to_wire_sequences(Sequences apiObj, wire_Sequences wireObj) {
    wireObj.field0 = api2wire_int_32_list(apiObj.field0);
  }

  void _api_fill_to_wire_some_struct(SomeStruct apiObj, wire_SomeStruct wireObj) {
    wireObj.value = api2wire_u32(apiObj.value);
  }

  void _api_fill_to_wire_speed(Speed apiObj, wire_Speed wireObj) {
    if (apiObj is Speed_Unknown) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Speed_GPS) {
      var pre_field0 = api2wire_f64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Speed_GPS();
      wireObj.kind.ref.GPS.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_struct_with_enum(StructWithEnum apiObj, wire_StructWithEnum wireObj) {
    _api_fill_to_wire_abc(apiObj.abc1, wireObj.abc1);
    _api_fill_to_wire_abc(apiObj.abc2, wireObj.abc2);
  }

  void _api_fill_to_wire_sum_with(SumWith apiObj, wire_SumWith wireObj) {
    wireObj.x = api2wire_u32(apiObj.x);
  }

  void _api_fill_to_wire_test_id(TestId apiObj, wire_TestId wireObj) {
    wireObj.field0 = api2wire_i32_array_2(apiObj.field0);
  }

  void _api_fill_to_wire_user_id(UserId apiObj, wire_UserId wireObj) {
    wireObj.value = api2wire_u32(apiObj.value);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class FlutterRustBridgeExampleSingleBlockTestWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustBridgeExampleSingleBlockTestWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustBridgeExampleSingleBlockTestWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_simple_adder(
    int port_,
    int a,
    int b,
  ) {
    return _wire_simple_adder(
      port_,
      a,
      b,
    );
  }

  late final _wire_simple_adderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int32)>>('wire_simple_adder');
  late final _wire_simple_adder = _wire_simple_adderPtr.asFunction<void Function(int, int, int)>();

  WireSyncReturn wire_simple_adder_sync(
    int a,
    int b,
  ) {
    return _wire_simple_adder_sync(
      a,
      b,
    );
  }

  late final _wire_simple_adder_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32, ffi.Int32)>>('wire_simple_adder_sync');
  late final _wire_simple_adder_sync = _wire_simple_adder_syncPtr.asFunction<WireSyncReturn Function(int, int)>();

  void wire_primitive_types(
    int port_,
    int my_i32,
    int my_i64,
    double my_f64,
    bool my_bool,
  ) {
    return _wire_primitive_types(
      port_,
      my_i32,
      my_i64,
      my_f64,
      my_bool,
    );
  }

  late final _wire_primitive_typesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int64, ffi.Double, ffi.Bool)>>(
          'wire_primitive_types');
  late final _wire_primitive_types = _wire_primitive_typesPtr.asFunction<void Function(int, int, int, double, bool)>();

  void wire_primitive_optional_types(
    int port_,
    ffi.Pointer<ffi.Int32> my_i32,
    ffi.Pointer<ffi.Int64> my_i64,
    ffi.Pointer<ffi.Double> my_f64,
    ffi.Pointer<ffi.Bool> my_bool,
  ) {
    return _wire_primitive_optional_types(
      port_,
      my_i32,
      my_i64,
      my_f64,
      my_bool,
    );
  }

  late final _wire_primitive_optional_typesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Bool>)>>('wire_primitive_optional_types');
  late final _wire_primitive_optional_types = _wire_primitive_optional_typesPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>)>();

  WireSyncReturn wire_primitive_types_sync(
    int my_i32,
    int my_i64,
    double my_f64,
    bool my_bool,
  ) {
    return _wire_primitive_types_sync(
      my_i32,
      my_i64,
      my_f64,
      my_bool,
    );
  }

  late final _wire_primitive_types_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32, ffi.Int64, ffi.Double, ffi.Bool)>>(
          'wire_primitive_types_sync');
  late final _wire_primitive_types_sync =
      _wire_primitive_types_syncPtr.asFunction<WireSyncReturn Function(int, int, double, bool)>();

  void wire_primitive_u32(
    int port_,
    int my_u32,
  ) {
    return _wire_primitive_u32(
      port_,
      my_u32,
    );
  }

  late final _wire_primitive_u32Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>('wire_primitive_u32');
  late final _wire_primitive_u32 = _wire_primitive_u32Ptr.asFunction<void Function(int, int)>();

  WireSyncReturn wire_primitive_u32_sync(
    int my_u32,
  ) {
    return _wire_primitive_u32_sync(
      my_u32,
    );
  }

  late final _wire_primitive_u32_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Uint32)>>('wire_primitive_u32_sync');
  late final _wire_primitive_u32_sync = _wire_primitive_u32_syncPtr.asFunction<WireSyncReturn Function(int)>();

  void wire_handle_string(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_handle_string(
      port_,
      s,
    );
  }

  late final _wire_handle_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_string');
  late final _wire_handle_string =
      _wire_handle_stringPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_handle_string_sync(
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_handle_string_sync(
      s,
    );
  }

  late final _wire_handle_string_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>('wire_handle_string_sync');
  late final _wire_handle_string_sync =
      _wire_handle_string_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_return_unit(
    int port_,
  ) {
    return _wire_handle_return_unit(
      port_,
    );
  }

  late final _wire_handle_return_unitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_handle_return_unit');
  late final _wire_handle_return_unit = _wire_handle_return_unitPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_handle_return_unit_sync() {
    return _wire_handle_return_unit_sync();
  }

  late final _wire_handle_return_unit_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_handle_return_unit_sync');
  late final _wire_handle_return_unit_sync = _wire_handle_return_unit_syncPtr.asFunction<WireSyncReturn Function()>();

  void wire_handle_vec_u8(
    int port_,
    ffi.Pointer<wire_uint_8_list> v,
  ) {
    return _wire_handle_vec_u8(
      port_,
      v,
    );
  }

  late final _wire_handle_vec_u8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_vec_u8');
  late final _wire_handle_vec_u8 =
      _wire_handle_vec_u8Ptr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_handle_vec_u8_sync(
    ffi.Pointer<wire_uint_8_list> v,
  ) {
    return _wire_handle_vec_u8_sync(
      v,
    );
  }

  late final _wire_handle_vec_u8_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>('wire_handle_vec_u8_sync');
  late final _wire_handle_vec_u8_sync =
      _wire_handle_vec_u8_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_vec_of_primitive(
    int port_,
    int n,
  ) {
    return _wire_handle_vec_of_primitive(
      port_,
      n,
    );
  }

  late final _wire_handle_vec_of_primitivePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_handle_vec_of_primitive');
  late final _wire_handle_vec_of_primitive = _wire_handle_vec_of_primitivePtr.asFunction<void Function(int, int)>();

  WireSyncReturn wire_handle_vec_of_primitive_sync(
    int n,
  ) {
    return _wire_handle_vec_of_primitive_sync(
      n,
    );
  }

  late final _wire_handle_vec_of_primitive_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32)>>('wire_handle_vec_of_primitive_sync');
  late final _wire_handle_vec_of_primitive_sync =
      _wire_handle_vec_of_primitive_syncPtr.asFunction<WireSyncReturn Function(int)>();

  void wire_handle_zero_copy_vec_of_primitive(
    int port_,
    int n,
  ) {
    return _wire_handle_zero_copy_vec_of_primitive(
      port_,
      n,
    );
  }

  late final _wire_handle_zero_copy_vec_of_primitivePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_handle_zero_copy_vec_of_primitive');
  late final _wire_handle_zero_copy_vec_of_primitive =
      _wire_handle_zero_copy_vec_of_primitivePtr.asFunction<void Function(int, int)>();

  WireSyncReturn wire_handle_zero_copy_vec_of_primitive_sync(
    int n,
  ) {
    return _wire_handle_zero_copy_vec_of_primitive_sync(
      n,
    );
  }

  late final _wire_handle_zero_copy_vec_of_primitive_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32)>>('wire_handle_zero_copy_vec_of_primitive_sync');
  late final _wire_handle_zero_copy_vec_of_primitive_sync =
      _wire_handle_zero_copy_vec_of_primitive_syncPtr.asFunction<WireSyncReturn Function(int)>();

  void wire_handle_struct(
    int port_,
    ffi.Pointer<wire_MySize> arg,
    ffi.Pointer<wire_MySize> boxed,
  ) {
    return _wire_handle_struct(
      port_,
      arg,
      boxed,
    );
  }

  late final _wire_handle_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>>(
          'wire_handle_struct');
  late final _wire_handle_struct =
      _wire_handle_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>();

  WireSyncReturn wire_handle_struct_sync(
    ffi.Pointer<wire_MySize> arg,
    ffi.Pointer<wire_MySize> boxed,
  ) {
    return _wire_handle_struct_sync(
      arg,
      boxed,
    );
  }

  late final _wire_handle_struct_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>>(
          'wire_handle_struct_sync');
  late final _wire_handle_struct_sync = _wire_handle_struct_syncPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>();

  WireSyncReturn wire_handle_struct_sync_freezed(
    ffi.Pointer<wire_MySizeFreezed> arg,
    ffi.Pointer<wire_MySizeFreezed> boxed,
  ) {
    return _wire_handle_struct_sync_freezed(
      arg,
      boxed,
    );
  }

  late final _wire_handle_struct_sync_freezedPtr = _lookup<
          ffi
          .NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_MySizeFreezed>, ffi.Pointer<wire_MySizeFreezed>)>>(
      'wire_handle_struct_sync_freezed');
  late final _wire_handle_struct_sync_freezed = _wire_handle_struct_sync_freezedPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_MySizeFreezed>, ffi.Pointer<wire_MySizeFreezed>)>();

  void wire_handle_newtype(
    int port_,
    ffi.Pointer<wire_NewTypeInt> arg,
  ) {
    return _wire_handle_newtype(
      port_,
      arg,
    );
  }

  late final _wire_handle_newtypePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NewTypeInt>)>>('wire_handle_newtype');
  late final _wire_handle_newtype =
      _wire_handle_newtypePtr.asFunction<void Function(int, ffi.Pointer<wire_NewTypeInt>)>();

  WireSyncReturn wire_handle_newtype_sync(
    ffi.Pointer<wire_NewTypeInt> arg,
  ) {
    return _wire_handle_newtype_sync(
      arg,
    );
  }

  late final _wire_handle_newtype_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_NewTypeInt>)>>('wire_handle_newtype_sync');
  late final _wire_handle_newtype_sync =
      _wire_handle_newtype_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_NewTypeInt>)>();

  void wire_handle_list_of_struct(
    int port_,
    ffi.Pointer<wire_list_my_size> l,
  ) {
    return _wire_handle_list_of_struct(
      port_,
      l,
    );
  }

  late final _wire_handle_list_of_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_my_size>)>>(
          'wire_handle_list_of_struct');
  late final _wire_handle_list_of_struct =
      _wire_handle_list_of_structPtr.asFunction<void Function(int, ffi.Pointer<wire_list_my_size>)>();

  WireSyncReturn wire_handle_list_of_struct_sync(
    ffi.Pointer<wire_list_my_size> l,
  ) {
    return _wire_handle_list_of_struct_sync(
      l,
    );
  }

  late final _wire_handle_list_of_struct_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_list_my_size>)>>(
          'wire_handle_list_of_struct_sync');
  late final _wire_handle_list_of_struct_sync =
      _wire_handle_list_of_struct_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_list_my_size>)>();

  void wire_handle_string_list(
    int port_,
    ffi.Pointer<wire_StringList> names,
  ) {
    return _wire_handle_string_list(
      port_,
      names,
    );
  }

  late final _wire_handle_string_listPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_StringList>)>>(
          'wire_handle_string_list');
  late final _wire_handle_string_list =
      _wire_handle_string_listPtr.asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  WireSyncReturn wire_handle_string_list_sync(
    ffi.Pointer<wire_StringList> names,
  ) {
    return _wire_handle_string_list_sync(
      names,
    );
  }

  late final _wire_handle_string_list_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_StringList>)>>(
          'wire_handle_string_list_sync');
  late final _wire_handle_string_list_sync =
      _wire_handle_string_list_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_StringList>)>();

  void wire_handle_complex_struct(
    int port_,
    ffi.Pointer<wire_MyTreeNode> s,
  ) {
    return _wire_handle_complex_struct(
      port_,
      s,
    );
  }

  late final _wire_handle_complex_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MyTreeNode>)>>(
          'wire_handle_complex_struct');
  late final _wire_handle_complex_struct =
      _wire_handle_complex_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MyTreeNode>)>();

  WireSyncReturn wire_handle_complex_struct_sync(
    ffi.Pointer<wire_MyTreeNode> s,
  ) {
    return _wire_handle_complex_struct_sync(
      s,
    );
  }

  late final _wire_handle_complex_struct_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_MyTreeNode>)>>(
          'wire_handle_complex_struct_sync');
  late final _wire_handle_complex_struct_sync =
      _wire_handle_complex_struct_syncPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_MyTreeNode>)>();

  void wire_handle_nested_struct(
    int port_,
    ffi.Pointer<wire_MyNestedStruct> s,
  ) {
    return _wire_handle_nested_struct(
      port_,
      s,
    );
  }

  late final _wire_handle_nested_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MyNestedStruct>)>>(
          'wire_handle_nested_struct');
  late final _wire_handle_nested_struct =
      _wire_handle_nested_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MyNestedStruct>)>();

  WireSyncReturn wire_handle_sync_return(
    ffi.Pointer<wire_uint_8_list> mode,
  ) {
    return _wire_handle_sync_return(
      mode,
    );
  }

  late final _wire_handle_sync_returnPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>('wire_handle_sync_return');
  late final _wire_handle_sync_return =
      _wire_handle_sync_returnPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_stream(
    int port_,
    ffi.Pointer<wire_uint_8_list> arg,
  ) {
    return _wire_handle_stream(
      port_,
      arg,
    );
  }

  late final _wire_handle_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_stream');
  late final _wire_handle_stream =
      _wire_handle_streamPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_stream_of_struct(
    int port_,
  ) {
    return _wire_handle_stream_of_struct(
      port_,
    );
  }

  late final _wire_handle_stream_of_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_handle_stream_of_struct');
  late final _wire_handle_stream_of_struct = _wire_handle_stream_of_structPtr.asFunction<void Function(int)>();

  void wire_return_err(
    int port_,
  ) {
    return _wire_return_err(
      port_,
    );
  }

  late final _wire_return_errPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_err');
  late final _wire_return_err = _wire_return_errPtr.asFunction<void Function(int)>();

  void wire_return_panic(
    int port_,
  ) {
    return _wire_return_panic(
      port_,
    );
  }

  late final _wire_return_panicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_panic');
  late final _wire_return_panic = _wire_return_panicPtr.asFunction<void Function(int)>();

  void wire_handle_optional_return(
    int port_,
    double left,
    double right,
  ) {
    return _wire_handle_optional_return(
      port_,
      left,
      right,
    );
  }

  late final _wire_handle_optional_returnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Double, ffi.Double)>>('wire_handle_optional_return');
  late final _wire_handle_optional_return =
      _wire_handle_optional_returnPtr.asFunction<void Function(int, double, double)>();

  void wire_handle_optional_struct(
    int port_,
    ffi.Pointer<wire_uint_8_list> document,
  ) {
    return _wire_handle_optional_struct(
      port_,
      document,
    );
  }

  late final _wire_handle_optional_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_handle_optional_struct');
  late final _wire_handle_optional_struct =
      _wire_handle_optional_structPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_optional_increment(
    int port_,
    ffi.Pointer<wire_ExoticOptionals> opt,
  ) {
    return _wire_handle_optional_increment(
      port_,
      opt,
    );
  }

  late final _wire_handle_optional_incrementPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ExoticOptionals>)>>(
          'wire_handle_optional_increment');
  late final _wire_handle_optional_increment =
      _wire_handle_optional_incrementPtr.asFunction<void Function(int, ffi.Pointer<wire_ExoticOptionals>)>();

  void wire_handle_increment_boxed_optional(
    int port_,
    ffi.Pointer<ffi.Double> opt,
  ) {
    return _wire_handle_increment_boxed_optional(
      port_,
      opt,
    );
  }

  late final _wire_handle_increment_boxed_optionalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Double>)>>(
          'wire_handle_increment_boxed_optional');
  late final _wire_handle_increment_boxed_optional =
      _wire_handle_increment_boxed_optionalPtr.asFunction<void Function(int, ffi.Pointer<ffi.Double>)>();

  void wire_handle_vec_of_opts(
    int port_,
    ffi.Pointer<wire_OptVecs> opt,
  ) {
    return _wire_handle_vec_of_opts(
      port_,
      opt,
    );
  }

  late final _wire_handle_vec_of_optsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OptVecs>)>>('wire_handle_vec_of_opts');
  late final _wire_handle_vec_of_opts =
      _wire_handle_vec_of_optsPtr.asFunction<void Function(int, ffi.Pointer<wire_OptVecs>)>();

  void wire_handle_option_box_arguments(
    int port_,
    ffi.Pointer<ffi.Int8> i8box,
    ffi.Pointer<ffi.Uint8> u8box,
    ffi.Pointer<ffi.Int32> i32box,
    ffi.Pointer<ffi.Int64> i64box,
    ffi.Pointer<ffi.Double> f64box,
    ffi.Pointer<ffi.Bool> boolbox,
    ffi.Pointer<wire_ExoticOptionals> structbox,
  ) {
    return _wire_handle_option_box_arguments(
      port_,
      i8box,
      u8box,
      i32box,
      i64box,
      f64box,
      boolbox,
      structbox,
    );
  }

  late final _wire_handle_option_box_argumentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<wire_ExoticOptionals>)>>('wire_handle_option_box_arguments');
  late final _wire_handle_option_box_arguments = _wire_handle_option_box_argumentsPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>, ffi.Pointer<wire_ExoticOptionals>)>();

  void wire_print_note(
    int port_,
    ffi.Pointer<wire_Note> note,
  ) {
    return _wire_print_note(
      port_,
      note,
    );
  }

  late final _wire_print_notePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Note>)>>('wire_print_note');
  late final _wire_print_note = _wire_print_notePtr.asFunction<void Function(int, ffi.Pointer<wire_Note>)>();

  void wire_handle_return_enum(
    int port_,
    ffi.Pointer<wire_uint_8_list> input,
  ) {
    return _wire_handle_return_enum(
      port_,
      input,
    );
  }

  late final _wire_handle_return_enumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_handle_return_enum');
  late final _wire_handle_return_enum =
      _wire_handle_return_enumPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_enum_parameter(
    int port_,
    int weekday,
  ) {
    return _wire_handle_enum_parameter(
      port_,
      weekday,
    );
  }

  late final _wire_handle_enum_parameterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_handle_enum_parameter');
  late final _wire_handle_enum_parameter = _wire_handle_enum_parameterPtr.asFunction<void Function(int, int)>();

  WireSyncReturn wire_handle_enum_sync_freezed(
    ffi.Pointer<wire_MyEnumFreezed> value,
  ) {
    return _wire_handle_enum_sync_freezed(
      value,
    );
  }

  late final _wire_handle_enum_sync_freezedPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_MyEnumFreezed>)>>(
          'wire_handle_enum_sync_freezed');
  late final _wire_handle_enum_sync_freezed =
      _wire_handle_enum_sync_freezedPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_MyEnumFreezed>)>();

  void wire_handle_customized_struct(
    int port_,
    ffi.Pointer<wire_Customized> val,
  ) {
    return _wire_handle_customized_struct(
      port_,
      val,
    );
  }

  late final _wire_handle_customized_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Customized>)>>(
          'wire_handle_customized_struct');
  late final _wire_handle_customized_struct =
      _wire_handle_customized_structPtr.asFunction<void Function(int, ffi.Pointer<wire_Customized>)>();

  void wire_handle_enum_struct(
    int port_,
    ffi.Pointer<wire_KitchenSink> val,
  ) {
    return _wire_handle_enum_struct(
      port_,
      val,
    );
  }

  late final _wire_handle_enum_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_KitchenSink>)>>(
          'wire_handle_enum_struct');
  late final _wire_handle_enum_struct =
      _wire_handle_enum_structPtr.asFunction<void Function(int, ffi.Pointer<wire_KitchenSink>)>();

  void wire_use_imported_struct(
    int port_,
    ffi.Pointer<wire_MyStruct> my_struct,
  ) {
    return _wire_use_imported_struct(
      port_,
      my_struct,
    );
  }

  late final _wire_use_imported_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MyStruct>)>>('wire_use_imported_struct');
  late final _wire_use_imported_struct =
      _wire_use_imported_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MyStruct>)>();

  void wire_use_imported_enum(
    int port_,
    int my_enum,
  ) {
    return _wire_use_imported_enum(
      port_,
      my_enum,
    );
  }

  late final _wire_use_imported_enumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_use_imported_enum');
  late final _wire_use_imported_enum = _wire_use_imported_enumPtr.asFunction<void Function(int, int)>();

  void wire_get_app_settings(
    int port_,
  ) {
    return _wire_get_app_settings(
      port_,
    );
  }

  late final _wire_get_app_settingsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_app_settings');
  late final _wire_get_app_settings = _wire_get_app_settingsPtr.asFunction<void Function(int)>();

  void wire_get_fallible_app_settings(
    int port_,
  ) {
    return _wire_get_fallible_app_settings(
      port_,
    );
  }

  late final _wire_get_fallible_app_settingsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_fallible_app_settings');
  late final _wire_get_fallible_app_settings = _wire_get_fallible_app_settingsPtr.asFunction<void Function(int)>();

  void wire_is_app_embedded(
    int port_,
    ffi.Pointer<wire_ApplicationSettings> app_settings,
  ) {
    return _wire_is_app_embedded(
      port_,
      app_settings,
    );
  }

  late final _wire_is_app_embeddedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ApplicationSettings>)>>(
          'wire_is_app_embedded');
  late final _wire_is_app_embedded =
      _wire_is_app_embeddedPtr.asFunction<void Function(int, ffi.Pointer<wire_ApplicationSettings>)>();

  void wire_app_settings_stream(
    int port_,
  ) {
    return _wire_app_settings_stream(
      port_,
    );
  }

  late final _wire_app_settings_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_app_settings_stream');
  late final _wire_app_settings_stream = _wire_app_settings_streamPtr.asFunction<void Function(int)>();

  void wire_app_settings_vec_stream(
    int port_,
  ) {
    return _wire_app_settings_vec_stream(
      port_,
    );
  }

  late final _wire_app_settings_vec_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_app_settings_vec_stream');
  late final _wire_app_settings_vec_stream = _wire_app_settings_vec_streamPtr.asFunction<void Function(int)>();

  void wire_mirror_struct_stream(
    int port_,
  ) {
    return _wire_mirror_struct_stream(
      port_,
    );
  }

  late final _wire_mirror_struct_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_mirror_struct_stream');
  late final _wire_mirror_struct_stream = _wire_mirror_struct_streamPtr.asFunction<void Function(int)>();

  void wire_mirror_tuple_stream(
    int port_,
  ) {
    return _wire_mirror_tuple_stream(
      port_,
    );
  }

  late final _wire_mirror_tuple_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_mirror_tuple_stream');
  late final _wire_mirror_tuple_stream = _wire_mirror_tuple_streamPtr.asFunction<void Function(int)>();

  void wire_get_message(
    int port_,
  ) {
    return _wire_get_message(
      port_,
    );
  }

  late final _wire_get_messagePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_message');
  late final _wire_get_message = _wire_get_messagePtr.asFunction<void Function(int)>();

  void wire_repeat_number(
    int port_,
    int num,
    int times,
  ) {
    return _wire_repeat_number(
      port_,
      num,
      times,
    );
  }

  late final _wire_repeat_numberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.UintPtr)>>('wire_repeat_number');
  late final _wire_repeat_number = _wire_repeat_numberPtr.asFunction<void Function(int, int, int)>();

  void wire_repeat_sequence(
    int port_,
    int seq,
    int times,
  ) {
    return _wire_repeat_sequence(
      port_,
      seq,
      times,
    );
  }

  late final _wire_repeat_sequencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.UintPtr)>>('wire_repeat_sequence');
  late final _wire_repeat_sequence = _wire_repeat_sequencePtr.asFunction<void Function(int, int, int)>();

  void wire_first_number(
    int port_,
    ffi.Pointer<wire_Numbers> nums,
  ) {
    return _wire_first_number(
      port_,
      nums,
    );
  }

  late final _wire_first_numberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Numbers>)>>('wire_first_number');
  late final _wire_first_number = _wire_first_numberPtr.asFunction<void Function(int, ffi.Pointer<wire_Numbers>)>();

  void wire_first_sequence(
    int port_,
    ffi.Pointer<wire_Sequences> seqs,
  ) {
    return _wire_first_sequence(
      port_,
      seqs,
    );
  }

  late final _wire_first_sequencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Sequences>)>>('wire_first_sequence');
  late final _wire_first_sequence =
      _wire_first_sequencePtr.asFunction<void Function(int, ffi.Pointer<wire_Sequences>)>();

  void wire_get_array(
    int port_,
  ) {
    return _wire_get_array(
      port_,
    );
  }

  late final _wire_get_arrayPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_array');
  late final _wire_get_array = _wire_get_arrayPtr.asFunction<void Function(int)>();

  void wire_get_complex_array(
    int port_,
  ) {
    return _wire_get_complex_array(
      port_,
    );
  }

  late final _wire_get_complex_arrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_complex_array');
  late final _wire_get_complex_array = _wire_get_complex_arrayPtr.asFunction<void Function(int)>();

  void wire_get_usize(
    int port_,
    int u,
  ) {
    return _wire_get_usize(
      port_,
      u,
    );
  }

  late final _wire_get_usizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>('wire_get_usize');
  late final _wire_get_usize = _wire_get_usizePtr.asFunction<void Function(int, int)>();

  void wire_next_user_id(
    int port_,
    ffi.Pointer<wire_UserId> user_id,
  ) {
    return _wire_next_user_id(
      port_,
      user_id,
    );
  }

  late final _wire_next_user_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_UserId>)>>('wire_next_user_id');
  late final _wire_next_user_id = _wire_next_user_idPtr.asFunction<void Function(int, ffi.Pointer<wire_UserId>)>();

  void wire_register_event_listener(
    int port_,
  ) {
    return _wire_register_event_listener(
      port_,
    );
  }

  late final _wire_register_event_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_register_event_listener');
  late final _wire_register_event_listener = _wire_register_event_listenerPtr.asFunction<void Function(int)>();

  void wire_close_event_listener(
    int port_,
  ) {
    return _wire_close_event_listener(
      port_,
    );
  }

  late final _wire_close_event_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_close_event_listener');
  late final _wire_close_event_listener = _wire_close_event_listenerPtr.asFunction<void Function(int)>();

  void wire_create_event(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
    ffi.Pointer<wire_uint_8_list> payload,
  ) {
    return _wire_create_event(
      port_,
      address,
      payload,
    );
  }

  late final _wire_create_eventPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_create_event');
  late final _wire_create_event = _wire_create_eventPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_stream_sink_at_1(
    int port_,
    int key,
    int max,
  ) {
    return _wire_handle_stream_sink_at_1(
      port_,
      key,
      max,
    );
  }

  late final _wire_handle_stream_sink_at_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32)>>('wire_handle_stream_sink_at_1');
  late final _wire_handle_stream_sink_at_1 =
      _wire_handle_stream_sink_at_1Ptr.asFunction<void Function(int, int, int)>();

  void wire_handle_stream_sink_at_2(
    int port_,
    int key,
    int max,
  ) {
    return _wire_handle_stream_sink_at_2(
      port_,
      key,
      max,
    );
  }

  late final _wire_handle_stream_sink_at_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32)>>('wire_handle_stream_sink_at_2');
  late final _wire_handle_stream_sink_at_2 =
      _wire_handle_stream_sink_at_2Ptr.asFunction<void Function(int, int, int)>();

  void wire_handle_stream_sink_at_3(
    int port_,
    int key,
    int max,
  ) {
    return _wire_handle_stream_sink_at_3(
      port_,
      key,
      max,
    );
  }

  late final _wire_handle_stream_sink_at_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32)>>('wire_handle_stream_sink_at_3');
  late final _wire_handle_stream_sink_at_3 =
      _wire_handle_stream_sink_at_3Ptr.asFunction<void Function(int, int, int)>();

  void wire_get_sum_struct(
    int port_,
  ) {
    return _wire_get_sum_struct(
      port_,
    );
  }

  late final _wire_get_sum_structPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_sum_struct');
  late final _wire_get_sum_struct = _wire_get_sum_structPtr.asFunction<void Function(int)>();

  void wire_get_sum_array(
    int port_,
    int a,
    int b,
    int c,
  ) {
    return _wire_get_sum_array(
      port_,
      a,
      b,
      c,
    );
  }

  late final _wire_get_sum_arrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32, ffi.Uint32)>>(
          'wire_get_sum_array');
  late final _wire_get_sum_array = _wire_get_sum_arrayPtr.asFunction<void Function(int, int, int, int)>();

  void wire_multiply_by_ten(
    int port_,
    ffi.Pointer<wire_Measure> measure,
  ) {
    return _wire_multiply_by_ten(
      port_,
      measure,
    );
  }

  late final _wire_multiply_by_tenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Measure>)>>('wire_multiply_by_ten');
  late final _wire_multiply_by_ten =
      _wire_multiply_by_tenPtr.asFunction<void Function(int, ffi.Pointer<wire_Measure>)>();

  void wire_call_old_module_system(
    int port_,
  ) {
    return _wire_call_old_module_system(
      port_,
    );
  }

  late final _wire_call_old_module_systemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_call_old_module_system');
  late final _wire_call_old_module_system = _wire_call_old_module_systemPtr.asFunction<void Function(int)>();

  void wire_call_new_module_system(
    int port_,
  ) {
    return _wire_call_new_module_system(
      port_,
    );
  }

  late final _wire_call_new_module_systemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_call_new_module_system');
  late final _wire_call_new_module_system = _wire_call_new_module_systemPtr.asFunction<void Function(int)>();

  void wire_handle_big_buffers(
    int port_,
  ) {
    return _wire_handle_big_buffers(
      port_,
    );
  }

  late final _wire_handle_big_buffersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_handle_big_buffers');
  late final _wire_handle_big_buffers = _wire_handle_big_buffersPtr.asFunction<void Function(int)>();

  void wire_datetime_utc(
    int port_,
    int d,
  ) {
    return _wire_datetime_utc(
      port_,
      d,
    );
  }

  late final _wire_datetime_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>('wire_datetime_utc');
  late final _wire_datetime_utc = _wire_datetime_utcPtr.asFunction<void Function(int, int)>();

  void wire_datetime_local(
    int port_,
    int d,
  ) {
    return _wire_datetime_local(
      port_,
      d,
    );
  }

  late final _wire_datetime_localPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>('wire_datetime_local');
  late final _wire_datetime_local = _wire_datetime_localPtr.asFunction<void Function(int, int)>();

  void wire_naivedatetime(
    int port_,
    int d,
  ) {
    return _wire_naivedatetime(
      port_,
      d,
    );
  }

  late final _wire_naivedatetimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>('wire_naivedatetime');
  late final _wire_naivedatetime = _wire_naivedatetimePtr.asFunction<void Function(int, int)>();

  void wire_optional_empty_datetime_utc(
    int port_,
    ffi.Pointer<ffi.Int64> d,
  ) {
    return _wire_optional_empty_datetime_utc(
      port_,
      d,
    );
  }

  late final _wire_optional_empty_datetime_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Int64>)>>(
          'wire_optional_empty_datetime_utc');
  late final _wire_optional_empty_datetime_utc =
      _wire_optional_empty_datetime_utcPtr.asFunction<void Function(int, ffi.Pointer<ffi.Int64>)>();

  void wire_duration(
    int port_,
    int d,
  ) {
    return _wire_duration(
      port_,
      d,
    );
  }

  late final _wire_durationPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>('wire_duration');
  late final _wire_duration = _wire_durationPtr.asFunction<void Function(int, int)>();

  void wire_handle_timestamps(
    int port_,
    ffi.Pointer<wire_int_64_list> timestamps,
    int epoch,
  ) {
    return _wire_handle_timestamps(
      port_,
      timestamps,
      epoch,
    );
  }

  late final _wire_handle_timestampsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_int_64_list>, ffi.Int64)>>(
          'wire_handle_timestamps');
  late final _wire_handle_timestamps =
      _wire_handle_timestampsPtr.asFunction<void Function(int, ffi.Pointer<wire_int_64_list>, int)>();

  void wire_handle_durations(
    int port_,
    ffi.Pointer<wire_int_64_list> durations,
    int since,
  ) {
    return _wire_handle_durations(
      port_,
      durations,
      since,
    );
  }

  late final _wire_handle_durationsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_int_64_list>, ffi.Int64)>>(
          'wire_handle_durations');
  late final _wire_handle_durations =
      _wire_handle_durationsPtr.asFunction<void Function(int, ffi.Pointer<wire_int_64_list>, int)>();

  void wire_test_chrono(
    int port_,
  ) {
    return _wire_test_chrono(
      port_,
    );
  }

  late final _wire_test_chronoPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_chrono');
  late final _wire_test_chrono = _wire_test_chronoPtr.asFunction<void Function(int)>();

  void wire_test_precise_chrono(
    int port_,
  ) {
    return _wire_test_precise_chrono(
      port_,
    );
  }

  late final _wire_test_precise_chronoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_precise_chrono');
  late final _wire_test_precise_chrono = _wire_test_precise_chronoPtr.asFunction<void Function(int)>();

  void wire_how_long_does_it_take(
    int port_,
    ffi.Pointer<wire_FeatureChrono> mine,
  ) {
    return _wire_how_long_does_it_take(
      port_,
      mine,
    );
  }

  late final _wire_how_long_does_it_takePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_FeatureChrono>)>>(
          'wire_how_long_does_it_take');
  late final _wire_how_long_does_it_take =
      _wire_how_long_does_it_takePtr.asFunction<void Function(int, ffi.Pointer<wire_FeatureChrono>)>();

  void wire_handle_uuid(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_handle_uuid(
      port_,
      id,
    );
  }

  late final _wire_handle_uuidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_uuid');
  late final _wire_handle_uuid = _wire_handle_uuidPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_uuids(
    int port_,
    ffi.Pointer<wire_uint_8_list> ids,
  ) {
    return _wire_handle_uuids(
      port_,
      ids,
    );
  }

  late final _wire_handle_uuidsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_uuids');
  late final _wire_handle_uuids = _wire_handle_uuidsPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_nested_uuids(
    int port_,
    ffi.Pointer<wire_FeatureUuid> ids,
  ) {
    return _wire_handle_nested_uuids(
      port_,
      ids,
    );
  }

  late final _wire_handle_nested_uuidsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_FeatureUuid>)>>(
          'wire_handle_nested_uuids');
  late final _wire_handle_nested_uuids =
      _wire_handle_nested_uuidsPtr.asFunction<void Function(int, ffi.Pointer<wire_FeatureUuid>)>();

  void wire_new_msgid(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_new_msgid(
      port_,
      id,
    );
  }

  late final _wire_new_msgidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_new_msgid');
  late final _wire_new_msgid = _wire_new_msgidPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_use_msgid(
    int port_,
    ffi.Pointer<wire_MessageId> id,
  ) {
    return _wire_use_msgid(
      port_,
      id,
    );
  }

  late final _wire_use_msgidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MessageId>)>>('wire_use_msgid');
  late final _wire_use_msgid = _wire_use_msgidPtr.asFunction<void Function(int, ffi.Pointer<wire_MessageId>)>();

  void wire_boxed_blob(
    int port_,
    ffi.Pointer<wire_uint_8_list> blob,
  ) {
    return _wire_boxed_blob(
      port_,
      blob,
    );
  }

  late final _wire_boxed_blobPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_boxed_blob');
  late final _wire_boxed_blob = _wire_boxed_blobPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_use_boxed_blob(
    int port_,
    ffi.Pointer<wire_Blob> blob,
  ) {
    return _wire_use_boxed_blob(
      port_,
      blob,
    );
  }

  late final _wire_use_boxed_blobPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Blob>)>>('wire_use_boxed_blob');
  late final _wire_use_boxed_blob = _wire_use_boxed_blobPtr.asFunction<void Function(int, ffi.Pointer<wire_Blob>)>();

  void wire_return_boxed_feed_id(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_return_boxed_feed_id(
      port_,
      id,
    );
  }

  late final _wire_return_boxed_feed_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_return_boxed_feed_id');
  late final _wire_return_boxed_feed_id =
      _wire_return_boxed_feed_idPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_return_boxed_raw_feed_id(
    int port_,
    ffi.Pointer<wire_FeedId> id,
  ) {
    return _wire_return_boxed_raw_feed_id(
      port_,
      id,
    );
  }

  late final _wire_return_boxed_raw_feed_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_FeedId>)>>(
          'wire_return_boxed_raw_feed_id');
  late final _wire_return_boxed_raw_feed_id =
      _wire_return_boxed_raw_feed_idPtr.asFunction<void Function(int, ffi.Pointer<wire_FeedId>)>();

  void wire_test_id(
    int port_,
    ffi.Pointer<wire_TestId> id,
  ) {
    return _wire_test_id(
      port_,
      id,
    );
  }

  late final _wire_test_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_TestId>)>>('wire_test_id');
  late final _wire_test_id = _wire_test_idPtr.asFunction<void Function(int, ffi.Pointer<wire_TestId>)>();

  void wire_last_number(
    int port_,
    ffi.Pointer<wire_float_64_list> array,
  ) {
    return _wire_last_number(
      port_,
      array,
    );
  }

  late final _wire_last_numberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_float_64_list>)>>('wire_last_number');
  late final _wire_last_number = _wire_last_numberPtr.asFunction<void Function(int, ffi.Pointer<wire_float_64_list>)>();

  void wire_nested_id(
    int port_,
    ffi.Pointer<wire_list_test_id> id,
  ) {
    return _wire_nested_id(
      port_,
      id,
    );
  }

  late final _wire_nested_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_test_id>)>>('wire_nested_id');
  late final _wire_nested_id = _wire_nested_idPtr.asFunction<void Function(int, ffi.Pointer<wire_list_test_id>)>();

  WireSyncReturn wire_sync_accept_dart_opaque(
    wire_DartOpaque opaque,
  ) {
    return _wire_sync_accept_dart_opaque(
      opaque,
    );
  }

  late final _wire_sync_accept_dart_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>('wire_sync_accept_dart_opaque');
  late final _wire_sync_accept_dart_opaque =
      _wire_sync_accept_dart_opaquePtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  void wire_async_accept_dart_opaque(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_async_accept_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_async_accept_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_async_accept_dart_opaque');
  late final _wire_async_accept_dart_opaque =
      _wire_async_accept_dart_opaquePtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_loop_back(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_loop_back(
      port_,
      opaque,
    );
  }

  late final _wire_loop_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_loop_back');
  late final _wire_loop_back = _wire_loop_backPtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_loop_back_option(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_loop_back_option(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_optionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_loop_back_option');
  late final _wire_loop_back_option = _wire_loop_back_optionPtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_loop_back_array(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_loop_back_array(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_arrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_loop_back_array');
  late final _wire_loop_back_array = _wire_loop_back_arrayPtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_loop_back_vec(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_loop_back_vec(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_vecPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_loop_back_vec');
  late final _wire_loop_back_vec = _wire_loop_back_vecPtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_loop_back_option_get(
    int port_,
    ffi.Pointer<wire_DartOpaque> opaque,
  ) {
    return _wire_loop_back_option_get(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_option_getPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_DartOpaque>)>>(
          'wire_loop_back_option_get');
  late final _wire_loop_back_option_get =
      _wire_loop_back_option_getPtr.asFunction<void Function(int, ffi.Pointer<wire_DartOpaque>)>();

  void wire_loop_back_array_get(
    int port_,
    ffi.Pointer<wire_list_DartOpaque> opaque,
  ) {
    return _wire_loop_back_array_get(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_array_getPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_DartOpaque>)>>(
          'wire_loop_back_array_get');
  late final _wire_loop_back_array_get =
      _wire_loop_back_array_getPtr.asFunction<void Function(int, ffi.Pointer<wire_list_DartOpaque>)>();

  void wire_loop_back_vec_get(
    int port_,
    ffi.Pointer<wire_list_DartOpaque> opaque,
  ) {
    return _wire_loop_back_vec_get(
      port_,
      opaque,
    );
  }

  late final _wire_loop_back_vec_getPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_DartOpaque>)>>(
          'wire_loop_back_vec_get');
  late final _wire_loop_back_vec_get =
      _wire_loop_back_vec_getPtr.asFunction<void Function(int, ffi.Pointer<wire_list_DartOpaque>)>();

  WireSyncReturn wire_unwrap_dart_opaque(
    wire_DartOpaque opaque,
  ) {
    return _wire_unwrap_dart_opaque(
      opaque,
    );
  }

  late final _wire_unwrap_dart_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>('wire_unwrap_dart_opaque');
  late final _wire_unwrap_dart_opaque =
      _wire_unwrap_dart_opaquePtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  void wire_panic_unwrap_dart_opaque(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_panic_unwrap_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_panic_unwrap_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_panic_unwrap_dart_opaque');
  late final _wire_panic_unwrap_dart_opaque =
      _wire_panic_unwrap_dart_opaquePtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_create_opaque(
    int port_,
  ) {
    return _wire_create_opaque(
      port_,
    );
  }

  late final _wire_create_opaquePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_opaque');
  late final _wire_create_opaque = _wire_create_opaquePtr.asFunction<void Function(int)>();

  void wire_create_option_opaque(
    int port_,
    ffi.Pointer<wire_HideData> opaque,
  ) {
    return _wire_create_option_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_create_option_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_HideData>)>>(
          'wire_create_option_opaque');
  late final _wire_create_option_opaque =
      _wire_create_option_opaquePtr.asFunction<void Function(int, ffi.Pointer<wire_HideData>)>();

  WireSyncReturn wire_sync_create_opaque() {
    return _wire_sync_create_opaque();
  }

  late final _wire_sync_create_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_create_opaque');
  late final _wire_sync_create_opaque = _wire_sync_create_opaquePtr.asFunction<WireSyncReturn Function()>();

  void wire_create_array_opaque_enum(
    int port_,
  ) {
    return _wire_create_array_opaque_enum(
      port_,
    );
  }

  late final _wire_create_array_opaque_enumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_array_opaque_enum');
  late final _wire_create_array_opaque_enum = _wire_create_array_opaque_enumPtr.asFunction<void Function(int)>();

  void wire_run_enum_opaque(
    int port_,
    ffi.Pointer<wire_EnumOpaque> opaque,
  ) {
    return _wire_run_enum_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_run_enum_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_EnumOpaque>)>>('wire_run_enum_opaque');
  late final _wire_run_enum_opaque =
      _wire_run_enum_opaquePtr.asFunction<void Function(int, ffi.Pointer<wire_EnumOpaque>)>();

  void wire_run_opaque(
    int port_,
    wire_HideData opaque,
  ) {
    return _wire_run_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_run_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_HideData)>>('wire_run_opaque');
  late final _wire_run_opaque = _wire_run_opaquePtr.asFunction<void Function(int, wire_HideData)>();

  void wire_run_opaque_with_delay(
    int port_,
    wire_HideData opaque,
  ) {
    return _wire_run_opaque_with_delay(
      port_,
      opaque,
    );
  }

  late final _wire_run_opaque_with_delayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_HideData)>>('wire_run_opaque_with_delay');
  late final _wire_run_opaque_with_delay =
      _wire_run_opaque_with_delayPtr.asFunction<void Function(int, wire_HideData)>();

  void wire_opaque_array(
    int port_,
  ) {
    return _wire_opaque_array(
      port_,
    );
  }

  late final _wire_opaque_arrayPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_opaque_array');
  late final _wire_opaque_array = _wire_opaque_arrayPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_sync_create_non_clone() {
    return _wire_sync_create_non_clone();
  }

  late final _wire_sync_create_non_clonePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_create_non_clone');
  late final _wire_sync_create_non_clone = _wire_sync_create_non_clonePtr.asFunction<WireSyncReturn Function()>();

  void wire_run_non_clone(
    int port_,
    wire_NonCloneData clone,
  ) {
    return _wire_run_non_clone(
      port_,
      clone,
    );
  }

  late final _wire_run_non_clonePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_NonCloneData)>>('wire_run_non_clone');
  late final _wire_run_non_clone = _wire_run_non_clonePtr.asFunction<void Function(int, wire_NonCloneData)>();

  void wire_create_sync_opaque(
    int port_,
  ) {
    return _wire_create_sync_opaque(
      port_,
    );
  }

  late final _wire_create_sync_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_sync_opaque');
  late final _wire_create_sync_opaque = _wire_create_sync_opaquePtr.asFunction<void Function(int)>();

  WireSyncReturn wire_sync_create_sync_opaque() {
    return _wire_sync_create_sync_opaque();
  }

  late final _wire_sync_create_sync_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_create_sync_opaque');
  late final _wire_sync_create_sync_opaque = _wire_sync_create_sync_opaquePtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_sync_run_opaque(
    wire_NonSendHideData opaque,
  ) {
    return _wire_sync_run_opaque(
      opaque,
    );
  }

  late final _wire_sync_run_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_NonSendHideData)>>('wire_sync_run_opaque');
  late final _wire_sync_run_opaque =
      _wire_sync_run_opaquePtr.asFunction<WireSyncReturn Function(wire_NonSendHideData)>();

  void wire_opaque_array_run(
    int port_,
    ffi.Pointer<wire_list_HideData> data,
  ) {
    return _wire_opaque_array_run(
      port_,
      data,
    );
  }

  late final _wire_opaque_array_runPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_HideData>)>>(
          'wire_opaque_array_run');
  late final _wire_opaque_array_run =
      _wire_opaque_array_runPtr.asFunction<void Function(int, ffi.Pointer<wire_list_HideData>)>();

  void wire_opaque_vec(
    int port_,
  ) {
    return _wire_opaque_vec(
      port_,
    );
  }

  late final _wire_opaque_vecPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_opaque_vec');
  late final _wire_opaque_vec = _wire_opaque_vecPtr.asFunction<void Function(int)>();

  void wire_opaque_vec_run(
    int port_,
    ffi.Pointer<wire_list_HideData> data,
  ) {
    return _wire_opaque_vec_run(
      port_,
      data,
    );
  }

  late final _wire_opaque_vec_runPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_HideData>)>>('wire_opaque_vec_run');
  late final _wire_opaque_vec_run =
      _wire_opaque_vec_runPtr.asFunction<void Function(int, ffi.Pointer<wire_list_HideData>)>();

  void wire_create_nested_opaque(
    int port_,
  ) {
    return _wire_create_nested_opaque(
      port_,
    );
  }

  late final _wire_create_nested_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_nested_opaque');
  late final _wire_create_nested_opaque = _wire_create_nested_opaquePtr.asFunction<void Function(int)>();

  WireSyncReturn wire_sync_loopback(
    wire_DartOpaque opaque,
  ) {
    return _wire_sync_loopback(
      opaque,
    );
  }

  late final _wire_sync_loopbackPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>('wire_sync_loopback');
  late final _wire_sync_loopback = _wire_sync_loopbackPtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  WireSyncReturn wire_sync_option_loopback(
    ffi.Pointer<wire_DartOpaque> opaque,
  ) {
    return _wire_sync_option_loopback(
      opaque,
    );
  }

  late final _wire_sync_option_loopbackPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_DartOpaque>)>>('wire_sync_option_loopback');
  late final _wire_sync_option_loopback =
      _wire_sync_option_loopbackPtr.asFunction<WireSyncReturn Function(ffi.Pointer<wire_DartOpaque>)>();

  WireSyncReturn wire_sync_option() {
    return _wire_sync_option();
  }

  late final _wire_sync_optionPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_option');
  late final _wire_sync_option = _wire_sync_optionPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_sync_option_null() {
    return _wire_sync_option_null();
  }

  late final _wire_sync_option_nullPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_option_null');
  late final _wire_sync_option_null = _wire_sync_option_nullPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_sync_option_rust_opaque() {
    return _wire_sync_option_rust_opaque();
  }

  late final _wire_sync_option_rust_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_option_rust_opaque');
  late final _wire_sync_option_rust_opaque = _wire_sync_option_rust_opaquePtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_sync_option_dart_opaque(
    wire_DartOpaque opaque,
  ) {
    return _wire_sync_option_dart_opaque(
      opaque,
    );
  }

  late final _wire_sync_option_dart_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>('wire_sync_option_dart_opaque');
  late final _wire_sync_option_dart_opaque =
      _wire_sync_option_dart_opaquePtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  WireSyncReturn wire_sync_void() {
    return _wire_sync_void();
  }

  late final _wire_sync_voidPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_void');
  late final _wire_sync_void = _wire_sync_voidPtr.asFunction<WireSyncReturn Function()>();

  void wire_run_nested_opaque(
    int port_,
    ffi.Pointer<wire_OpaqueNested> opaque,
  ) {
    return _wire_run_nested_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_run_nested_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OpaqueNested>)>>(
          'wire_run_nested_opaque');
  late final _wire_run_nested_opaque =
      _wire_run_nested_opaquePtr.asFunction<void Function(int, ffi.Pointer<wire_OpaqueNested>)>();

  void wire_create_nested_dart_opaque(
    int port_,
    wire_DartOpaque opaque1,
    wire_DartOpaque opaque2,
  ) {
    return _wire_create_nested_dart_opaque(
      port_,
      opaque1,
      opaque2,
    );
  }

  late final _wire_create_nested_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque, wire_DartOpaque)>>(
          'wire_create_nested_dart_opaque');
  late final _wire_create_nested_dart_opaque =
      _wire_create_nested_dart_opaquePtr.asFunction<void Function(int, wire_DartOpaque, wire_DartOpaque)>();

  void wire_get_nested_dart_opaque(
    int port_,
    ffi.Pointer<wire_DartOpaqueNested> opaque,
  ) {
    return _wire_get_nested_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_get_nested_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_DartOpaqueNested>)>>(
          'wire_get_nested_dart_opaque');
  late final _wire_get_nested_dart_opaque =
      _wire_get_nested_dart_opaquePtr.asFunction<void Function(int, ffi.Pointer<wire_DartOpaqueNested>)>();

  void wire_create_enum_dart_opaque(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_create_enum_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_create_enum_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_create_enum_dart_opaque');
  late final _wire_create_enum_dart_opaque =
      _wire_create_enum_dart_opaquePtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_get_enum_dart_opaque(
    int port_,
    ffi.Pointer<wire_EnumDartOpaque> opaque,
  ) {
    return _wire_get_enum_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_get_enum_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_EnumDartOpaque>)>>(
          'wire_get_enum_dart_opaque');
  late final _wire_get_enum_dart_opaque =
      _wire_get_enum_dart_opaquePtr.asFunction<void Function(int, ffi.Pointer<wire_EnumDartOpaque>)>();

  void wire_set_static_dart_opaque(
    int port_,
    wire_DartOpaque opaque,
  ) {
    return _wire_set_static_dart_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_set_static_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DartOpaque)>>('wire_set_static_dart_opaque');
  late final _wire_set_static_dart_opaque =
      _wire_set_static_dart_opaquePtr.asFunction<void Function(int, wire_DartOpaque)>();

  void wire_drop_static_dart_opaque(
    int port_,
  ) {
    return _wire_drop_static_dart_opaque(
      port_,
    );
  }

  late final _wire_drop_static_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_drop_static_dart_opaque');
  late final _wire_drop_static_dart_opaque = _wire_drop_static_dart_opaquePtr.asFunction<void Function(int)>();

  void wire_unwrap_rust_opaque(
    int port_,
    wire_HideData opaque,
  ) {
    return _wire_unwrap_rust_opaque(
      port_,
      opaque,
    );
  }

  late final _wire_unwrap_rust_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_HideData)>>('wire_unwrap_rust_opaque');
  late final _wire_unwrap_rust_opaque = _wire_unwrap_rust_opaquePtr.asFunction<void Function(int, wire_HideData)>();

  WireSyncReturn wire_return_non_droppable_dart_opaque(
    wire_DartOpaque opaque,
  ) {
    return _wire_return_non_droppable_dart_opaque(
      opaque,
    );
  }

  late final _wire_return_non_droppable_dart_opaquePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DartOpaque)>>('wire_return_non_droppable_dart_opaque');
  late final _wire_return_non_droppable_dart_opaque =
      _wire_return_non_droppable_dart_opaquePtr.asFunction<WireSyncReturn Function(wire_DartOpaque)>();

  void wire_frb_generator_test(
    int port_,
  ) {
    return _wire_frb_generator_test(
      port_,
    );
  }

  late final _wire_frb_generator_testPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_frb_generator_test');
  late final _wire_frb_generator_test = _wire_frb_generator_testPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_frb_sync_generator_test() {
    return _wire_frb_sync_generator_test();
  }

  late final _wire_frb_sync_generator_testPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_frb_sync_generator_test');
  late final _wire_frb_sync_generator_test = _wire_frb_sync_generator_testPtr.asFunction<WireSyncReturn Function()>();

  void wire_handle_type_alias_id(
    int port_,
    int input,
  ) {
    return _wire_handle_type_alias_id(
      port_,
      input,
    );
  }

  late final _wire_handle_type_alias_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>('wire_handle_type_alias_id');
  late final _wire_handle_type_alias_id = _wire_handle_type_alias_idPtr.asFunction<void Function(int, int)>();

  void wire_handle_type_nest_alias_id(
    int port_,
    int input,
  ) {
    return _wire_handle_type_nest_alias_id(
      port_,
      input,
    );
  }

  late final _wire_handle_type_nest_alias_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>('wire_handle_type_nest_alias_id');
  late final _wire_handle_type_nest_alias_id = _wire_handle_type_nest_alias_idPtr.asFunction<void Function(int, int)>();

  void wire_handle_type_alias_model(
    int port_,
    int input,
  ) {
    return _wire_handle_type_alias_model(
      port_,
      input,
    );
  }

  late final _wire_handle_type_alias_modelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>('wire_handle_type_alias_model');
  late final _wire_handle_type_alias_model = _wire_handle_type_alias_modelPtr.asFunction<void Function(int, int)>();

  void wire_empty_struct(
    int port_,
    ffi.Pointer<wire_Empty> empty,
  ) {
    return _wire_empty_struct(
      port_,
      empty,
    );
  }

  late final _wire_empty_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Empty>)>>('wire_empty_struct');
  late final _wire_empty_struct = _wire_empty_structPtr.asFunction<void Function(int, ffi.Pointer<wire_Empty>)>();

  void wire_return_dart_dynamic(
    int port_,
  ) {
    return _wire_return_dart_dynamic(
      port_,
    );
  }

  late final _wire_return_dart_dynamicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_dart_dynamic');
  late final _wire_return_dart_dynamic = _wire_return_dart_dynamicPtr.asFunction<void Function(int)>();

  void wire_test_raw_string_item_struct(
    int port_,
  ) {
    return _wire_test_raw_string_item_struct(
      port_,
    );
  }

  late final _wire_test_raw_string_item_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_raw_string_item_struct');
  late final _wire_test_raw_string_item_struct = _wire_test_raw_string_item_structPtr.asFunction<void Function(int)>();

  void wire_test_more_than_just_one_raw_string_struct(
    int port_,
  ) {
    return _wire_test_more_than_just_one_raw_string_struct(
      port_,
    );
  }

  late final _wire_test_more_than_just_one_raw_string_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_more_than_just_one_raw_string_struct');
  late final _wire_test_more_than_just_one_raw_string_struct =
      _wire_test_more_than_just_one_raw_string_structPtr.asFunction<void Function(int)>();

  void wire_test_raw_string_mirrored(
    int port_,
  ) {
    return _wire_test_raw_string_mirrored(
      port_,
    );
  }

  late final _wire_test_raw_string_mirroredPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_raw_string_mirrored');
  late final _wire_test_raw_string_mirrored = _wire_test_raw_string_mirroredPtr.asFunction<void Function(int)>();

  void wire_test_nested_raw_string_mirrored(
    int port_,
  ) {
    return _wire_test_nested_raw_string_mirrored(
      port_,
    );
  }

  late final _wire_test_nested_raw_string_mirroredPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_nested_raw_string_mirrored');
  late final _wire_test_nested_raw_string_mirrored =
      _wire_test_nested_raw_string_mirroredPtr.asFunction<void Function(int)>();

  void wire_test_raw_string_enum_mirrored(
    int port_,
    bool nested,
  ) {
    return _wire_test_raw_string_enum_mirrored(
      port_,
      nested,
    );
  }

  late final _wire_test_raw_string_enum_mirroredPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>('wire_test_raw_string_enum_mirrored');
  late final _wire_test_raw_string_enum_mirrored =
      _wire_test_raw_string_enum_mirroredPtr.asFunction<void Function(int, bool)>();

  void wire_test_list_of_raw_nested_string_mirrored(
    int port_,
  ) {
    return _wire_test_list_of_raw_nested_string_mirrored(
      port_,
    );
  }

  late final _wire_test_list_of_raw_nested_string_mirroredPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_list_of_raw_nested_string_mirrored');
  late final _wire_test_list_of_raw_nested_string_mirrored =
      _wire_test_list_of_raw_nested_string_mirroredPtr.asFunction<void Function(int)>();

  void wire_test_fallible_of_raw_string_mirrored(
    int port_,
  ) {
    return _wire_test_fallible_of_raw_string_mirrored(
      port_,
    );
  }

  late final _wire_test_fallible_of_raw_string_mirroredPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_fallible_of_raw_string_mirrored');
  late final _wire_test_fallible_of_raw_string_mirrored =
      _wire_test_fallible_of_raw_string_mirroredPtr.asFunction<void Function(int)>();

  void wire_list_of_primitive_enums(
    int port_,
    ffi.Pointer<wire_list_weekdays> weekdays,
  ) {
    return _wire_list_of_primitive_enums(
      port_,
      weekdays,
    );
  }

  late final _wire_list_of_primitive_enumsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_weekdays>)>>(
          'wire_list_of_primitive_enums');
  late final _wire_list_of_primitive_enums =
      _wire_list_of_primitive_enumsPtr.asFunction<void Function(int, ffi.Pointer<wire_list_weekdays>)>();

  void wire_test_abc_enum(
    int port_,
    ffi.Pointer<wire_Abc> abc,
  ) {
    return _wire_test_abc_enum(
      port_,
      abc,
    );
  }

  late final _wire_test_abc_enumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Abc>)>>('wire_test_abc_enum');
  late final _wire_test_abc_enum = _wire_test_abc_enumPtr.asFunction<void Function(int, ffi.Pointer<wire_Abc>)>();

  void wire_test_contains_mirrored_sub_struct(
    int port_,
  ) {
    return _wire_test_contains_mirrored_sub_struct(
      port_,
    );
  }

  late final _wire_test_contains_mirrored_sub_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_contains_mirrored_sub_struct');
  late final _wire_test_contains_mirrored_sub_struct =
      _wire_test_contains_mirrored_sub_structPtr.asFunction<void Function(int)>();

  void wire_test_struct_with_enum(
    int port_,
    ffi.Pointer<wire_StructWithEnum> se,
  ) {
    return _wire_test_struct_with_enum(
      port_,
      se,
    );
  }

  late final _wire_test_struct_with_enumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_StructWithEnum>)>>(
          'wire_test_struct_with_enum');
  late final _wire_test_struct_with_enum =
      _wire_test_struct_with_enumPtr.asFunction<void Function(int, ffi.Pointer<wire_StructWithEnum>)>();

  void wire_test_tuple(
    int port_,
    ffi.Pointer<wire___record__String_i32> value,
  ) {
    return _wire_test_tuple(
      port_,
      value,
    );
  }

  late final _wire_test_tuplePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire___record__String_i32>)>>(
          'wire_test_tuple');
  late final _wire_test_tuple =
      _wire_test_tuplePtr.asFunction<void Function(int, ffi.Pointer<wire___record__String_i32>)>();

  void wire_test_tuple_2(
    int port_,
    ffi.Pointer<wire_list___record__String_i32> value,
  ) {
    return _wire_test_tuple_2(
      port_,
      value,
    );
  }

  late final _wire_test_tuple_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list___record__String_i32>)>>(
          'wire_test_tuple_2');
  late final _wire_test_tuple_2 =
      _wire_test_tuple_2Ptr.asFunction<void Function(int, ffi.Pointer<wire_list___record__String_i32>)>();

  WireSyncReturn wire_sync_return_mirror() {
    return _wire_sync_return_mirror();
  }

  late final _wire_sync_return_mirrorPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_return_mirror');
  late final _wire_sync_return_mirror = _wire_sync_return_mirrorPtr.asFunction<WireSyncReturn Function()>();

  void wire_macro_struct(
    int port_,
  ) {
    return _wire_macro_struct(
      port_,
    );
  }

  late final _wire_macro_structPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_macro_struct');
  late final _wire_macro_struct = _wire_macro_structPtr.asFunction<void Function(int)>();

  void wire_return_err_custom_error(
    int port_,
  ) {
    return _wire_return_err_custom_error(
      port_,
    );
  }

  late final _wire_return_err_custom_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_err_custom_error');
  late final _wire_return_err_custom_error = _wire_return_err_custom_errorPtr.asFunction<void Function(int)>();

  void wire_return_ok_custom_error(
    int port_,
  ) {
    return _wire_return_ok_custom_error(
      port_,
    );
  }

  late final _wire_return_ok_custom_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_ok_custom_error');
  late final _wire_return_ok_custom_error = _wire_return_ok_custom_errorPtr.asFunction<void Function(int)>();

  void wire_return_error_variant(
    int port_,
    int variant,
  ) {
    return _wire_return_error_variant(
      port_,
      variant,
    );
  }

  late final _wire_return_error_variantPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>('wire_return_error_variant');
  late final _wire_return_error_variant = _wire_return_error_variantPtr.asFunction<void Function(int, int)>();

  void wire_return_custom_nested_error_1(
    int port_,
  ) {
    return _wire_return_custom_nested_error_1(
      port_,
    );
  }

  late final _wire_return_custom_nested_error_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_custom_nested_error_1');
  late final _wire_return_custom_nested_error_1 =
      _wire_return_custom_nested_error_1Ptr.asFunction<void Function(int)>();

  void wire_return_custom_nested_error_1_variant1(
    int port_,
  ) {
    return _wire_return_custom_nested_error_1_variant1(
      port_,
    );
  }

  late final _wire_return_custom_nested_error_1_variant1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_custom_nested_error_1_variant1');
  late final _wire_return_custom_nested_error_1_variant1 =
      _wire_return_custom_nested_error_1_variant1Ptr.asFunction<void Function(int)>();

  void wire_return_custom_nested_error_2(
    int port_,
  ) {
    return _wire_return_custom_nested_error_2(
      port_,
    );
  }

  late final _wire_return_custom_nested_error_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_custom_nested_error_2');
  late final _wire_return_custom_nested_error_2 =
      _wire_return_custom_nested_error_2Ptr.asFunction<void Function(int)>();

  void wire_return_custom_struct_error(
    int port_,
  ) {
    return _wire_return_custom_struct_error(
      port_,
    );
  }

  late final _wire_return_custom_struct_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_custom_struct_error');
  late final _wire_return_custom_struct_error = _wire_return_custom_struct_errorPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_sync_return_custom_struct_error() {
    return _wire_sync_return_custom_struct_error();
  }

  late final _wire_sync_return_custom_struct_errorPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>('wire_sync_return_custom_struct_error');
  late final _wire_sync_return_custom_struct_error =
      _wire_sync_return_custom_struct_errorPtr.asFunction<WireSyncReturn Function()>();

  void wire_return_custom_struct_ok(
    int port_,
  ) {
    return _wire_return_custom_struct_ok(
      port_,
    );
  }

  late final _wire_return_custom_struct_okPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_custom_struct_ok');
  late final _wire_return_custom_struct_ok = _wire_return_custom_struct_okPtr.asFunction<void Function(int)>();

  void wire_throw_anyhow(
    int port_,
  ) {
    return _wire_throw_anyhow(
      port_,
    );
  }

  late final _wire_throw_anyhowPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_throw_anyhow');
  late final _wire_throw_anyhow = _wire_throw_anyhowPtr.asFunction<void Function(int)>();

  void wire_panic_with_custom_result(
    int port_,
  ) {
    return _wire_panic_with_custom_result(
      port_,
    );
  }

  late final _wire_panic_with_custom_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_panic_with_custom_result');
  late final _wire_panic_with_custom_result = _wire_panic_with_custom_resultPtr.asFunction<void Function(int)>();

  void wire_stream_sink_throw_anyhow(
    int port_,
  ) {
    return _wire_stream_sink_throw_anyhow(
      port_,
    );
  }

  late final _wire_stream_sink_throw_anyhowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_stream_sink_throw_anyhow');
  late final _wire_stream_sink_throw_anyhow = _wire_stream_sink_throw_anyhowPtr.asFunction<void Function(int)>();

  void wire_as_string__method__Event(
    int port_,
    ffi.Pointer<wire_Event> that,
  ) {
    return _wire_as_string__method__Event(
      port_,
      that,
    );
  }

  late final _wire_as_string__method__EventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Event>)>>(
          'wire_as_string__method__Event');
  late final _wire_as_string__method__Event =
      _wire_as_string__method__EventPtr.asFunction<void Function(int, ffi.Pointer<wire_Event>)>();

  void wire_sum__method__SumWith(
    int port_,
    ffi.Pointer<wire_SumWith> that,
    int y,
    int z,
  ) {
    return _wire_sum__method__SumWith(
      port_,
      that,
      y,
      z,
    );
  }

  late final _wire_sum__method__SumWithPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SumWith>, ffi.Uint32, ffi.Uint32)>>(
          'wire_sum__method__SumWith');
  late final _wire_sum__method__SumWith =
      _wire_sum__method__SumWithPtr.asFunction<void Function(int, ffi.Pointer<wire_SumWith>, int, int)>();

  void wire_new__static_method__ConcatenateWith(
    int port_,
    ffi.Pointer<wire_uint_8_list> a,
  ) {
    return _wire_new__static_method__ConcatenateWith(
      port_,
      a,
    );
  }

  late final _wire_new__static_method__ConcatenateWithPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_new__static_method__ConcatenateWith');
  late final _wire_new__static_method__ConcatenateWith =
      _wire_new__static_method__ConcatenateWithPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_concatenate__method__ConcatenateWith(
    int port_,
    ffi.Pointer<wire_ConcatenateWith> that,
    ffi.Pointer<wire_uint_8_list> b,
  ) {
    return _wire_concatenate__method__ConcatenateWith(
      port_,
      that,
      b,
    );
  }

  late final _wire_concatenate__method__ConcatenateWithPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ConcatenateWith>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_concatenate__method__ConcatenateWith');
  late final _wire_concatenate__method__ConcatenateWith = _wire_concatenate__method__ConcatenateWithPtr
      .asFunction<void Function(int, ffi.Pointer<wire_ConcatenateWith>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_concatenate_static__static_method__ConcatenateWith(
    int port_,
    ffi.Pointer<wire_uint_8_list> a,
    ffi.Pointer<wire_uint_8_list> b,
  ) {
    return _wire_concatenate_static__static_method__ConcatenateWith(
      port_,
      a,
      b,
    );
  }

  late final _wire_concatenate_static__static_method__ConcatenateWithPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_concatenate_static__static_method__ConcatenateWith');
  late final _wire_concatenate_static__static_method__ConcatenateWith =
      _wire_concatenate_static__static_method__ConcatenateWithPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_some_stream_sink__method__ConcatenateWith(
    int port_,
    ffi.Pointer<wire_ConcatenateWith> that,
    int key,
    int max,
  ) {
    return _wire_handle_some_stream_sink__method__ConcatenateWith(
      port_,
      that,
      key,
      max,
    );
  }

  late final _wire_handle_some_stream_sink__method__ConcatenateWithPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ConcatenateWith>, ffi.Uint32, ffi.Uint32)>>(
      'wire_handle_some_stream_sink__method__ConcatenateWith');
  late final _wire_handle_some_stream_sink__method__ConcatenateWith =
      _wire_handle_some_stream_sink__method__ConcatenateWithPtr
          .asFunction<void Function(int, ffi.Pointer<wire_ConcatenateWith>, int, int)>();

  void wire_handle_some_stream_sink_at_1__method__ConcatenateWith(
    int port_,
    ffi.Pointer<wire_ConcatenateWith> that,
  ) {
    return _wire_handle_some_stream_sink_at_1__method__ConcatenateWith(
      port_,
      that,
    );
  }

  late final _wire_handle_some_stream_sink_at_1__method__ConcatenateWithPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ConcatenateWith>)>>(
          'wire_handle_some_stream_sink_at_1__method__ConcatenateWith');
  late final _wire_handle_some_stream_sink_at_1__method__ConcatenateWith =
      _wire_handle_some_stream_sink_at_1__method__ConcatenateWithPtr
          .asFunction<void Function(int, ffi.Pointer<wire_ConcatenateWith>)>();

  void wire_handle_some_static_stream_sink__static_method__ConcatenateWith(
    int port_,
    int key,
    int max,
  ) {
    return _wire_handle_some_static_stream_sink__static_method__ConcatenateWith(
      port_,
      key,
      max,
    );
  }

  late final _wire_handle_some_static_stream_sink__static_method__ConcatenateWithPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32)>>(
          'wire_handle_some_static_stream_sink__static_method__ConcatenateWith');
  late final _wire_handle_some_static_stream_sink__static_method__ConcatenateWith =
      _wire_handle_some_static_stream_sink__static_method__ConcatenateWithPtr
          .asFunction<void Function(int, int, int)>();

  void wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(
    int port_,
  ) {
    return _wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(
      port_,
    );
  }

  late final _wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWithPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith');
  late final _wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith =
      _wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWithPtr
          .asFunction<void Function(int)>();

  void wire_new__static_method__SomeStruct(
    int port_,
    int value,
  ) {
    return _wire_new__static_method__SomeStruct(
      port_,
      value,
    );
  }

  late final _wire_new__static_method__SomeStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>('wire_new__static_method__SomeStruct');
  late final _wire_new__static_method__SomeStruct =
      _wire_new__static_method__SomeStructPtr.asFunction<void Function(int, int)>();

  void wire_static_return_err_custom_error__static_method__SomeStruct(
    int port_,
  ) {
    return _wire_static_return_err_custom_error__static_method__SomeStruct(
      port_,
    );
  }

  late final _wire_static_return_err_custom_error__static_method__SomeStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_static_return_err_custom_error__static_method__SomeStruct');
  late final _wire_static_return_err_custom_error__static_method__SomeStruct =
      _wire_static_return_err_custom_error__static_method__SomeStructPtr.asFunction<void Function(int)>();

  void wire_static_return_ok_custom_error__static_method__SomeStruct(
    int port_,
  ) {
    return _wire_static_return_ok_custom_error__static_method__SomeStruct(
      port_,
    );
  }

  late final _wire_static_return_ok_custom_error__static_method__SomeStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_static_return_ok_custom_error__static_method__SomeStruct');
  late final _wire_static_return_ok_custom_error__static_method__SomeStruct =
      _wire_static_return_ok_custom_error__static_method__SomeStructPtr.asFunction<void Function(int)>();

  void wire_non_static_return_err_custom_error__method__SomeStruct(
    int port_,
    ffi.Pointer<wire_SomeStruct> that,
  ) {
    return _wire_non_static_return_err_custom_error__method__SomeStruct(
      port_,
      that,
    );
  }

  late final _wire_non_static_return_err_custom_error__method__SomeStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SomeStruct>)>>(
          'wire_non_static_return_err_custom_error__method__SomeStruct');
  late final _wire_non_static_return_err_custom_error__method__SomeStruct =
      _wire_non_static_return_err_custom_error__method__SomeStructPtr
          .asFunction<void Function(int, ffi.Pointer<wire_SomeStruct>)>();

  void wire_non_static_return_ok_custom_error__method__SomeStruct(
    int port_,
    ffi.Pointer<wire_SomeStruct> that,
  ) {
    return _wire_non_static_return_ok_custom_error__method__SomeStruct(
      port_,
      that,
    );
  }

  late final _wire_non_static_return_ok_custom_error__method__SomeStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SomeStruct>)>>(
          'wire_non_static_return_ok_custom_error__method__SomeStruct');
  late final _wire_non_static_return_ok_custom_error__method__SomeStruct =
      _wire_non_static_return_ok_custom_error__method__SomeStructPtr
          .asFunction<void Function(int, ffi.Pointer<wire_SomeStruct>)>();

  void wire_new__static_method__CustomStruct(
    int port_,
    ffi.Pointer<wire_uint_8_list> message,
  ) {
    return _wire_new__static_method__CustomStruct(
      port_,
      message,
    );
  }

  late final _wire_new__static_method__CustomStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_new__static_method__CustomStruct');
  late final _wire_new__static_method__CustomStruct =
      _wire_new__static_method__CustomStructPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_static_return_custom_struct_error__static_method__CustomStruct(
    int port_,
  ) {
    return _wire_static_return_custom_struct_error__static_method__CustomStruct(
      port_,
    );
  }

  late final _wire_static_return_custom_struct_error__static_method__CustomStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_static_return_custom_struct_error__static_method__CustomStruct');
  late final _wire_static_return_custom_struct_error__static_method__CustomStruct =
      _wire_static_return_custom_struct_error__static_method__CustomStructPtr.asFunction<void Function(int)>();

  void wire_static_return_custom_struct_ok__static_method__CustomStruct(
    int port_,
  ) {
    return _wire_static_return_custom_struct_ok__static_method__CustomStruct(
      port_,
    );
  }

  late final _wire_static_return_custom_struct_ok__static_method__CustomStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_static_return_custom_struct_ok__static_method__CustomStruct');
  late final _wire_static_return_custom_struct_ok__static_method__CustomStruct =
      _wire_static_return_custom_struct_ok__static_method__CustomStructPtr.asFunction<void Function(int)>();

  void wire_nonstatic_return_custom_struct_error__method__CustomStruct(
    int port_,
    ffi.Pointer<wire_CustomStruct> that,
  ) {
    return _wire_nonstatic_return_custom_struct_error__method__CustomStruct(
      port_,
      that,
    );
  }

  late final _wire_nonstatic_return_custom_struct_error__method__CustomStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_CustomStruct>)>>(
          'wire_nonstatic_return_custom_struct_error__method__CustomStruct');
  late final _wire_nonstatic_return_custom_struct_error__method__CustomStruct =
      _wire_nonstatic_return_custom_struct_error__method__CustomStructPtr
          .asFunction<void Function(int, ffi.Pointer<wire_CustomStruct>)>();

  void wire_nonstatic_return_custom_struct_ok__method__CustomStruct(
    int port_,
    ffi.Pointer<wire_CustomStruct> that,
  ) {
    return _wire_nonstatic_return_custom_struct_ok__method__CustomStruct(
      port_,
      that,
    );
  }

  late final _wire_nonstatic_return_custom_struct_ok__method__CustomStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_CustomStruct>)>>(
          'wire_nonstatic_return_custom_struct_ok__method__CustomStruct');
  late final _wire_nonstatic_return_custom_struct_ok__method__CustomStruct =
      _wire_nonstatic_return_custom_struct_ok__method__CustomStructPtr
          .asFunction<void Function(int, ffi.Pointer<wire_CustomStruct>)>();

  wire_BoxDartDebug new_BoxDartDebug() {
    return _new_BoxDartDebug();
  }

  late final _new_BoxDartDebugPtr = _lookup<ffi.NativeFunction<wire_BoxDartDebug Function()>>('new_BoxDartDebug');
  late final _new_BoxDartDebug = _new_BoxDartDebugPtr.asFunction<wire_BoxDartDebug Function()>();

  wire_DartOpaque new_DartOpaque() {
    return _new_DartOpaque();
  }

  late final _new_DartOpaquePtr = _lookup<ffi.NativeFunction<wire_DartOpaque Function()>>('new_DartOpaque');
  late final _new_DartOpaque = _new_DartOpaquePtr.asFunction<wire_DartOpaque Function()>();

  wire_HideData new_HideData() {
    return _new_HideData();
  }

  late final _new_HideDataPtr = _lookup<ffi.NativeFunction<wire_HideData Function()>>('new_HideData');
  late final _new_HideData = _new_HideDataPtr.asFunction<wire_HideData Function()>();

  wire_I32 new_I32() {
    return _new_I32();
  }

  late final _new_I32Ptr = _lookup<ffi.NativeFunction<wire_I32 Function()>>('new_I32');
  late final _new_I32 = _new_I32Ptr.asFunction<wire_I32 Function()>();

  wire_MutexHideData new_MutexHideData() {
    return _new_MutexHideData();
  }

  late final _new_MutexHideDataPtr = _lookup<ffi.NativeFunction<wire_MutexHideData Function()>>('new_MutexHideData');
  late final _new_MutexHideData = _new_MutexHideDataPtr.asFunction<wire_MutexHideData Function()>();

  wire_NonCloneData new_NonCloneData() {
    return _new_NonCloneData();
  }

  late final _new_NonCloneDataPtr = _lookup<ffi.NativeFunction<wire_NonCloneData Function()>>('new_NonCloneData');
  late final _new_NonCloneData = _new_NonCloneDataPtr.asFunction<wire_NonCloneData Function()>();

  wire_NonSendHideData new_NonSendHideData() {
    return _new_NonSendHideData();
  }

  late final _new_NonSendHideDataPtr =
      _lookup<ffi.NativeFunction<wire_NonSendHideData Function()>>('new_NonSendHideData');
  late final _new_NonSendHideData = _new_NonSendHideDataPtr.asFunction<wire_NonSendHideData Function()>();

  wire_RwLockHideData new_RwLockHideData() {
    return _new_RwLockHideData();
  }

  late final _new_RwLockHideDataPtr = _lookup<ffi.NativeFunction<wire_RwLockHideData Function()>>('new_RwLockHideData');
  late final _new_RwLockHideData = _new_RwLockHideDataPtr.asFunction<wire_RwLockHideData Function()>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>('new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr.asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_ApplicationEnv> new_box_application_env_0() {
    return _new_box_application_env_0();
  }

  late final _new_box_application_env_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ApplicationEnv> Function()>>('new_box_application_env_0');
  late final _new_box_application_env_0 =
      _new_box_application_env_0Ptr.asFunction<ffi.Pointer<wire_ApplicationEnv> Function()>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_Chrono_Utc_0(
    int value,
  ) {
    return _new_box_autoadd_Chrono_Utc_0(
      value,
    );
  }

  late final _new_box_autoadd_Chrono_Utc_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>('new_box_autoadd_Chrono_Utc_0');
  late final _new_box_autoadd_Chrono_Utc_0 =
      _new_box_autoadd_Chrono_Utc_0Ptr.asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_DartOpaque> new_box_autoadd_DartOpaque_0() {
    return _new_box_autoadd_DartOpaque_0();
  }

  late final _new_box_autoadd_DartOpaque_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DartOpaque> Function()>>('new_box_autoadd_DartOpaque_0');
  late final _new_box_autoadd_DartOpaque_0 =
      _new_box_autoadd_DartOpaque_0Ptr.asFunction<ffi.Pointer<wire_DartOpaque> Function()>();

  ffi.Pointer<wire_HideData> new_box_autoadd_HideData_0() {
    return _new_box_autoadd_HideData_0();
  }

  late final _new_box_autoadd_HideData_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_HideData> Function()>>('new_box_autoadd_HideData_0');
  late final _new_box_autoadd_HideData_0 =
      _new_box_autoadd_HideData_0Ptr.asFunction<ffi.Pointer<wire_HideData> Function()>();

  ffi.Pointer<wire___record__String_i32> new_box_autoadd___record__String_i32_0() {
    return _new_box_autoadd___record__String_i32_0();
  }

  late final _new_box_autoadd___record__String_i32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire___record__String_i32> Function()>>(
          'new_box_autoadd___record__String_i32_0');
  late final _new_box_autoadd___record__String_i32_0 =
      _new_box_autoadd___record__String_i32_0Ptr.asFunction<ffi.Pointer<wire___record__String_i32> Function()>();

  ffi.Pointer<wire_A> new_box_autoadd_a_0() {
    return _new_box_autoadd_a_0();
  }

  late final _new_box_autoadd_a_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_A> Function()>>('new_box_autoadd_a_0');
  late final _new_box_autoadd_a_0 = _new_box_autoadd_a_0Ptr.asFunction<ffi.Pointer<wire_A> Function()>();

  ffi.Pointer<wire_Abc> new_box_autoadd_abc_0() {
    return _new_box_autoadd_abc_0();
  }

  late final _new_box_autoadd_abc_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Abc> Function()>>('new_box_autoadd_abc_0');
  late final _new_box_autoadd_abc_0 = _new_box_autoadd_abc_0Ptr.asFunction<ffi.Pointer<wire_Abc> Function()>();

  ffi.Pointer<wire_ApplicationEnv> new_box_autoadd_application_env_0() {
    return _new_box_autoadd_application_env_0();
  }

  late final _new_box_autoadd_application_env_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ApplicationEnv> Function()>>('new_box_autoadd_application_env_0');
  late final _new_box_autoadd_application_env_0 =
      _new_box_autoadd_application_env_0Ptr.asFunction<ffi.Pointer<wire_ApplicationEnv> Function()>();

  ffi.Pointer<wire_ApplicationSettings> new_box_autoadd_application_settings_0() {
    return _new_box_autoadd_application_settings_0();
  }

  late final _new_box_autoadd_application_settings_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ApplicationSettings> Function()>>(
          'new_box_autoadd_application_settings_0');
  late final _new_box_autoadd_application_settings_0 =
      _new_box_autoadd_application_settings_0Ptr.asFunction<ffi.Pointer<wire_ApplicationSettings> Function()>();

  ffi.Pointer<wire_Attribute> new_box_autoadd_attribute_0() {
    return _new_box_autoadd_attribute_0();
  }

  late final _new_box_autoadd_attribute_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Attribute> Function()>>('new_box_autoadd_attribute_0');
  late final _new_box_autoadd_attribute_0 =
      _new_box_autoadd_attribute_0Ptr.asFunction<ffi.Pointer<wire_Attribute> Function()>();

  ffi.Pointer<wire_B> new_box_autoadd_b_0() {
    return _new_box_autoadd_b_0();
  }

  late final _new_box_autoadd_b_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_B> Function()>>('new_box_autoadd_b_0');
  late final _new_box_autoadd_b_0 = _new_box_autoadd_b_0Ptr.asFunction<ffi.Pointer<wire_B> Function()>();

  ffi.Pointer<ffi.Bool> new_box_autoadd_bool_0(
    bool value,
  ) {
    return _new_box_autoadd_bool_0(
      value,
    );
  }

  late final _new_box_autoadd_bool_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>('new_box_autoadd_bool_0');
  late final _new_box_autoadd_bool_0 = _new_box_autoadd_bool_0Ptr.asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<wire_C> new_box_autoadd_c_0() {
    return _new_box_autoadd_c_0();
  }

  late final _new_box_autoadd_c_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_C> Function()>>('new_box_autoadd_c_0');
  late final _new_box_autoadd_c_0 = _new_box_autoadd_c_0Ptr.asFunction<ffi.Pointer<wire_C> Function()>();

  ffi.Pointer<wire_ConcatenateWith> new_box_autoadd_concatenate_with_0() {
    return _new_box_autoadd_concatenate_with_0();
  }

  late final _new_box_autoadd_concatenate_with_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ConcatenateWith> Function()>>('new_box_autoadd_concatenate_with_0');
  late final _new_box_autoadd_concatenate_with_0 =
      _new_box_autoadd_concatenate_with_0Ptr.asFunction<ffi.Pointer<wire_ConcatenateWith> Function()>();

  ffi.Pointer<wire_CustomStruct> new_box_autoadd_custom_struct_0() {
    return _new_box_autoadd_custom_struct_0();
  }

  late final _new_box_autoadd_custom_struct_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_CustomStruct> Function()>>('new_box_autoadd_custom_struct_0');
  late final _new_box_autoadd_custom_struct_0 =
      _new_box_autoadd_custom_struct_0Ptr.asFunction<ffi.Pointer<wire_CustomStruct> Function()>();

  ffi.Pointer<wire_Customized> new_box_autoadd_customized_0() {
    return _new_box_autoadd_customized_0();
  }

  late final _new_box_autoadd_customized_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Customized> Function()>>('new_box_autoadd_customized_0');
  late final _new_box_autoadd_customized_0 =
      _new_box_autoadd_customized_0Ptr.asFunction<ffi.Pointer<wire_Customized> Function()>();

  ffi.Pointer<wire_DartOpaqueNested> new_box_autoadd_dart_opaque_nested_0() {
    return _new_box_autoadd_dart_opaque_nested_0();
  }

  late final _new_box_autoadd_dart_opaque_nested_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DartOpaqueNested> Function()>>(
          'new_box_autoadd_dart_opaque_nested_0');
  late final _new_box_autoadd_dart_opaque_nested_0 =
      _new_box_autoadd_dart_opaque_nested_0Ptr.asFunction<ffi.Pointer<wire_DartOpaqueNested> Function()>();

  ffi.Pointer<wire_Empty> new_box_autoadd_empty_0() {
    return _new_box_autoadd_empty_0();
  }

  late final _new_box_autoadd_empty_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Empty> Function()>>('new_box_autoadd_empty_0');
  late final _new_box_autoadd_empty_0 = _new_box_autoadd_empty_0Ptr.asFunction<ffi.Pointer<wire_Empty> Function()>();

  ffi.Pointer<wire_EnumDartOpaque> new_box_autoadd_enum_dart_opaque_0() {
    return _new_box_autoadd_enum_dart_opaque_0();
  }

  late final _new_box_autoadd_enum_dart_opaque_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_EnumDartOpaque> Function()>>('new_box_autoadd_enum_dart_opaque_0');
  late final _new_box_autoadd_enum_dart_opaque_0 =
      _new_box_autoadd_enum_dart_opaque_0Ptr.asFunction<ffi.Pointer<wire_EnumDartOpaque> Function()>();

  ffi.Pointer<wire_EnumOpaque> new_box_autoadd_enum_opaque_0() {
    return _new_box_autoadd_enum_opaque_0();
  }

  late final _new_box_autoadd_enum_opaque_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_EnumOpaque> Function()>>('new_box_autoadd_enum_opaque_0');
  late final _new_box_autoadd_enum_opaque_0 =
      _new_box_autoadd_enum_opaque_0Ptr.asFunction<ffi.Pointer<wire_EnumOpaque> Function()>();

  ffi.Pointer<wire_Event> new_box_autoadd_event_0() {
    return _new_box_autoadd_event_0();
  }

  late final _new_box_autoadd_event_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Event> Function()>>('new_box_autoadd_event_0');
  late final _new_box_autoadd_event_0 = _new_box_autoadd_event_0Ptr.asFunction<ffi.Pointer<wire_Event> Function()>();

  ffi.Pointer<wire_ExoticOptionals> new_box_autoadd_exotic_optionals_0() {
    return _new_box_autoadd_exotic_optionals_0();
  }

  late final _new_box_autoadd_exotic_optionals_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ExoticOptionals> Function()>>('new_box_autoadd_exotic_optionals_0');
  late final _new_box_autoadd_exotic_optionals_0 =
      _new_box_autoadd_exotic_optionals_0Ptr.asFunction<ffi.Pointer<wire_ExoticOptionals> Function()>();

  ffi.Pointer<ffi.Double> new_box_autoadd_f64_0(
    double value,
  ) {
    return _new_box_autoadd_f64_0(
      value,
    );
  }

  late final _new_box_autoadd_f64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Double)>>('new_box_autoadd_f64_0');
  late final _new_box_autoadd_f64_0 = _new_box_autoadd_f64_0Ptr.asFunction<ffi.Pointer<ffi.Double> Function(double)>();

  ffi.Pointer<wire_FeatureChrono> new_box_autoadd_feature_chrono_0() {
    return _new_box_autoadd_feature_chrono_0();
  }

  late final _new_box_autoadd_feature_chrono_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_FeatureChrono> Function()>>('new_box_autoadd_feature_chrono_0');
  late final _new_box_autoadd_feature_chrono_0 =
      _new_box_autoadd_feature_chrono_0Ptr.asFunction<ffi.Pointer<wire_FeatureChrono> Function()>();

  ffi.Pointer<wire_FeatureUuid> new_box_autoadd_feature_uuid_0() {
    return _new_box_autoadd_feature_uuid_0();
  }

  late final _new_box_autoadd_feature_uuid_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_FeatureUuid> Function()>>('new_box_autoadd_feature_uuid_0');
  late final _new_box_autoadd_feature_uuid_0 =
      _new_box_autoadd_feature_uuid_0Ptr.asFunction<ffi.Pointer<wire_FeatureUuid> Function()>();

  ffi.Pointer<wire_FeedId> new_box_autoadd_feed_id_0() {
    return _new_box_autoadd_feed_id_0();
  }

  late final _new_box_autoadd_feed_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_FeedId> Function()>>('new_box_autoadd_feed_id_0');
  late final _new_box_autoadd_feed_id_0 =
      _new_box_autoadd_feed_id_0Ptr.asFunction<ffi.Pointer<wire_FeedId> Function()>();

  ffi.Pointer<ffi.Int32> new_box_autoadd_i32_0(
    int value,
  ) {
    return _new_box_autoadd_i32_0(
      value,
    );
  }

  late final _new_box_autoadd_i32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>('new_box_autoadd_i32_0');
  late final _new_box_autoadd_i32_0 = _new_box_autoadd_i32_0Ptr.asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64_0(
    int value,
  ) {
    return _new_box_autoadd_i64_0(
      value,
    );
  }

  late final _new_box_autoadd_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>('new_box_autoadd_i64_0');
  late final _new_box_autoadd_i64_0 = _new_box_autoadd_i64_0Ptr.asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_KitchenSink> new_box_autoadd_kitchen_sink_0() {
    return _new_box_autoadd_kitchen_sink_0();
  }

  late final _new_box_autoadd_kitchen_sink_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_KitchenSink> Function()>>('new_box_autoadd_kitchen_sink_0');
  late final _new_box_autoadd_kitchen_sink_0 =
      _new_box_autoadd_kitchen_sink_0Ptr.asFunction<ffi.Pointer<wire_KitchenSink> Function()>();

  ffi.Pointer<wire_Measure> new_box_autoadd_measure_0() {
    return _new_box_autoadd_measure_0();
  }

  late final _new_box_autoadd_measure_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Measure> Function()>>('new_box_autoadd_measure_0');
  late final _new_box_autoadd_measure_0 =
      _new_box_autoadd_measure_0Ptr.asFunction<ffi.Pointer<wire_Measure> Function()>();

  ffi.Pointer<wire_MessageId> new_box_autoadd_message_id_0() {
    return _new_box_autoadd_message_id_0();
  }

  late final _new_box_autoadd_message_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MessageId> Function()>>('new_box_autoadd_message_id_0');
  late final _new_box_autoadd_message_id_0 =
      _new_box_autoadd_message_id_0Ptr.asFunction<ffi.Pointer<wire_MessageId> Function()>();

  ffi.Pointer<wire_MyEnumFreezed> new_box_autoadd_my_enum_freezed_0() {
    return _new_box_autoadd_my_enum_freezed_0();
  }

  late final _new_box_autoadd_my_enum_freezed_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyEnumFreezed> Function()>>('new_box_autoadd_my_enum_freezed_0');
  late final _new_box_autoadd_my_enum_freezed_0 =
      _new_box_autoadd_my_enum_freezed_0Ptr.asFunction<ffi.Pointer<wire_MyEnumFreezed> Function()>();

  ffi.Pointer<wire_MyNestedStruct> new_box_autoadd_my_nested_struct_0() {
    return _new_box_autoadd_my_nested_struct_0();
  }

  late final _new_box_autoadd_my_nested_struct_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyNestedStruct> Function()>>('new_box_autoadd_my_nested_struct_0');
  late final _new_box_autoadd_my_nested_struct_0 =
      _new_box_autoadd_my_nested_struct_0Ptr.asFunction<ffi.Pointer<wire_MyNestedStruct> Function()>();

  ffi.Pointer<wire_MySize> new_box_autoadd_my_size_0() {
    return _new_box_autoadd_my_size_0();
  }

  late final _new_box_autoadd_my_size_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MySize> Function()>>('new_box_autoadd_my_size_0');
  late final _new_box_autoadd_my_size_0 =
      _new_box_autoadd_my_size_0Ptr.asFunction<ffi.Pointer<wire_MySize> Function()>();

  ffi.Pointer<wire_MySizeFreezed> new_box_autoadd_my_size_freezed_0() {
    return _new_box_autoadd_my_size_freezed_0();
  }

  late final _new_box_autoadd_my_size_freezed_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MySizeFreezed> Function()>>('new_box_autoadd_my_size_freezed_0');
  late final _new_box_autoadd_my_size_freezed_0 =
      _new_box_autoadd_my_size_freezed_0Ptr.asFunction<ffi.Pointer<wire_MySizeFreezed> Function()>();

  ffi.Pointer<wire_MyStruct> new_box_autoadd_my_struct_0() {
    return _new_box_autoadd_my_struct_0();
  }

  late final _new_box_autoadd_my_struct_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyStruct> Function()>>('new_box_autoadd_my_struct_0');
  late final _new_box_autoadd_my_struct_0 =
      _new_box_autoadd_my_struct_0Ptr.asFunction<ffi.Pointer<wire_MyStruct> Function()>();

  ffi.Pointer<wire_MyTreeNode> new_box_autoadd_my_tree_node_0() {
    return _new_box_autoadd_my_tree_node_0();
  }

  late final _new_box_autoadd_my_tree_node_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyTreeNode> Function()>>('new_box_autoadd_my_tree_node_0');
  late final _new_box_autoadd_my_tree_node_0 =
      _new_box_autoadd_my_tree_node_0Ptr.asFunction<ffi.Pointer<wire_MyTreeNode> Function()>();

  ffi.Pointer<wire_NewTypeInt> new_box_autoadd_new_type_int_0() {
    return _new_box_autoadd_new_type_int_0();
  }

  late final _new_box_autoadd_new_type_int_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_NewTypeInt> Function()>>('new_box_autoadd_new_type_int_0');
  late final _new_box_autoadd_new_type_int_0 =
      _new_box_autoadd_new_type_int_0Ptr.asFunction<ffi.Pointer<wire_NewTypeInt> Function()>();

  ffi.Pointer<wire_Note> new_box_autoadd_note_0() {
    return _new_box_autoadd_note_0();
  }

  late final _new_box_autoadd_note_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Note> Function()>>('new_box_autoadd_note_0');
  late final _new_box_autoadd_note_0 = _new_box_autoadd_note_0Ptr.asFunction<ffi.Pointer<wire_Note> Function()>();

  ffi.Pointer<wire_Numbers> new_box_autoadd_numbers_0() {
    return _new_box_autoadd_numbers_0();
  }

  late final _new_box_autoadd_numbers_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Numbers> Function()>>('new_box_autoadd_numbers_0');
  late final _new_box_autoadd_numbers_0 =
      _new_box_autoadd_numbers_0Ptr.asFunction<ffi.Pointer<wire_Numbers> Function()>();

  ffi.Pointer<wire_OpaqueNested> new_box_autoadd_opaque_nested_0() {
    return _new_box_autoadd_opaque_nested_0();
  }

  late final _new_box_autoadd_opaque_nested_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_OpaqueNested> Function()>>('new_box_autoadd_opaque_nested_0');
  late final _new_box_autoadd_opaque_nested_0 =
      _new_box_autoadd_opaque_nested_0Ptr.asFunction<ffi.Pointer<wire_OpaqueNested> Function()>();

  ffi.Pointer<wire_OptVecs> new_box_autoadd_opt_vecs_0() {
    return _new_box_autoadd_opt_vecs_0();
  }

  late final _new_box_autoadd_opt_vecs_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_OptVecs> Function()>>('new_box_autoadd_opt_vecs_0');
  late final _new_box_autoadd_opt_vecs_0 =
      _new_box_autoadd_opt_vecs_0Ptr.asFunction<ffi.Pointer<wire_OptVecs> Function()>();

  ffi.Pointer<wire_Sequences> new_box_autoadd_sequences_0() {
    return _new_box_autoadd_sequences_0();
  }

  late final _new_box_autoadd_sequences_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Sequences> Function()>>('new_box_autoadd_sequences_0');
  late final _new_box_autoadd_sequences_0 =
      _new_box_autoadd_sequences_0Ptr.asFunction<ffi.Pointer<wire_Sequences> Function()>();

  ffi.Pointer<wire_SomeStruct> new_box_autoadd_some_struct_0() {
    return _new_box_autoadd_some_struct_0();
  }

  late final _new_box_autoadd_some_struct_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SomeStruct> Function()>>('new_box_autoadd_some_struct_0');
  late final _new_box_autoadd_some_struct_0 =
      _new_box_autoadd_some_struct_0Ptr.asFunction<ffi.Pointer<wire_SomeStruct> Function()>();

  ffi.Pointer<wire_StructWithEnum> new_box_autoadd_struct_with_enum_0() {
    return _new_box_autoadd_struct_with_enum_0();
  }

  late final _new_box_autoadd_struct_with_enum_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_StructWithEnum> Function()>>('new_box_autoadd_struct_with_enum_0');
  late final _new_box_autoadd_struct_with_enum_0 =
      _new_box_autoadd_struct_with_enum_0Ptr.asFunction<ffi.Pointer<wire_StructWithEnum> Function()>();

  ffi.Pointer<wire_SumWith> new_box_autoadd_sum_with_0() {
    return _new_box_autoadd_sum_with_0();
  }

  late final _new_box_autoadd_sum_with_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SumWith> Function()>>('new_box_autoadd_sum_with_0');
  late final _new_box_autoadd_sum_with_0 =
      _new_box_autoadd_sum_with_0Ptr.asFunction<ffi.Pointer<wire_SumWith> Function()>();

  ffi.Pointer<wire_TestId> new_box_autoadd_test_id_0() {
    return _new_box_autoadd_test_id_0();
  }

  late final _new_box_autoadd_test_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_TestId> Function()>>('new_box_autoadd_test_id_0');
  late final _new_box_autoadd_test_id_0 =
      _new_box_autoadd_test_id_0Ptr.asFunction<ffi.Pointer<wire_TestId> Function()>();

  ffi.Pointer<wire_UserId> new_box_autoadd_user_id_0() {
    return _new_box_autoadd_user_id_0();
  }

  late final _new_box_autoadd_user_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_UserId> Function()>>('new_box_autoadd_user_id_0');
  late final _new_box_autoadd_user_id_0 =
      _new_box_autoadd_user_id_0Ptr.asFunction<ffi.Pointer<wire_UserId> Function()>();

  ffi.Pointer<ffi.Int32> new_box_autoadd_weekdays_0(
    int value,
  ) {
    return _new_box_autoadd_weekdays_0(
      value,
    );
  }

  late final _new_box_autoadd_weekdays_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>('new_box_autoadd_weekdays_0');
  late final _new_box_autoadd_weekdays_0 =
      _new_box_autoadd_weekdays_0Ptr.asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_Blob> new_box_blob_0() {
    return _new_box_blob_0();
  }

  late final _new_box_blob_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Blob> Function()>>('new_box_blob_0');
  late final _new_box_blob_0 = _new_box_blob_0Ptr.asFunction<ffi.Pointer<wire_Blob> Function()>();

  ffi.Pointer<ffi.Bool> new_box_bool_0(
    bool value,
  ) {
    return _new_box_bool_0(
      value,
    );
  }

  late final _new_box_bool_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>('new_box_bool_0');
  late final _new_box_bool_0 = _new_box_bool_0Ptr.asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<wire_Distance> new_box_distance_0() {
    return _new_box_distance_0();
  }

  late final _new_box_distance_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Distance> Function()>>('new_box_distance_0');
  late final _new_box_distance_0 = _new_box_distance_0Ptr.asFunction<ffi.Pointer<wire_Distance> Function()>();

  ffi.Pointer<wire_ExoticOptionals> new_box_exotic_optionals_0() {
    return _new_box_exotic_optionals_0();
  }

  late final _new_box_exotic_optionals_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ExoticOptionals> Function()>>('new_box_exotic_optionals_0');
  late final _new_box_exotic_optionals_0 =
      _new_box_exotic_optionals_0Ptr.asFunction<ffi.Pointer<wire_ExoticOptionals> Function()>();

  ffi.Pointer<ffi.Double> new_box_f64_0(
    double value,
  ) {
    return _new_box_f64_0(
      value,
    );
  }

  late final _new_box_f64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Double)>>('new_box_f64_0');
  late final _new_box_f64_0 = _new_box_f64_0Ptr.asFunction<ffi.Pointer<ffi.Double> Function(double)>();

  ffi.Pointer<ffi.Int32> new_box_i32_0(
    int value,
  ) {
    return _new_box_i32_0(
      value,
    );
  }

  late final _new_box_i32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>('new_box_i32_0');
  late final _new_box_i32_0 = _new_box_i32_0Ptr.asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Int64> new_box_i64_0(
    int value,
  ) {
    return _new_box_i64_0(
      value,
    );
  }

  late final _new_box_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>('new_box_i64_0');
  late final _new_box_i64_0 = _new_box_i64_0Ptr.asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<ffi.Int8> new_box_i8_0(
    int value,
  ) {
    return _new_box_i8_0(
      value,
    );
  }

  late final _new_box_i8_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int8)>>('new_box_i8_0');
  late final _new_box_i8_0 = _new_box_i8_0Ptr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  ffi.Pointer<wire_KitchenSink> new_box_kitchen_sink_0() {
    return _new_box_kitchen_sink_0();
  }

  late final _new_box_kitchen_sink_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_KitchenSink> Function()>>('new_box_kitchen_sink_0');
  late final _new_box_kitchen_sink_0 =
      _new_box_kitchen_sink_0Ptr.asFunction<ffi.Pointer<wire_KitchenSink> Function()>();

  ffi.Pointer<wire_MySize> new_box_my_size_0() {
    return _new_box_my_size_0();
  }

  late final _new_box_my_size_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MySize> Function()>>('new_box_my_size_0');
  late final _new_box_my_size_0 = _new_box_my_size_0Ptr.asFunction<ffi.Pointer<wire_MySize> Function()>();

  ffi.Pointer<wire_MySizeFreezed> new_box_my_size_freezed_0() {
    return _new_box_my_size_freezed_0();
  }

  late final _new_box_my_size_freezed_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MySizeFreezed> Function()>>('new_box_my_size_freezed_0');
  late final _new_box_my_size_freezed_0 =
      _new_box_my_size_freezed_0Ptr.asFunction<ffi.Pointer<wire_MySizeFreezed> Function()>();

  ffi.Pointer<wire_Speed> new_box_speed_0() {
    return _new_box_speed_0();
  }

  late final _new_box_speed_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Speed> Function()>>('new_box_speed_0');
  late final _new_box_speed_0 = _new_box_speed_0Ptr.asFunction<ffi.Pointer<wire_Speed> Function()>();

  ffi.Pointer<ffi.Uint8> new_box_u8_0(
    int value,
  ) {
    return _new_box_u8_0(
      value,
    );
  }

  late final _new_box_u8_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>('new_box_u8_0');
  late final _new_box_u8_0 = _new_box_u8_0Ptr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<ffi.Int32> new_box_weekdays_0(
    int value,
  ) {
    return _new_box_weekdays_0(
      value,
    );
  }

  late final _new_box_weekdays_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>('new_box_weekdays_0');
  late final _new_box_weekdays_0 = _new_box_weekdays_0Ptr.asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_float_32_list> new_float_32_list_0(
    int len,
  ) {
    return _new_float_32_list_0(
      len,
    );
  }

  late final _new_float_32_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_float_32_list> Function(ffi.Int32)>>('new_float_32_list_0');
  late final _new_float_32_list_0 = _new_float_32_list_0Ptr.asFunction<ffi.Pointer<wire_float_32_list> Function(int)>();

  ffi.Pointer<wire_float_64_list> new_float_64_list_0(
    int len,
  ) {
    return _new_float_64_list_0(
      len,
    );
  }

  late final _new_float_64_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_float_64_list> Function(ffi.Int32)>>('new_float_64_list_0');
  late final _new_float_64_list_0 = _new_float_64_list_0Ptr.asFunction<ffi.Pointer<wire_float_64_list> Function(int)>();

  ffi.Pointer<wire_int_32_list> new_int_32_list_0(
    int len,
  ) {
    return _new_int_32_list_0(
      len,
    );
  }

  late final _new_int_32_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_int_32_list> Function(ffi.Int32)>>('new_int_32_list_0');
  late final _new_int_32_list_0 = _new_int_32_list_0Ptr.asFunction<ffi.Pointer<wire_int_32_list> Function(int)>();

  ffi.Pointer<wire_int_64_list> new_int_64_list_0(
    int len,
  ) {
    return _new_int_64_list_0(
      len,
    );
  }

  late final _new_int_64_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_int_64_list> Function(ffi.Int32)>>('new_int_64_list_0');
  late final _new_int_64_list_0 = _new_int_64_list_0Ptr.asFunction<ffi.Pointer<wire_int_64_list> Function(int)>();

  ffi.Pointer<wire_int_8_list> new_int_8_list_0(
    int len,
  ) {
    return _new_int_8_list_0(
      len,
    );
  }

  late final _new_int_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_int_8_list> Function(ffi.Int32)>>('new_int_8_list_0');
  late final _new_int_8_list_0 = _new_int_8_list_0Ptr.asFunction<ffi.Pointer<wire_int_8_list> Function(int)>();

  ffi.Pointer<wire_list_DartOpaque> new_list_DartOpaque_0(
    int len,
  ) {
    return _new_list_DartOpaque_0(
      len,
    );
  }

  late final _new_list_DartOpaque_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_DartOpaque> Function(ffi.Int32)>>('new_list_DartOpaque_0');
  late final _new_list_DartOpaque_0 =
      _new_list_DartOpaque_0Ptr.asFunction<ffi.Pointer<wire_list_DartOpaque> Function(int)>();

  ffi.Pointer<wire_list_HideData> new_list_HideData_0(
    int len,
  ) {
    return _new_list_HideData_0(
      len,
    );
  }

  late final _new_list_HideData_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_HideData> Function(ffi.Int32)>>('new_list_HideData_0');
  late final _new_list_HideData_0 = _new_list_HideData_0Ptr.asFunction<ffi.Pointer<wire_list_HideData> Function(int)>();

  ffi.Pointer<wire_list___record__String_i32> new_list___record__String_i32_0(
    int len,
  ) {
    return _new_list___record__String_i32_0(
      len,
    );
  }

  late final _new_list___record__String_i32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list___record__String_i32> Function(ffi.Int32)>>(
          'new_list___record__String_i32_0');
  late final _new_list___record__String_i32_0 =
      _new_list___record__String_i32_0Ptr.asFunction<ffi.Pointer<wire_list___record__String_i32> Function(int)>();

  ffi.Pointer<wire_list_application_env_var> new_list_application_env_var_0(
    int len,
  ) {
    return _new_list_application_env_var_0(
      len,
    );
  }

  late final _new_list_application_env_var_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_application_env_var> Function(ffi.Int32)>>(
          'new_list_application_env_var_0');
  late final _new_list_application_env_var_0 =
      _new_list_application_env_var_0Ptr.asFunction<ffi.Pointer<wire_list_application_env_var> Function(int)>();

  ffi.Pointer<wire_list_attribute> new_list_attribute_0(
    int len,
  ) {
    return _new_list_attribute_0(
      len,
    );
  }

  late final _new_list_attribute_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_attribute> Function(ffi.Int32)>>('new_list_attribute_0');
  late final _new_list_attribute_0 =
      _new_list_attribute_0Ptr.asFunction<ffi.Pointer<wire_list_attribute> Function(int)>();

  ffi.Pointer<wire_list_my_size> new_list_my_size_0(
    int len,
  ) {
    return _new_list_my_size_0(
      len,
    );
  }

  late final _new_list_my_size_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_my_size> Function(ffi.Int32)>>('new_list_my_size_0');
  late final _new_list_my_size_0 = _new_list_my_size_0Ptr.asFunction<ffi.Pointer<wire_list_my_size> Function(int)>();

  ffi.Pointer<wire_list_my_tree_node> new_list_my_tree_node_0(
    int len,
  ) {
    return _new_list_my_tree_node_0(
      len,
    );
  }

  late final _new_list_my_tree_node_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_my_tree_node> Function(ffi.Int32)>>('new_list_my_tree_node_0');
  late final _new_list_my_tree_node_0 =
      _new_list_my_tree_node_0Ptr.asFunction<ffi.Pointer<wire_list_my_tree_node> Function(int)>();

  ffi.Pointer<wire_list_opt_String> new_list_opt_String_0(
    int len,
  ) {
    return _new_list_opt_String_0(
      len,
    );
  }

  late final _new_list_opt_String_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_opt_String> Function(ffi.Int32)>>('new_list_opt_String_0');
  late final _new_list_opt_String_0 =
      _new_list_opt_String_0Ptr.asFunction<ffi.Pointer<wire_list_opt_String> Function(int)>();

  ffi.Pointer<wire_list_opt_box_autoadd_attribute> new_list_opt_box_autoadd_attribute_0(
    int len,
  ) {
    return _new_list_opt_box_autoadd_attribute_0(
      len,
    );
  }

  late final _new_list_opt_box_autoadd_attribute_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_opt_box_autoadd_attribute> Function(ffi.Int32)>>(
          'new_list_opt_box_autoadd_attribute_0');
  late final _new_list_opt_box_autoadd_attribute_0 = _new_list_opt_box_autoadd_attribute_0Ptr
      .asFunction<ffi.Pointer<wire_list_opt_box_autoadd_attribute> Function(int)>();

  ffi.Pointer<wire_list_opt_box_autoadd_i32> new_list_opt_box_autoadd_i32_0(
    int len,
  ) {
    return _new_list_opt_box_autoadd_i32_0(
      len,
    );
  }

  late final _new_list_opt_box_autoadd_i32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_opt_box_autoadd_i32> Function(ffi.Int32)>>(
          'new_list_opt_box_autoadd_i32_0');
  late final _new_list_opt_box_autoadd_i32_0 =
      _new_list_opt_box_autoadd_i32_0Ptr.asFunction<ffi.Pointer<wire_list_opt_box_autoadd_i32> Function(int)>();

  ffi.Pointer<wire_list_opt_box_autoadd_weekdays> new_list_opt_box_autoadd_weekdays_0(
    int len,
  ) {
    return _new_list_opt_box_autoadd_weekdays_0(
      len,
    );
  }

  late final _new_list_opt_box_autoadd_weekdays_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_opt_box_autoadd_weekdays> Function(ffi.Int32)>>(
          'new_list_opt_box_autoadd_weekdays_0');
  late final _new_list_opt_box_autoadd_weekdays_0 = _new_list_opt_box_autoadd_weekdays_0Ptr
      .asFunction<ffi.Pointer<wire_list_opt_box_autoadd_weekdays> Function(int)>();

  ffi.Pointer<wire_list_opt_int_32_list> new_list_opt_int_32_list_0(
    int len,
  ) {
    return _new_list_opt_int_32_list_0(
      len,
    );
  }

  late final _new_list_opt_int_32_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_opt_int_32_list> Function(ffi.Int32)>>(
          'new_list_opt_int_32_list_0');
  late final _new_list_opt_int_32_list_0 =
      _new_list_opt_int_32_list_0Ptr.asFunction<ffi.Pointer<wire_list_opt_int_32_list> Function(int)>();

  ffi.Pointer<wire_list_test_id> new_list_test_id_0(
    int len,
  ) {
    return _new_list_test_id_0(
      len,
    );
  }

  late final _new_list_test_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_test_id> Function(ffi.Int32)>>('new_list_test_id_0');
  late final _new_list_test_id_0 = _new_list_test_id_0Ptr.asFunction<ffi.Pointer<wire_list_test_id> Function(int)>();

  ffi.Pointer<wire_list_weekdays> new_list_weekdays_0(
    int len,
  ) {
    return _new_list_weekdays_0(
      len,
    );
  }

  late final _new_list_weekdays_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_weekdays> Function(ffi.Int32)>>('new_list_weekdays_0');
  late final _new_list_weekdays_0 = _new_list_weekdays_0Ptr.asFunction<ffi.Pointer<wire_list_weekdays> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_BoxDartDebug(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_BoxDartDebug(
      ptr,
    );
  }

  late final _drop_opaque_BoxDartDebugPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_BoxDartDebug');
  late final _drop_opaque_BoxDartDebug =
      _drop_opaque_BoxDartDebugPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_BoxDartDebug(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_BoxDartDebug(
      ptr,
    );
  }

  late final _share_opaque_BoxDartDebugPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_BoxDartDebug');
  late final _share_opaque_BoxDartDebug =
      _share_opaque_BoxDartDebugPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_FrbOpaqueReturn(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_FrbOpaqueReturn(
      ptr,
    );
  }

  late final _drop_opaque_FrbOpaqueReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_FrbOpaqueReturn');
  late final _drop_opaque_FrbOpaqueReturn =
      _drop_opaque_FrbOpaqueReturnPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_FrbOpaqueReturn(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_FrbOpaqueReturn(
      ptr,
    );
  }

  late final _share_opaque_FrbOpaqueReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_FrbOpaqueReturn');
  late final _share_opaque_FrbOpaqueReturn =
      _share_opaque_FrbOpaqueReturnPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_FrbOpaqueSyncReturn(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_FrbOpaqueSyncReturn(
      ptr,
    );
  }

  late final _drop_opaque_FrbOpaqueSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_FrbOpaqueSyncReturn');
  late final _drop_opaque_FrbOpaqueSyncReturn =
      _drop_opaque_FrbOpaqueSyncReturnPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_FrbOpaqueSyncReturn(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_FrbOpaqueSyncReturn(
      ptr,
    );
  }

  late final _share_opaque_FrbOpaqueSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_FrbOpaqueSyncReturn');
  late final _share_opaque_FrbOpaqueSyncReturn =
      _share_opaque_FrbOpaqueSyncReturnPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_HideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_HideData(
      ptr,
    );
  }

  late final _drop_opaque_HideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_HideData');
  late final _drop_opaque_HideData = _drop_opaque_HideDataPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_HideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_HideData(
      ptr,
    );
  }

  late final _share_opaque_HideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_HideData');
  late final _share_opaque_HideData =
      _share_opaque_HideDataPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_I32(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_I32(
      ptr,
    );
  }

  late final _drop_opaque_I32Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_I32');
  late final _drop_opaque_I32 = _drop_opaque_I32Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_I32(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_I32(
      ptr,
    );
  }

  late final _share_opaque_I32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_I32');
  late final _share_opaque_I32 =
      _share_opaque_I32Ptr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MutexHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexHideData(
      ptr,
    );
  }

  late final _drop_opaque_MutexHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_MutexHideData');
  late final _drop_opaque_MutexHideData =
      _drop_opaque_MutexHideDataPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexHideData(
      ptr,
    );
  }

  late final _share_opaque_MutexHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_MutexHideData');
  late final _share_opaque_MutexHideData =
      _share_opaque_MutexHideDataPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_NonCloneData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_NonCloneData(
      ptr,
    );
  }

  late final _drop_opaque_NonCloneDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_NonCloneData');
  late final _drop_opaque_NonCloneData =
      _drop_opaque_NonCloneDataPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_NonCloneData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_NonCloneData(
      ptr,
    );
  }

  late final _share_opaque_NonCloneDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_NonCloneData');
  late final _share_opaque_NonCloneData =
      _share_opaque_NonCloneDataPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_NonSendHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_NonSendHideData(
      ptr,
    );
  }

  late final _drop_opaque_NonSendHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_NonSendHideData');
  late final _drop_opaque_NonSendHideData =
      _drop_opaque_NonSendHideDataPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_NonSendHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_NonSendHideData(
      ptr,
    );
  }

  late final _share_opaque_NonSendHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_NonSendHideData');
  late final _share_opaque_NonSendHideData =
      _share_opaque_NonSendHideDataPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RwLockHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockHideData(
      ptr,
    );
  }

  late final _drop_opaque_RwLockHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_RwLockHideData');
  late final _drop_opaque_RwLockHideData =
      _drop_opaque_RwLockHideDataPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockHideData(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockHideData(
      ptr,
    );
  }

  late final _share_opaque_RwLockHideDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockHideData');
  late final _share_opaque_RwLockHideData =
      _share_opaque_RwLockHideDataPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<AbcKind> inflate_Abc_A() {
    return _inflate_Abc_A();
  }

  late final _inflate_Abc_APtr = _lookup<ffi.NativeFunction<ffi.Pointer<AbcKind> Function()>>('inflate_Abc_A');
  late final _inflate_Abc_A = _inflate_Abc_APtr.asFunction<ffi.Pointer<AbcKind> Function()>();

  ffi.Pointer<AbcKind> inflate_Abc_B() {
    return _inflate_Abc_B();
  }

  late final _inflate_Abc_BPtr = _lookup<ffi.NativeFunction<ffi.Pointer<AbcKind> Function()>>('inflate_Abc_B');
  late final _inflate_Abc_B = _inflate_Abc_BPtr.asFunction<ffi.Pointer<AbcKind> Function()>();

  ffi.Pointer<AbcKind> inflate_Abc_C() {
    return _inflate_Abc_C();
  }

  late final _inflate_Abc_CPtr = _lookup<ffi.NativeFunction<ffi.Pointer<AbcKind> Function()>>('inflate_Abc_C');
  late final _inflate_Abc_C = _inflate_Abc_CPtr.asFunction<ffi.Pointer<AbcKind> Function()>();

  ffi.Pointer<AbcKind> inflate_Abc_JustInt() {
    return _inflate_Abc_JustInt();
  }

  late final _inflate_Abc_JustIntPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AbcKind> Function()>>('inflate_Abc_JustInt');
  late final _inflate_Abc_JustInt = _inflate_Abc_JustIntPtr.asFunction<ffi.Pointer<AbcKind> Function()>();

  ffi.Pointer<DistanceKind> inflate_Distance_Map() {
    return _inflate_Distance_Map();
  }

  late final _inflate_Distance_MapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DistanceKind> Function()>>('inflate_Distance_Map');
  late final _inflate_Distance_Map = _inflate_Distance_MapPtr.asFunction<ffi.Pointer<DistanceKind> Function()>();

  ffi.Pointer<EnumDartOpaqueKind> inflate_EnumDartOpaque_Primitive() {
    return _inflate_EnumDartOpaque_Primitive();
  }

  late final _inflate_EnumDartOpaque_PrimitivePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumDartOpaqueKind> Function()>>('inflate_EnumDartOpaque_Primitive');
  late final _inflate_EnumDartOpaque_Primitive =
      _inflate_EnumDartOpaque_PrimitivePtr.asFunction<ffi.Pointer<EnumDartOpaqueKind> Function()>();

  ffi.Pointer<EnumDartOpaqueKind> inflate_EnumDartOpaque_Opaque() {
    return _inflate_EnumDartOpaque_Opaque();
  }

  late final _inflate_EnumDartOpaque_OpaquePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumDartOpaqueKind> Function()>>('inflate_EnumDartOpaque_Opaque');
  late final _inflate_EnumDartOpaque_Opaque =
      _inflate_EnumDartOpaque_OpaquePtr.asFunction<ffi.Pointer<EnumDartOpaqueKind> Function()>();

  ffi.Pointer<EnumOpaqueKind> inflate_EnumOpaque_Struct() {
    return _inflate_EnumOpaque_Struct();
  }

  late final _inflate_EnumOpaque_StructPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumOpaqueKind> Function()>>('inflate_EnumOpaque_Struct');
  late final _inflate_EnumOpaque_Struct =
      _inflate_EnumOpaque_StructPtr.asFunction<ffi.Pointer<EnumOpaqueKind> Function()>();

  ffi.Pointer<EnumOpaqueKind> inflate_EnumOpaque_Primitive() {
    return _inflate_EnumOpaque_Primitive();
  }

  late final _inflate_EnumOpaque_PrimitivePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumOpaqueKind> Function()>>('inflate_EnumOpaque_Primitive');
  late final _inflate_EnumOpaque_Primitive =
      _inflate_EnumOpaque_PrimitivePtr.asFunction<ffi.Pointer<EnumOpaqueKind> Function()>();

  ffi.Pointer<EnumOpaqueKind> inflate_EnumOpaque_TraitObj() {
    return _inflate_EnumOpaque_TraitObj();
  }

  late final _inflate_EnumOpaque_TraitObjPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumOpaqueKind> Function()>>('inflate_EnumOpaque_TraitObj');
  late final _inflate_EnumOpaque_TraitObj =
      _inflate_EnumOpaque_TraitObjPtr.asFunction<ffi.Pointer<EnumOpaqueKind> Function()>();

  ffi.Pointer<EnumOpaqueKind> inflate_EnumOpaque_Mutex() {
    return _inflate_EnumOpaque_Mutex();
  }

  late final _inflate_EnumOpaque_MutexPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumOpaqueKind> Function()>>('inflate_EnumOpaque_Mutex');
  late final _inflate_EnumOpaque_Mutex =
      _inflate_EnumOpaque_MutexPtr.asFunction<ffi.Pointer<EnumOpaqueKind> Function()>();

  ffi.Pointer<EnumOpaqueKind> inflate_EnumOpaque_RwLock() {
    return _inflate_EnumOpaque_RwLock();
  }

  late final _inflate_EnumOpaque_RwLockPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EnumOpaqueKind> Function()>>('inflate_EnumOpaque_RwLock');
  late final _inflate_EnumOpaque_RwLock =
      _inflate_EnumOpaque_RwLockPtr.asFunction<ffi.Pointer<EnumOpaqueKind> Function()>();

  ffi.Pointer<KitchenSinkKind> inflate_KitchenSink_Primitives() {
    return _inflate_KitchenSink_Primitives();
  }

  late final _inflate_KitchenSink_PrimitivesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KitchenSinkKind> Function()>>('inflate_KitchenSink_Primitives');
  late final _inflate_KitchenSink_Primitives =
      _inflate_KitchenSink_PrimitivesPtr.asFunction<ffi.Pointer<KitchenSinkKind> Function()>();

  ffi.Pointer<KitchenSinkKind> inflate_KitchenSink_Nested() {
    return _inflate_KitchenSink_Nested();
  }

  late final _inflate_KitchenSink_NestedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KitchenSinkKind> Function()>>('inflate_KitchenSink_Nested');
  late final _inflate_KitchenSink_Nested =
      _inflate_KitchenSink_NestedPtr.asFunction<ffi.Pointer<KitchenSinkKind> Function()>();

  ffi.Pointer<KitchenSinkKind> inflate_KitchenSink_Optional() {
    return _inflate_KitchenSink_Optional();
  }

  late final _inflate_KitchenSink_OptionalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KitchenSinkKind> Function()>>('inflate_KitchenSink_Optional');
  late final _inflate_KitchenSink_Optional =
      _inflate_KitchenSink_OptionalPtr.asFunction<ffi.Pointer<KitchenSinkKind> Function()>();

  ffi.Pointer<KitchenSinkKind> inflate_KitchenSink_Buffer() {
    return _inflate_KitchenSink_Buffer();
  }

  late final _inflate_KitchenSink_BufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KitchenSinkKind> Function()>>('inflate_KitchenSink_Buffer');
  late final _inflate_KitchenSink_Buffer =
      _inflate_KitchenSink_BufferPtr.asFunction<ffi.Pointer<KitchenSinkKind> Function()>();

  ffi.Pointer<KitchenSinkKind> inflate_KitchenSink_Enums() {
    return _inflate_KitchenSink_Enums();
  }

  late final _inflate_KitchenSink_EnumsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<KitchenSinkKind> Function()>>('inflate_KitchenSink_Enums');
  late final _inflate_KitchenSink_Enums =
      _inflate_KitchenSink_EnumsPtr.asFunction<ffi.Pointer<KitchenSinkKind> Function()>();

  ffi.Pointer<MeasureKind> inflate_Measure_Speed() {
    return _inflate_Measure_Speed();
  }

  late final _inflate_Measure_SpeedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MeasureKind> Function()>>('inflate_Measure_Speed');
  late final _inflate_Measure_Speed = _inflate_Measure_SpeedPtr.asFunction<ffi.Pointer<MeasureKind> Function()>();

  ffi.Pointer<MeasureKind> inflate_Measure_Distance() {
    return _inflate_Measure_Distance();
  }

  late final _inflate_Measure_DistancePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MeasureKind> Function()>>('inflate_Measure_Distance');
  late final _inflate_Measure_Distance = _inflate_Measure_DistancePtr.asFunction<ffi.Pointer<MeasureKind> Function()>();

  ffi.Pointer<MyEnumFreezedKind> inflate_MyEnumFreezed_A() {
    return _inflate_MyEnumFreezed_A();
  }

  late final _inflate_MyEnumFreezed_APtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MyEnumFreezedKind> Function()>>('inflate_MyEnumFreezed_A');
  late final _inflate_MyEnumFreezed_A =
      _inflate_MyEnumFreezed_APtr.asFunction<ffi.Pointer<MyEnumFreezedKind> Function()>();

  ffi.Pointer<MyEnumFreezedKind> inflate_MyEnumFreezed_B() {
    return _inflate_MyEnumFreezed_B();
  }

  late final _inflate_MyEnumFreezed_BPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MyEnumFreezedKind> Function()>>('inflate_MyEnumFreezed_B');
  late final _inflate_MyEnumFreezed_B =
      _inflate_MyEnumFreezed_BPtr.asFunction<ffi.Pointer<MyEnumFreezedKind> Function()>();

  ffi.Pointer<SpeedKind> inflate_Speed_GPS() {
    return _inflate_Speed_GPS();
  }

  late final _inflate_Speed_GPSPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SpeedKind> Function()>>('inflate_Speed_GPS');
  late final _inflate_Speed_GPS = _inflate_Speed_GPSPtr.asFunction<ffi.Pointer<SpeedKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_MySize extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

final class wire_MySizeFreezed extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

final class wire_NewTypeInt extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

final class wire_list_my_size extends ffi.Struct {
  external ffi.Pointer<wire_MySize> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_list_my_tree_node extends ffi.Struct {
  external ffi.Pointer<wire_MyTreeNode> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_MyTreeNode extends ffi.Struct {
  @ffi.Int32()
  external int value_i32;

  external ffi.Pointer<wire_uint_8_list> value_vec_u8;

  @ffi.Bool()
  external bool value_boolean;

  external ffi.Pointer<wire_list_my_tree_node> children;
}

final class wire_MyNestedStruct extends ffi.Struct {
  external wire_MyTreeNode tree_node;

  @ffi.Int32()
  external int weekday;
}

final class wire_int_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_int_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_float_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Float> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_float_64_list extends ffi.Struct {
  external ffi.Pointer<ffi.Double> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Attribute extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> key;

  external ffi.Pointer<wire_uint_8_list> value;
}

final class wire_list_attribute extends ffi.Struct {
  external ffi.Pointer<wire_Attribute> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_list_opt_box_autoadd_attribute extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_Attribute>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_ExoticOptionals extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> int32;

  external ffi.Pointer<ffi.Int64> int64;

  external ffi.Pointer<ffi.Double> float64;

  external ffi.Pointer<ffi.Bool> boolean;

  external ffi.Pointer<wire_uint_8_list> zerocopy;

  external ffi.Pointer<wire_int_8_list> int8list;

  external ffi.Pointer<wire_uint_8_list> uint8list;

  external ffi.Pointer<wire_int_32_list> int32list;

  external ffi.Pointer<wire_float_32_list> float32list;

  external ffi.Pointer<wire_float_64_list> float64list;

  external ffi.Pointer<wire_list_attribute> attributes;

  external ffi.Pointer<wire_list_opt_box_autoadd_attribute> attributes_nullable;

  external ffi.Pointer<wire_list_opt_box_autoadd_attribute> nullable_attributes;

  external ffi.Pointer<wire_NewTypeInt> newtypeint;
}

final class wire_list_opt_box_autoadd_i32 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int32>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_list_opt_box_autoadd_weekdays extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int32>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_list_opt_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_list_opt_int_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_int_32_list>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_OptVecs extends ffi.Struct {
  external ffi.Pointer<wire_list_opt_box_autoadd_i32> i32;

  external ffi.Pointer<wire_list_opt_box_autoadd_weekdays> enums;

  external ffi.Pointer<wire_list_opt_String> strings;

  external ffi.Pointer<wire_list_opt_int_32_list> buffers;
}

final class wire_Note extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> day;

  external ffi.Pointer<wire_uint_8_list> body;
}

final class wire_MyEnumFreezed_A extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_MyEnumFreezed_B extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class MyEnumFreezedKind extends ffi.Union {
  external ffi.Pointer<wire_MyEnumFreezed_A> A;

  external ffi.Pointer<wire_MyEnumFreezed_B> B;
}

final class wire_MyEnumFreezed extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<MyEnumFreezedKind> kind;
}

final class wire_Customized extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> final_field;

  external ffi.Pointer<wire_uint_8_list> non_final_field;
}

final class wire_KitchenSink_Empty extends ffi.Opaque {}

final class wire_KitchenSink_Primitives extends ffi.Struct {
  @ffi.Int32()
  external int int32;

  @ffi.Double()
  external double float64;

  @ffi.Bool()
  external bool boolean;
}

final class wire_KitchenSink_Nested extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  external ffi.Pointer<wire_KitchenSink> field1;
}

final class wire_KitchenSink extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<KitchenSinkKind> kind;
}

final class KitchenSinkKind extends ffi.Union {
  external ffi.Pointer<wire_KitchenSink_Empty> Empty;

  external ffi.Pointer<wire_KitchenSink_Primitives> Primitives;

  external ffi.Pointer<wire_KitchenSink_Nested> Nested;

  external ffi.Pointer<wire_KitchenSink_Optional> Optional;

  external ffi.Pointer<wire_KitchenSink_Buffer> Buffer;

  external ffi.Pointer<wire_KitchenSink_Enums> Enums;
}

final class wire_KitchenSink_Optional extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> field0;

  external ffi.Pointer<ffi.Int32> field1;
}

final class wire_KitchenSink_Buffer extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_KitchenSink_Enums extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_MyStruct extends ffi.Struct {
  @ffi.Bool()
  external bool content;
}

final class wire_ApplicationEnvVar extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;

  @ffi.Bool()
  external bool field1;
}

final class wire_list_application_env_var extends ffi.Struct {
  external ffi.Pointer<wire_ApplicationEnvVar> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_ApplicationEnv extends ffi.Struct {
  external ffi.Pointer<wire_list_application_env_var> vars;
}

final class wire_ApplicationSettings extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> version;

  @ffi.Int32()
  external int mode;

  external ffi.Pointer<wire_ApplicationEnv> env;

  external ffi.Pointer<wire_ApplicationEnv> env_optional;
}

final class wire_Numbers extends ffi.Struct {
  external ffi.Pointer<wire_int_32_list> field0;
}

final class wire_Sequences extends ffi.Struct {
  external ffi.Pointer<wire_int_32_list> field0;
}

final class wire_UserId extends ffi.Struct {
  @ffi.Uint32()
  external int value;
}

final class wire_Speed_Unknown extends ffi.Opaque {}

final class wire_Speed_GPS extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

final class SpeedKind extends ffi.Union {
  external ffi.Pointer<wire_Speed_Unknown> Unknown;

  external ffi.Pointer<wire_Speed_GPS> GPS;
}

final class wire_Speed extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<SpeedKind> kind;
}

final class wire_Measure_Speed extends ffi.Struct {
  external ffi.Pointer<wire_Speed> field0;
}

final class wire_Distance_Unknown extends ffi.Opaque {}

final class wire_Distance_Map extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

final class DistanceKind extends ffi.Union {
  external ffi.Pointer<wire_Distance_Unknown> Unknown;

  external ffi.Pointer<wire_Distance_Map> Map;
}

final class wire_Distance extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DistanceKind> kind;
}

final class wire_Measure_Distance extends ffi.Struct {
  external ffi.Pointer<wire_Distance> field0;
}

final class MeasureKind extends ffi.Union {
  external ffi.Pointer<wire_Measure_Speed> Speed;

  external ffi.Pointer<wire_Measure_Distance> Distance;
}

final class wire_Measure extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<MeasureKind> kind;
}

final class wire_int_64_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int64> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_FeatureChrono extends ffi.Struct {
  @ffi.Int64()
  external int utc;

  @ffi.Int64()
  external int local;

  @ffi.Int64()
  external int duration;

  @ffi.Int64()
  external int naive;
}

final class wire_FeatureUuid extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> one;

  external ffi.Pointer<wire_uint_8_list> many;
}

final class wire_MessageId extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_Blob extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_FeedId extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_TestId extends ffi.Struct {
  external ffi.Pointer<wire_int_32_list> field0;
}

final class wire_list_test_id extends ffi.Struct {
  external ffi.Pointer<wire_TestId> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_DartOpaque extends ffi.Struct {
  @ffi.Int64()
  external int port;

  @ffi.UintPtr()
  external int handle;
}

final class wire_list_DartOpaque extends ffi.Struct {
  external ffi.Pointer<wire_DartOpaque> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_HideData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_EnumOpaque_Struct extends ffi.Struct {
  external wire_HideData field0;
}

final class wire_I32 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_EnumOpaque_Primitive extends ffi.Struct {
  external wire_I32 field0;
}

final class wire_BoxDartDebug extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_EnumOpaque_TraitObj extends ffi.Struct {
  external wire_BoxDartDebug field0;
}

final class wire_MutexHideData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_EnumOpaque_Mutex extends ffi.Struct {
  external wire_MutexHideData field0;
}

final class wire_RwLockHideData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_EnumOpaque_RwLock extends ffi.Struct {
  external wire_RwLockHideData field0;
}

final class EnumOpaqueKind extends ffi.Union {
  external ffi.Pointer<wire_EnumOpaque_Struct> Struct;

  external ffi.Pointer<wire_EnumOpaque_Primitive> Primitive;

  external ffi.Pointer<wire_EnumOpaque_TraitObj> TraitObj;

  external ffi.Pointer<wire_EnumOpaque_Mutex> Mutex;

  external ffi.Pointer<wire_EnumOpaque_RwLock> RwLock;
}

final class wire_EnumOpaque extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<EnumOpaqueKind> kind;
}

final class wire_NonCloneData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_NonSendHideData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_list_HideData extends ffi.Struct {
  external ffi.Pointer<wire_HideData> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_OpaqueNested extends ffi.Struct {
  external wire_HideData first;

  external wire_HideData second;
}

final class wire_DartOpaqueNested extends ffi.Struct {
  external wire_DartOpaque first;

  external wire_DartOpaque second;
}

final class wire_EnumDartOpaque_Primitive extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_EnumDartOpaque_Opaque extends ffi.Struct {
  external wire_DartOpaque field0;
}

final class EnumDartOpaqueKind extends ffi.Union {
  external ffi.Pointer<wire_EnumDartOpaque_Primitive> Primitive;

  external ffi.Pointer<wire_EnumDartOpaque_Opaque> Opaque;
}

final class wire_EnumDartOpaque extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<EnumDartOpaqueKind> kind;
}

final class wire_Empty extends ffi.Opaque {}

final class wire_list_weekdays extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_A extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> a;
}

final class wire_Abc_A extends ffi.Struct {
  external ffi.Pointer<wire_A> field0;
}

final class wire_B extends ffi.Struct {
  @ffi.Int32()
  external int b;
}

final class wire_Abc_B extends ffi.Struct {
  external ffi.Pointer<wire_B> field0;
}

final class wire_C extends ffi.Struct {
  @ffi.Bool()
  external bool c;
}

final class wire_Abc_C extends ffi.Struct {
  external ffi.Pointer<wire_C> field0;
}

final class wire_Abc_JustInt extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class AbcKind extends ffi.Union {
  external ffi.Pointer<wire_Abc_A> A;

  external ffi.Pointer<wire_Abc_B> B;

  external ffi.Pointer<wire_Abc_C> C;

  external ffi.Pointer<wire_Abc_JustInt> JustInt;
}

final class wire_Abc extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<AbcKind> kind;
}

final class wire_StructWithEnum extends ffi.Struct {
  external wire_Abc abc1;

  external wire_Abc abc2;
}

final class wire___record__String_i32 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;

  @ffi.Int32()
  external int field1;
}

final class wire_list___record__String_i32 extends ffi.Struct {
  external ffi.Pointer<wire___record__String_i32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Event extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> address;

  external ffi.Pointer<wire_uint_8_list> payload;
}

final class wire_SumWith extends ffi.Struct {
  @ffi.Uint32()
  external int x;
}

final class wire_ConcatenateWith extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> a;
}

final class wire_SomeStruct extends ffi.Struct {
  @ffi.Uint32()
  external int value;
}

final class wire_CustomStruct extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> message;
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
